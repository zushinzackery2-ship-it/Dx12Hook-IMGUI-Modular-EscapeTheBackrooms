#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenInputPlugin

#include "Basic.hpp"

#include "OpenInputPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function OpenInputPlugin.OpenInputFunctionLibrary.FillActionInfoFromRepContainer
// 0x0160 (0x0160 - 0x0000)
struct OpenInputFunctionLibrary_FillActionInfoFromRepContainer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPOpenVRActionInfo                    ActionInfo;                                        // 0x0010(0x00F0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBPSkeletalRepContainer                TargetRepContainer;                                // 0x0100(0x0058)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenInputFunctionLibrary_FillActionInfoFromRepContainer) == 0x000010, "Wrong alignment on OpenInputFunctionLibrary_FillActionInfoFromRepContainer");
static_assert(sizeof(OpenInputFunctionLibrary_FillActionInfoFromRepContainer) == 0x000160, "Wrong size on OpenInputFunctionLibrary_FillActionInfoFromRepContainer");
static_assert(offsetof(OpenInputFunctionLibrary_FillActionInfoFromRepContainer, WorldContextObject) == 0x000000, "Member 'OpenInputFunctionLibrary_FillActionInfoFromRepContainer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_FillActionInfoFromRepContainer, ActionInfo) == 0x000010, "Member 'OpenInputFunctionLibrary_FillActionInfoFromRepContainer::ActionInfo' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_FillActionInfoFromRepContainer, TargetRepContainer) == 0x000100, "Member 'OpenInputFunctionLibrary_FillActionInfoFromRepContainer::TargetRepContainer' has a wrong offset!");

// Function OpenInputPlugin.OpenInputFunctionLibrary.FillRepContainerFromActionInfo
// 0x0150 (0x0150 - 0x0000)
struct OpenInputFunctionLibrary_FillRepContainerFromActionInfo final
{
public:
	struct FBPOpenVRActionInfo                    ActionInfo;                                        // 0x0000(0x00F0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBPSkeletalRepContainer                TargetRepContainer;                                // 0x00F0(0x0058)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EVRSkeletalReplicationType                    ReplicationType;                                   // 0x0148(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenInputFunctionLibrary_FillRepContainerFromActionInfo) == 0x000010, "Wrong alignment on OpenInputFunctionLibrary_FillRepContainerFromActionInfo");
static_assert(sizeof(OpenInputFunctionLibrary_FillRepContainerFromActionInfo) == 0x000150, "Wrong size on OpenInputFunctionLibrary_FillRepContainerFromActionInfo");
static_assert(offsetof(OpenInputFunctionLibrary_FillRepContainerFromActionInfo, ActionInfo) == 0x000000, "Member 'OpenInputFunctionLibrary_FillRepContainerFromActionInfo::ActionInfo' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_FillRepContainerFromActionInfo, TargetRepContainer) == 0x0000F0, "Member 'OpenInputFunctionLibrary_FillRepContainerFromActionInfo::TargetRepContainer' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_FillRepContainerFromActionInfo, ReplicationType) == 0x000148, "Member 'OpenInputFunctionLibrary_FillRepContainerFromActionInfo::ReplicationType' has a wrong offset!");

// Function OpenInputPlugin.OpenInputFunctionLibrary.GetActionPose
// 0x0100 (0x0100 - 0x0000)
struct OpenInputFunctionLibrary_GetActionPose final
{
public:
	struct FBPOpenVRActionInfo                    Action;                                            // 0x0000(0x00F0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x00F0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetCompressedData;                                // 0x00F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetGestureValues;                                 // 0x00F9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00FA(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenInputFunctionLibrary_GetActionPose) == 0x000010, "Wrong alignment on OpenInputFunctionLibrary_GetActionPose");
static_assert(sizeof(OpenInputFunctionLibrary_GetActionPose) == 0x000100, "Wrong size on OpenInputFunctionLibrary_GetActionPose");
static_assert(offsetof(OpenInputFunctionLibrary_GetActionPose, Action) == 0x000000, "Member 'OpenInputFunctionLibrary_GetActionPose::Action' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetActionPose, WorldContextObject) == 0x0000F0, "Member 'OpenInputFunctionLibrary_GetActionPose::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetActionPose, bGetCompressedData) == 0x0000F8, "Member 'OpenInputFunctionLibrary_GetActionPose::bGetCompressedData' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetActionPose, bGetGestureValues) == 0x0000F9, "Member 'OpenInputFunctionLibrary_GetActionPose::bGetGestureValues' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetActionPose, ReturnValue) == 0x0000FA, "Member 'OpenInputFunctionLibrary_GetActionPose::ReturnValue' has a wrong offset!");

// Function OpenInputPlugin.OpenInputFunctionLibrary.GetHandCurlAndSplayValues
// 0x0048 (0x0048 - 0x0000)
struct OpenInputFunctionLibrary_GetHandCurlAndSplayValues final
{
public:
	EVRActionHand                                 TargetHand;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPOpenVRGesturePoseData               CurlAndSplayValuesOut;                             // 0x0008(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OptionalCustomActionName;                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenInputFunctionLibrary_GetHandCurlAndSplayValues) == 0x000008, "Wrong alignment on OpenInputFunctionLibrary_GetHandCurlAndSplayValues");
static_assert(sizeof(OpenInputFunctionLibrary_GetHandCurlAndSplayValues) == 0x000048, "Wrong size on OpenInputFunctionLibrary_GetHandCurlAndSplayValues");
static_assert(offsetof(OpenInputFunctionLibrary_GetHandCurlAndSplayValues, TargetHand) == 0x000000, "Member 'OpenInputFunctionLibrary_GetHandCurlAndSplayValues::TargetHand' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetHandCurlAndSplayValues, CurlAndSplayValuesOut) == 0x000008, "Member 'OpenInputFunctionLibrary_GetHandCurlAndSplayValues::CurlAndSplayValuesOut' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetHandCurlAndSplayValues, WorldContextObject) == 0x000028, "Member 'OpenInputFunctionLibrary_GetHandCurlAndSplayValues::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetHandCurlAndSplayValues, OptionalCustomActionName) == 0x000030, "Member 'OpenInputFunctionLibrary_GetHandCurlAndSplayValues::OptionalCustomActionName' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetHandCurlAndSplayValues, ReturnValue) == 0x000040, "Member 'OpenInputFunctionLibrary_GetHandCurlAndSplayValues::ReturnValue' has a wrong offset!");

// Function OpenInputPlugin.OpenInputFunctionLibrary.GetOpenVRBoneTransform
// 0x0130 (0x0130 - 0x0000)
struct OpenInputFunctionLibrary_GetOpenVRBoneTransform final
{
public:
	EVROpenInputBones                             BoneToGet;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPOpenVRActionInfo                    HandSkeletalAction;                                // 0x0010(0x00F0)(Parm, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0100(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenInputFunctionLibrary_GetOpenVRBoneTransform) == 0x000010, "Wrong alignment on OpenInputFunctionLibrary_GetOpenVRBoneTransform");
static_assert(sizeof(OpenInputFunctionLibrary_GetOpenVRBoneTransform) == 0x000130, "Wrong size on OpenInputFunctionLibrary_GetOpenVRBoneTransform");
static_assert(offsetof(OpenInputFunctionLibrary_GetOpenVRBoneTransform, BoneToGet) == 0x000000, "Member 'OpenInputFunctionLibrary_GetOpenVRBoneTransform::BoneToGet' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetOpenVRBoneTransform, HandSkeletalAction) == 0x000010, "Member 'OpenInputFunctionLibrary_GetOpenVRBoneTransform::HandSkeletalAction' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetOpenVRBoneTransform, ReturnValue) == 0x000100, "Member 'OpenInputFunctionLibrary_GetOpenVRBoneTransform::ReturnValue' has a wrong offset!");

// Function OpenInputPlugin.OpenInputFunctionLibrary.GetReferencePose
// 0x0110 (0x0110 - 0x0000)
struct OpenInputFunctionLibrary_GetReferencePose final
{
public:
	struct FBPOpenVRActionInfo                    BlankActionToFill;                                 // 0x0000(0x00F0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBPOpenVRActionHandle                  ActionHandleToQuery;                               // 0x00F0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x00F8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVROpenInputReferencePose                     PoseTypeToRetreive;                                // 0x0100(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0101(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0xE];                                      // 0x0102(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenInputFunctionLibrary_GetReferencePose) == 0x000010, "Wrong alignment on OpenInputFunctionLibrary_GetReferencePose");
static_assert(sizeof(OpenInputFunctionLibrary_GetReferencePose) == 0x000110, "Wrong size on OpenInputFunctionLibrary_GetReferencePose");
static_assert(offsetof(OpenInputFunctionLibrary_GetReferencePose, BlankActionToFill) == 0x000000, "Member 'OpenInputFunctionLibrary_GetReferencePose::BlankActionToFill' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetReferencePose, ActionHandleToQuery) == 0x0000F0, "Member 'OpenInputFunctionLibrary_GetReferencePose::ActionHandleToQuery' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetReferencePose, WorldContextObject) == 0x0000F8, "Member 'OpenInputFunctionLibrary_GetReferencePose::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetReferencePose, PoseTypeToRetreive) == 0x000100, "Member 'OpenInputFunctionLibrary_GetReferencePose::PoseTypeToRetreive' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetReferencePose, ReturnValue) == 0x000101, "Member 'OpenInputFunctionLibrary_GetReferencePose::ReturnValue' has a wrong offset!");

// Function OpenInputPlugin.OpenInputFunctionLibrary.GetSkeletalTrackingLevel
// 0x0003 (0x0003 - 0x0000)
struct OpenInputFunctionLibrary_GetSkeletalTrackingLevel final
{
public:
	EVROpenInputSkeletalTrackingLevel             SkeletalTrackingLevelOut;                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVRActionHand                                 HandToRetreive;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenInputFunctionLibrary_GetSkeletalTrackingLevel) == 0x000001, "Wrong alignment on OpenInputFunctionLibrary_GetSkeletalTrackingLevel");
static_assert(sizeof(OpenInputFunctionLibrary_GetSkeletalTrackingLevel) == 0x000003, "Wrong size on OpenInputFunctionLibrary_GetSkeletalTrackingLevel");
static_assert(offsetof(OpenInputFunctionLibrary_GetSkeletalTrackingLevel, SkeletalTrackingLevelOut) == 0x000000, "Member 'OpenInputFunctionLibrary_GetSkeletalTrackingLevel::SkeletalTrackingLevelOut' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetSkeletalTrackingLevel, HandToRetreive) == 0x000001, "Member 'OpenInputFunctionLibrary_GetSkeletalTrackingLevel::HandToRetreive' has a wrong offset!");
static_assert(offsetof(OpenInputFunctionLibrary_GetSkeletalTrackingLevel, ReturnValue) == 0x000002, "Member 'OpenInputFunctionLibrary_GetSkeletalTrackingLevel::ReturnValue' has a wrong offset!");

// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.GetFingerCurlAndSplayData
// 0x0030 (0x0030 - 0x0000)
struct OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData final
{
public:
	EVRActionHand                                 TargetHand;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPOpenVRGesturePoseData               OutFingerPoseData;                                 // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData) == 0x000008, "Wrong alignment on OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData");
static_assert(sizeof(OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData) == 0x000030, "Wrong size on OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData");
static_assert(offsetof(OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData, TargetHand) == 0x000000, "Member 'OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData::TargetHand' has a wrong offset!");
static_assert(offsetof(OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData, OutFingerPoseData) == 0x000008, "Member 'OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData::OutFingerPoseData' has a wrong offset!");
static_assert(offsetof(OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData, ReturnValue) == 0x000028, "Member 'OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData::ReturnValue' has a wrong offset!");

// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.K2_DetectCurrentPose
// 0x0120 (0x0120 - 0x0000)
struct OpenInputSkeletalMeshComponent_K2_DetectCurrentPose final
{
public:
	struct FBPOpenVRActionInfo                    SkeletalAction;                                    // 0x0000(0x00F0)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FOpenInputGesture                      GestureOut;                                        // 0x00F0(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0xF];                                      // 0x0111(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenInputSkeletalMeshComponent_K2_DetectCurrentPose) == 0x000010, "Wrong alignment on OpenInputSkeletalMeshComponent_K2_DetectCurrentPose");
static_assert(sizeof(OpenInputSkeletalMeshComponent_K2_DetectCurrentPose) == 0x000120, "Wrong size on OpenInputSkeletalMeshComponent_K2_DetectCurrentPose");
static_assert(offsetof(OpenInputSkeletalMeshComponent_K2_DetectCurrentPose, SkeletalAction) == 0x000000, "Member 'OpenInputSkeletalMeshComponent_K2_DetectCurrentPose::SkeletalAction' has a wrong offset!");
static_assert(offsetof(OpenInputSkeletalMeshComponent_K2_DetectCurrentPose, GestureOut) == 0x0000F0, "Member 'OpenInputSkeletalMeshComponent_K2_DetectCurrentPose::GestureOut' has a wrong offset!");
static_assert(offsetof(OpenInputSkeletalMeshComponent_K2_DetectCurrentPose, ReturnValue) == 0x000110, "Member 'OpenInputSkeletalMeshComponent_K2_DetectCurrentPose::ReturnValue' has a wrong offset!");

// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.SaveCurrentPose
// 0x000C (0x000C - 0x0000)
struct OpenInputSkeletalMeshComponent_SaveCurrentPose final
{
public:
	class FName                                   RecordingName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFingerCurlOnly;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVRActionHand                                 HandToSave;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenInputSkeletalMeshComponent_SaveCurrentPose) == 0x000004, "Wrong alignment on OpenInputSkeletalMeshComponent_SaveCurrentPose");
static_assert(sizeof(OpenInputSkeletalMeshComponent_SaveCurrentPose) == 0x00000C, "Wrong size on OpenInputSkeletalMeshComponent_SaveCurrentPose");
static_assert(offsetof(OpenInputSkeletalMeshComponent_SaveCurrentPose, RecordingName) == 0x000000, "Member 'OpenInputSkeletalMeshComponent_SaveCurrentPose::RecordingName' has a wrong offset!");
static_assert(offsetof(OpenInputSkeletalMeshComponent_SaveCurrentPose, bUseFingerCurlOnly) == 0x000008, "Member 'OpenInputSkeletalMeshComponent_SaveCurrentPose::bUseFingerCurlOnly' has a wrong offset!");
static_assert(offsetof(OpenInputSkeletalMeshComponent_SaveCurrentPose, HandToSave) == 0x000009, "Member 'OpenInputSkeletalMeshComponent_SaveCurrentPose::HandToSave' has a wrong offset!");

// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.Server_SendSkeletalTransforms
// 0x0058 (0x0058 - 0x0000)
struct OpenInputSkeletalMeshComponent_Server_SendSkeletalTransforms final
{
public:
	struct FBPSkeletalRepContainer                SkeletalInfo;                                      // 0x0000(0x0058)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenInputSkeletalMeshComponent_Server_SendSkeletalTransforms) == 0x000008, "Wrong alignment on OpenInputSkeletalMeshComponent_Server_SendSkeletalTransforms");
static_assert(sizeof(OpenInputSkeletalMeshComponent_Server_SendSkeletalTransforms) == 0x000058, "Wrong size on OpenInputSkeletalMeshComponent_Server_SendSkeletalTransforms");
static_assert(offsetof(OpenInputSkeletalMeshComponent_Server_SendSkeletalTransforms, SkeletalInfo) == 0x000000, "Member 'OpenInputSkeletalMeshComponent_Server_SendSkeletalTransforms::SkeletalInfo' has a wrong offset!");

// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.SetDetectGestures
// 0x0001 (0x0001 - 0x0000)
struct OpenInputSkeletalMeshComponent_SetDetectGestures final
{
public:
	bool                                          bNewDetectGestures;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenInputSkeletalMeshComponent_SetDetectGestures) == 0x000001, "Wrong alignment on OpenInputSkeletalMeshComponent_SetDetectGestures");
static_assert(sizeof(OpenInputSkeletalMeshComponent_SetDetectGestures) == 0x000001, "Wrong size on OpenInputSkeletalMeshComponent_SetDetectGestures");
static_assert(offsetof(OpenInputSkeletalMeshComponent_SetDetectGestures, bNewDetectGestures) == 0x000000, "Member 'OpenInputSkeletalMeshComponent_SetDetectGestures::bNewDetectGestures' has a wrong offset!");

// Function OpenInputPlugin.OpenInputAnimInstance.InitializeCustomBoneMapping
// 0x0040 (0x0040 - 0x0000)
struct OpenInputAnimInstance_InitializeCustomBoneMapping final
{
public:
	struct FBPSkeletalMappingData                 SkeletalMappingData;                               // 0x0000(0x0040)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenInputAnimInstance_InitializeCustomBoneMapping) == 0x000010, "Wrong alignment on OpenInputAnimInstance_InitializeCustomBoneMapping");
static_assert(sizeof(OpenInputAnimInstance_InitializeCustomBoneMapping) == 0x000040, "Wrong size on OpenInputAnimInstance_InitializeCustomBoneMapping");
static_assert(offsetof(OpenInputAnimInstance_InitializeCustomBoneMapping, SkeletalMappingData) == 0x000000, "Member 'OpenInputAnimInstance_InitializeCustomBoneMapping::SkeletalMappingData' has a wrong offset!");

}

