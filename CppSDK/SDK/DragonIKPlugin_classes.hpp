#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DragonIKPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DragonIKPlugin_structs.hpp"


namespace SDK
{

// Class DragonIKPlugin.DragonIK_Library
// 0x0008 (0x0030 - 0x0028)
class UDragonIK_Library final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FRotator CustomLookRotation(const struct FVector& lookAt, const struct FVector& upDirection);
	static struct FRotator LookAtRotation_V3(const struct FVector& Source, const struct FVector& Target, const struct FVector& UpVector);
	static struct FRotator LookAtVector_V2(const struct FVector& Source_Location, const struct FVector& lookAt, const struct FVector& upDirection);
	static struct FTransform QuatLookXatLocation(const struct FTransform& LookAtFromTransform, const struct FVector& LookAtTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIK_Library">();
	}
	static class UDragonIK_Library* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIK_Library>();
	}
};
static_assert(alignof(UDragonIK_Library) == 0x000008, "Wrong alignment on UDragonIK_Library");
static_assert(sizeof(UDragonIK_Library) == 0x000030, "Wrong size on UDragonIK_Library");

// Class DragonIKPlugin.DragonIKFootStepsComponent
// 0x0100 (0x01B0 - 0x00B0)
class alignas(0x10) UDragonIKFootStepsComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class FName bone_name, const struct FTransform& foot_transform, float height_difference, const struct FHitResult& hit_info)> OnCharacterFootStep; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0xD0];                                      // 0x00C0(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   read_this;                                         // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           foot_socket;                                       // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         foot_enter_height;                                 // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         foot_exit_height;                                  // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CallFootSteps(class FName bone_name, const struct FTransform& foot_transform, float height_difference, const struct FHitResult& hit_info);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKFootStepsComponent">();
	}
	static class UDragonIKFootStepsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIKFootStepsComponent>();
	}
};
static_assert(alignof(UDragonIKFootStepsComponent) == 0x000010, "Wrong alignment on UDragonIKFootStepsComponent");
static_assert(sizeof(UDragonIKFootStepsComponent) == 0x0001B0, "Wrong size on UDragonIKFootStepsComponent");
static_assert(offsetof(UDragonIKFootStepsComponent, OnCharacterFootStep) == 0x0000B0, "Member 'UDragonIKFootStepsComponent::OnCharacterFootStep' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, read_this) == 0x000190, "Member 'UDragonIKFootStepsComponent::read_this' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, foot_socket) == 0x000198, "Member 'UDragonIKFootStepsComponent::foot_socket' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, foot_enter_height) == 0x0001A8, "Member 'UDragonIKFootStepsComponent::foot_enter_height' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, foot_exit_height) == 0x0001AC, "Member 'UDragonIKFootStepsComponent::foot_exit_height' has a wrong offset!");

// Class DragonIKPlugin.DragonIKPhysicsComponent
// 0x02B0 (0x0360 - 0x00B0)
class alignas(0x10) UDragonIKPhysicsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x20];                                      // 0x00B0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         physanim_tag_index;                                // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Custom_Root_Bone;                                  // 0x00D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           individual_bone_selection;                         // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x20];                                      // 0x00F0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Influence_Stopping_Bones;                          // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDragonData_PhysicsHandleMultiplier> Override_Handle_Strength_Multiplier;          // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x30];                                     // 0x0130(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Linear_Strength;                                   // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Angular_Strength;                                  // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Linear_Damp;                                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Angular_Damp;                                      // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interpolation_Speed;                               // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          parent_child_ragdoll_state;                        // 0x0174(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FName>                Parent_Child_Connection_Array;                     // 0x0178(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          use_auto_blending_logic;                           // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x1];                                      // 0x01C9(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          modify_physics_states;                             // 0x01CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB[0x1];                                      // 0x01CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Hit_Enable_Speed;                                  // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hit_Disable_Speed;                                 // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         hit_delay_time;                                    // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Physanim_Enter_Curve;                              // 0x01E0(0x0088)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_268[0xF8];                                     // 0x0268(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheSimulationStates();
	void Control_Bone_Handle(class FName bone_name, const struct FTransform& override_transform, bool Enable);
	void FirstTimeInitialization(class USkeletalMeshComponent* skeleton_input);
	void Modify_Reset_Bone_Info(const TArray<class FName>& bone_list);
	void OnHitCallback(const struct FHitResult& Hit, class FName Optional_Override_Hit_Bone_Name, struct FVector* hit_location, struct FVector* hit_impulse_direction, class FName* hit_bone_name);
	void ReGrabAllHandles(bool exit_ragdoll);
	void ReleaseAllHandles(bool go_ragdoll);
	void SetInterpolation(int32 inter_value);
	void UpdatePhysanimData(int32 LinearStrength, int32 AngularStrength, int32 LinearDamp, int32 AngularDamp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKPhysicsComponent">();
	}
	static class UDragonIKPhysicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIKPhysicsComponent>();
	}
};
static_assert(alignof(UDragonIKPhysicsComponent) == 0x000010, "Wrong alignment on UDragonIKPhysicsComponent");
static_assert(sizeof(UDragonIKPhysicsComponent) == 0x000360, "Wrong size on UDragonIKPhysicsComponent");
static_assert(offsetof(UDragonIKPhysicsComponent, physanim_tag_index) == 0x0000D0, "Member 'UDragonIKPhysicsComponent::physanim_tag_index' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Custom_Root_Bone) == 0x0000D4, "Member 'UDragonIKPhysicsComponent::Custom_Root_Bone' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, individual_bone_selection) == 0x0000E0, "Member 'UDragonIKPhysicsComponent::individual_bone_selection' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Influence_Stopping_Bones) == 0x000110, "Member 'UDragonIKPhysicsComponent::Influence_Stopping_Bones' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Override_Handle_Strength_Multiplier) == 0x000120, "Member 'UDragonIKPhysicsComponent::Override_Handle_Strength_Multiplier' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Linear_Strength) == 0x000160, "Member 'UDragonIKPhysicsComponent::Linear_Strength' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Angular_Strength) == 0x000164, "Member 'UDragonIKPhysicsComponent::Angular_Strength' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Linear_Damp) == 0x000168, "Member 'UDragonIKPhysicsComponent::Linear_Damp' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Angular_Damp) == 0x00016C, "Member 'UDragonIKPhysicsComponent::Angular_Damp' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Interpolation_Speed) == 0x000170, "Member 'UDragonIKPhysicsComponent::Interpolation_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, parent_child_ragdoll_state) == 0x000174, "Member 'UDragonIKPhysicsComponent::parent_child_ragdoll_state' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Parent_Child_Connection_Array) == 0x000178, "Member 'UDragonIKPhysicsComponent::Parent_Child_Connection_Array' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, use_auto_blending_logic) == 0x0001C8, "Member 'UDragonIKPhysicsComponent::use_auto_blending_logic' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, modify_physics_states) == 0x0001CA, "Member 'UDragonIKPhysicsComponent::modify_physics_states' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Hit_Enable_Speed) == 0x0001CC, "Member 'UDragonIKPhysicsComponent::Hit_Enable_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Hit_Disable_Speed) == 0x0001D0, "Member 'UDragonIKPhysicsComponent::Hit_Disable_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, hit_delay_time) == 0x0001D4, "Member 'UDragonIKPhysicsComponent::hit_delay_time' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Physanim_Enter_Curve) == 0x0001E0, "Member 'UDragonIKPhysicsComponent::Physanim_Enter_Curve' has a wrong offset!");

// Class DragonIKPlugin.DragonIKPhysicsHolder
// 0x0018 (0x0238 - 0x0220)
class ADragonIKPhysicsHolder final : public AActor
{
public:
	uint8                                         Pad_220[0x10];                                     // 0x0220(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 connected_actor;                                   // 0x0230(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKPhysicsHolder">();
	}
	static class ADragonIKPhysicsHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADragonIKPhysicsHolder>();
	}
};
static_assert(alignof(ADragonIKPhysicsHolder) == 0x000008, "Wrong alignment on ADragonIKPhysicsHolder");
static_assert(sizeof(ADragonIKPhysicsHolder) == 0x000238, "Wrong size on ADragonIKPhysicsHolder");
static_assert(offsetof(ADragonIKPhysicsHolder, connected_actor) == 0x000230, "Member 'ADragonIKPhysicsHolder::connected_actor' has a wrong offset!");

}

