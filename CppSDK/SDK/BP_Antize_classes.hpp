#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Antize

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Antize.BP_Antize_C
// 0x0000 (0x0028 - 0x0028)
class UBP_Antize_C final : public UBlueprintFunctionLibrary
{
public:
	static void FinishedEndScene(class UObject* __WorldContext);
	static void ConvertStringToFloat(const class FString& In, class UObject* __WorldContext, float* Out);
	static void SaveGame(class UBP_MySaveGame_C* SaveGame_0, class UObject* __WorldContext);
	static void FinishedCutscene(class UObject* __WorldContext);
	static void Get_Save_Game(class UObject* __WorldContext, class UBP_MySaveGame_C** SaveGame);
	static void FinishedLevel(int32 LevelIndex, float Time, class UObject* __WorldContext);
	static void Create_New_Save_File(class UObject* __WorldContext, class UBP_MySaveGame_C** SaveGame);
	static void Finished_Level_Lobby_Easy(int32 LevelIndex, float Time, class UObject* __WorldContext);
	static void GetLobbySaveGame(class UObject* __WorldContext, class UBP_LobbySaveGame_C** SaveGame);
	static void CreateNewLobbySave(class UObject* __WorldContext, class UBP_LobbySaveGame_C** SaveGame);
	static void Finished_Level_Lobby_Normal(int32 LevelIndex, float Time, class UObject* __WorldContext);
	static void Finished_Level_Lobby_Hard(int32 LevelIndex, float Time, class UObject* __WorldContext);
	static void Load_Saves(class UObject* __WorldContext, class UBP_MySaveGame_C** SaveGame);
	static void Save_Slot(class UBP_MySaveGame_C* SaveGame, class UObject* __WorldContext, bool* Success);
	static void SaveMainGame(class UBP_MySaveGame_C* SaveGame, class UObject* __WorldContext);
	static void UnlockMission(const class FString& MissionDTRow, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Antize_C">();
	}
	static class UBP_Antize_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Antize_C>();
	}
};
static_assert(alignof(UBP_Antize_C) == 0x000008, "Wrong alignment on UBP_Antize_C");
static_assert(sizeof(UBP_Antize_C) == 0x000028, "Wrong size on UBP_Antize_C");

}

