#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FallingPlank

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FallingPlank.BP_FallingPlank_C
// 0x0050 (0x0270 - 0x0220)
class ABP_FallingPlank_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        CableStart;                                        // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCableComponent*                        Cable02;                                           // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCableComponent*                        Cable01;                                           // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CableEnd;                                          // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PlankMesh;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          DidFall;                                           // 0x0258(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          ContinueSimulate;                                  // 0x0259(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_25A[0x2];                                      // 0x025A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoundDelay;                                        // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SoundLocation;                                     // 0x0260(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallDelay;                                         // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FallingPlank(int32 EntryPoint);
	void MC_ImpactSound(const struct FVector& Location);
	void BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ResetPhysics();
	void StopPhysics();
	void PlankFall();
	void OnRep_DidFall();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FallingPlank_C">();
	}
	static class ABP_FallingPlank_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FallingPlank_C>();
	}
};
static_assert(alignof(ABP_FallingPlank_C) == 0x000008, "Wrong alignment on ABP_FallingPlank_C");
static_assert(sizeof(ABP_FallingPlank_C) == 0x000270, "Wrong size on ABP_FallingPlank_C");
static_assert(offsetof(ABP_FallingPlank_C, UberGraphFrame) == 0x000220, "Member 'ABP_FallingPlank_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, CableStart) == 0x000228, "Member 'ABP_FallingPlank_C::CableStart' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, Cable02) == 0x000230, "Member 'ABP_FallingPlank_C::Cable02' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, Cable01) == 0x000238, "Member 'ABP_FallingPlank_C::Cable01' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, CableEnd) == 0x000240, "Member 'ABP_FallingPlank_C::CableEnd' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, PlankMesh) == 0x000248, "Member 'ABP_FallingPlank_C::PlankMesh' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, Scene) == 0x000250, "Member 'ABP_FallingPlank_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, DidFall) == 0x000258, "Member 'ABP_FallingPlank_C::DidFall' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, ContinueSimulate) == 0x000259, "Member 'ABP_FallingPlank_C::ContinueSimulate' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, SoundDelay) == 0x00025C, "Member 'ABP_FallingPlank_C::SoundDelay' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, SoundLocation) == 0x000260, "Member 'ABP_FallingPlank_C::SoundLocation' has a wrong offset!");
static_assert(offsetof(ABP_FallingPlank_C, FallDelay) == 0x00026C, "Member 'ABP_FallingPlank_C::FallDelay' has a wrong offset!");

}

