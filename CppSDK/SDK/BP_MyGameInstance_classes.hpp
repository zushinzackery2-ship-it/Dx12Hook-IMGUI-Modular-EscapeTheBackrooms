#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MyGameInstance

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_GameMode_structs.hpp"
#include "E_HeadsetType_structs.hpp"
#include "E_Difficulty_structs.hpp"
#include "Backrooms_structs.hpp"
#include "Backrooms_classes.hpp"
#include "AdvancedSessions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MyGameInstance.BP_MyGameInstance_C
// 0x0198 (0x0408 - 0x0270)
class UBP_MyGameInstance_C final : public UFancyGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_LoadingScreen_C*                     W_LoadingScreenRef;                                // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   LoadingMessage;                                    // 0x0280(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   LoadingMessageTip;                                 // 0x0298(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AlreadyIntro_;                                     // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLoadingBeforeContinue;                         // 0x02B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AMP_PlayerController_C*>         ToRespawn;                                         // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	E_Difficulty                                  Difficulty;                                        // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasKicked;                                         // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Code;                                              // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FromHub;                                           // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsExit;                                            // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasSeenSanityWarning;                              // 0x02E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E3[0x5];                                      // 0x02E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, E_HeadsetType>            HeadsetMap;                                        // 0x02E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 ExtraData;                                         // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsLoading;                                         // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastXP;                                            // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GameMode                                    CurrentMode;                                       // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StartingLevel;                                     // 0x0354(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DidCompleteMission;                                // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35D[0x3];                                      // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMissionStructure                      MissionCompleteData;                               // 0x0360(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasSeenGlowstickHint;                              // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasSeenRadioHint;                                  // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2[0x2];                                      // 0x03C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MissionCompletionTime;                             // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPrivateGame;                                     // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlayers;                                        // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasLostConnection;                                 // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AchievementQueue;                                  // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsCurrentlyUnlockingAchievement;                   // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasPremium;                                        // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PremiumDialogCompleted;                            // 0x03EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EB[0x5];                                      // 0x03EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 PlayerNum, EBPLoginStatus PreviousStatus, EBPLoginStatus NewStatus, const struct FBPUniqueNetId& NewPlayerUniqueNetID)> OnPlayerLoginStatusChange; // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          InitialPremiumCheckDone;                           // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MyGameInstance(int32 EntryPoint);
	void OnUserChanged(bool bIsSameUser);
	void OnPlayerLoginStatusChanged(int32 PlayerNum, EBPLoginStatus PreviousStatus, EBPLoginStatus NewStatus, const struct FBPUniqueNetId& NewPlayerUniqueNetID);
	void ReturnToMainMenu();
	void OnApplicationDeactivate();
	void OnApplicationReactivate();
	void InitializeUserHandlingEvents();
	void CheckPremiumState();
	void ShowPremiumAccountUpgradeDialog();
	void OnNetworkDisconnected();
	void StartAchievementCheckTimer();
	void CheckAchievementQueue();
	void UnlockAchievementFromQueue(class FName Name_0);
	void FramePacingOnXSS();
	void UpdateMissionTime(float DeltaSeconds);
	void OnInputDeviceChangedEvent(const EFancyInputDevice NewInputDevice);
	void HandleNetworkError(ENetworkFailure FailureType, bool bIsServer);
	void ReceiveShutdown();
	void OnSteamOverlayIsActive(bool isOverlayActive);
	void ResetAfterErrorFocus(class APlayerController* PlayerController, class UWidget* Widget);
	void UnlockAchievement(class FName AchievementName, class APlayerController* PlayerController);
	void OnPlayerTalkingStateChanged(const struct FBPUniqueNetId& PlayerId, bool bIsTalking);
	void CreateServer(class APlayerController* PlayerController, class UWidget* WidgetRef, class UWidget* ParentRef, class FName LevelName, int32 MaxPlayer, bool IsPrivate);
	void OnSessionInviteAccepted(int32 LocalPlayerNum, const struct FBPUniqueNetId& PersonInvited, const struct FBlueprintSessionResult& SessionToJoin);
	void ReceiveInit();
	void Initialize_AudioSettings();
	void JoinServerSession(const struct FBlueprintSessionResult& Session, class APlayerController* PlayerController, class UWidget* ParentRef, bool ShowLoadingScreen_0);
	void ShowLoadingScreen(class APlayerController* PlayerController, const class FText& Message);
	void OnSuccess_AADBDE694FB46A8B7863DFACCEB2F563(const bool SessionInfo);
	void OnFailure_AADBDE694FB46A8B7863DFACCEB2F563(const bool SessionInfo);
	void OnSuccess_1CBC76464599B713AC90FD9A36DAD11C(const bool SessionInfo);
	void OnFailure_1CBC76464599B713AC90FD9A36DAD11C(const bool SessionInfo);
	void OnSuccess_DA31791B43CC9383FE2FAAA3489B551C();
	void OnFailure_DA31791B43CC9383FE2FAAA3489B551C();
	void OnSuccess_8D32C966478C31E18DECF896A41FD4CE(const bool SessionInfo);
	void OnFailure_8D32C966478C31E18DECF896A41FD4CE(const bool SessionInfo);
	void OnSuccess_C5B79B204D20B91A7829848F8D941EA8(const bool SessionInfo);
	void OnFailure_C5B79B204D20B91A7829848F8D941EA8(const bool SessionInfo);
	void OnSuccess_CE0E125D465CF87986EDACB437749973();
	void OnFailure_CE0E125D465CF87986EDACB437749973();
	void OnSuccess_4A8E1BF4489B644EBB46CCB5CE87A8FB();
	void OnFailure_4A8E1BF4489B644EBB46CCB5CE87A8FB();
	void OnSuccess_F6A1C64C4BF407E4C67D4F8266759C0F(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_F6A1C64C4BF407E4C67D4F8266759C0F(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_CAE6F30D4DC345FC9711EAB8167D6CDE();
	void OnFailure_CAE6F30D4DC345FC9711EAB8167D6CDE();
	void OnSuccess_3A8DCEEA406564302B3F52A5D035B982();
	void OnFailure_3A8DCEEA406564302B3F52A5D035B982();
	void OnSuccess_D7E8A28A46B4BD5B7318A6A66AFD14E2();
	void OnFailure_D7E8A28A46B4BD5B7318A6A66AFD14E2();
	void OnSuccess_B065C47F48B157C121B06CAFCED8C6AC();
	void OnFailure_B065C47F48B157C121B06CAFCED8C6AC();
	void GenerateCode();
	void CheckCodeUnique(const struct FSessionsSearchSetting& Code_0);
	void ResetInput();
	void CheckShouldDisplayEvent();
	void UpdatePlayerSpeakingInScoreboard(const struct FBPUniqueNetId& NetId, bool IsSpeaking);
	bool IsPremiumAvailable();
	void PatchInputIni();
	bool IsOnline();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MyGameInstance_C">();
	}
	static class UBP_MyGameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MyGameInstance_C>();
	}
};
static_assert(alignof(UBP_MyGameInstance_C) == 0x000008, "Wrong alignment on UBP_MyGameInstance_C");
static_assert(sizeof(UBP_MyGameInstance_C) == 0x000408, "Wrong size on UBP_MyGameInstance_C");
static_assert(offsetof(UBP_MyGameInstance_C, UberGraphFrame) == 0x000270, "Member 'UBP_MyGameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, W_LoadingScreenRef) == 0x000278, "Member 'UBP_MyGameInstance_C::W_LoadingScreenRef' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, LoadingMessage) == 0x000280, "Member 'UBP_MyGameInstance_C::LoadingMessage' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, LoadingMessageTip) == 0x000298, "Member 'UBP_MyGameInstance_C::LoadingMessageTip' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, AlreadyIntro_) == 0x0002B0, "Member 'UBP_MyGameInstance_C::AlreadyIntro_' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, TimeLoadingBeforeContinue) == 0x0002B4, "Member 'UBP_MyGameInstance_C::TimeLoadingBeforeContinue' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, ToRespawn) == 0x0002B8, "Member 'UBP_MyGameInstance_C::ToRespawn' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, Difficulty) == 0x0002C8, "Member 'UBP_MyGameInstance_C::Difficulty' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, WasKicked) == 0x0002C9, "Member 'UBP_MyGameInstance_C::WasKicked' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, Code) == 0x0002D0, "Member 'UBP_MyGameInstance_C::Code' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, FromHub) == 0x0002E0, "Member 'UBP_MyGameInstance_C::FromHub' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, IsExit) == 0x0002E1, "Member 'UBP_MyGameInstance_C::IsExit' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, HasSeenSanityWarning) == 0x0002E2, "Member 'UBP_MyGameInstance_C::HasSeenSanityWarning' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, HeadsetMap) == 0x0002E8, "Member 'UBP_MyGameInstance_C::HeadsetMap' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, ExtraData) == 0x000338, "Member 'UBP_MyGameInstance_C::ExtraData' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, IsLoading) == 0x000348, "Member 'UBP_MyGameInstance_C::IsLoading' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, LastXP) == 0x00034C, "Member 'UBP_MyGameInstance_C::LastXP' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, CurrentMode) == 0x000350, "Member 'UBP_MyGameInstance_C::CurrentMode' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, StartingLevel) == 0x000354, "Member 'UBP_MyGameInstance_C::StartingLevel' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, DidCompleteMission) == 0x00035C, "Member 'UBP_MyGameInstance_C::DidCompleteMission' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, MissionCompleteData) == 0x000360, "Member 'UBP_MyGameInstance_C::MissionCompleteData' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, HasSeenGlowstickHint) == 0x0003C0, "Member 'UBP_MyGameInstance_C::HasSeenGlowstickHint' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, HasSeenRadioHint) == 0x0003C1, "Member 'UBP_MyGameInstance_C::HasSeenRadioHint' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, MissionCompletionTime) == 0x0003C4, "Member 'UBP_MyGameInstance_C::MissionCompletionTime' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, IsPrivateGame) == 0x0003C8, "Member 'UBP_MyGameInstance_C::IsPrivateGame' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, MaxPlayers) == 0x0003CC, "Member 'UBP_MyGameInstance_C::MaxPlayers' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, HasLostConnection) == 0x0003D0, "Member 'UBP_MyGameInstance_C::HasLostConnection' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, AchievementQueue) == 0x0003D8, "Member 'UBP_MyGameInstance_C::AchievementQueue' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, IsCurrentlyUnlockingAchievement) == 0x0003E8, "Member 'UBP_MyGameInstance_C::IsCurrentlyUnlockingAchievement' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, HasPremium) == 0x0003E9, "Member 'UBP_MyGameInstance_C::HasPremium' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, PremiumDialogCompleted) == 0x0003EA, "Member 'UBP_MyGameInstance_C::PremiumDialogCompleted' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, OnPlayerLoginStatusChange) == 0x0003F0, "Member 'UBP_MyGameInstance_C::OnPlayerLoginStatusChange' has a wrong offset!");
static_assert(offsetof(UBP_MyGameInstance_C, InitialPremiumCheckDone) == 0x000400, "Member 'UBP_MyGameInstance_C::InitialPremiumCheckDone' has a wrong offset!");

}

