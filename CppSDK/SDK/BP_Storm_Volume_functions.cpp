#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Storm_Volume

#include "Basic.hpp"

#include "BP_Storm_Volume_classes.hpp"
#include "BP_Storm_Volume_parameters.hpp"


namespace SDK
{

// Function BP_Storm_Volume.BP_Storm_Volume_C.ExecuteUbergraph_BP_Storm_Volume
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Storm_Volume_C::ExecuteUbergraph_BP_Storm_Volume(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Storm_Volume_C", "ExecuteUbergraph_BP_Storm_Volume");

	Params::BP_Storm_Volume_C_ExecuteUbergraph_BP_Storm_Volume Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Storm_Volume.BP_Storm_Volume_C.ResetStop
// (BlueprintCallable, BlueprintEvent)

void ABP_Storm_Volume_C::ResetStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Storm_Volume_C", "ResetStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Storm_Volume.BP_Storm_Volume_C.ResetRising
// (BlueprintCallable, BlueprintEvent)

void ABP_Storm_Volume_C::ResetRising()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Storm_Volume_C", "ResetRising");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Storm_Volume.BP_Storm_Volume_C.StopRising
// (BlueprintCallable, BlueprintEvent)

void ABP_Storm_Volume_C::StopRising()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Storm_Volume_C", "StopRising");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Storm_Volume.BP_Storm_Volume_C.StartRising
// (BlueprintCallable, BlueprintEvent)

void ABP_Storm_Volume_C::StartRising()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Storm_Volume_C", "StartRising");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Storm_Volume.BP_Storm_Volume_C.ReceiveActorEndOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Storm_Volume_C::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Storm_Volume_C", "ReceiveActorEndOverlap");

	Params::BP_Storm_Volume_C_ReceiveActorEndOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Storm_Volume.BP_Storm_Volume_C.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Storm_Volume_C::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Storm_Volume_C", "ReceiveActorBeginOverlap");

	Params::BP_Storm_Volume_C_ReceiveActorBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}

}

