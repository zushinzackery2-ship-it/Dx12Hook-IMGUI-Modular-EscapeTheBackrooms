#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Swim_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Swim_AnimBP.Swim_AnimBP_C
// 0x06B0 (0x0970 - 0x02C0)
class USwim_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x02F8(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x03E0(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0410(0x00B0)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x04C0(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x04E8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0568(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0598(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0618(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0648(0x00B0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x06F8(0x0158)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0850(0x00A0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x08F0(0x0028)()
	bool                                          IsInAir;                                           // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919[0x3];                                      // 0x0919(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementDirectionInDegrees;                        // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSwimming;                                        // 0x0924(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_925[0x3];                                      // 0x0925(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delta_Time;                                        // 0x0928(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use2DBlendSpace;                                   // 0x092C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92D[0x3];                                      // 0x092D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Current_Control_Rotation;                          // 0x0930(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Target_Control_Rotation;                           // 0x093C(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Actual_Control_Rotation;                           // 0x0948(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_not_Drowned;                                    // 0x0954(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_955[0x3];                                      // 0x0955(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             Character_Reference;                               // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAC_Swimming_C*                         Swimming_Component_Reference;                      // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Swim_AnimBP(int32 EntryPoint);
	void UpdateVariables();
	void BlueprintBeginPlay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Swim_AnimBP_AnimGraphNode_TransitionResult_A40F95DE411C414BC5A056BBA2D30F27();
	void GetMovementDirection();
	void SetSwimmingAnimationDriverVariables();
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Swim_AnimBP_C">();
	}
	static class USwim_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USwim_AnimBP_C>();
	}
};
static_assert(alignof(USwim_AnimBP_C) == 0x000010, "Wrong alignment on USwim_AnimBP_C");
static_assert(sizeof(USwim_AnimBP_C) == 0x000970, "Wrong size on USwim_AnimBP_C");
static_assert(offsetof(USwim_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'USwim_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'USwim_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x0002F8, "Member 'USwim_AnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_StateResult_2) == 0x0003E0, "Member 'USwim_AnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_StateMachine_1) == 0x000410, "Member 'USwim_AnimBP_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_TransitionResult) == 0x0004C0, "Member 'USwim_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x0004E8, "Member 'USwim_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_StateResult_1) == 0x000568, "Member 'USwim_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x000598, "Member 'USwim_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_StateResult) == 0x000618, "Member 'USwim_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_StateMachine) == 0x000648, "Member 'USwim_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_SaveCachedPose) == 0x0006F8, "Member 'USwim_AnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_BlendListByBool) == 0x000850, "Member 'USwim_AnimBP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, AnimGraphNode_UseCachedPose) == 0x0008F0, "Member 'USwim_AnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, IsInAir) == 0x000918, "Member 'USwim_AnimBP_C::IsInAir' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, Speed) == 0x00091C, "Member 'USwim_AnimBP_C::Speed' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, MovementDirectionInDegrees) == 0x000920, "Member 'USwim_AnimBP_C::MovementDirectionInDegrees' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, IsSwimming) == 0x000924, "Member 'USwim_AnimBP_C::IsSwimming' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, Delta_Time) == 0x000928, "Member 'USwim_AnimBP_C::Delta_Time' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, Use2DBlendSpace) == 0x00092C, "Member 'USwim_AnimBP_C::Use2DBlendSpace' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, Current_Control_Rotation) == 0x000930, "Member 'USwim_AnimBP_C::Current_Control_Rotation' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, Target_Control_Rotation) == 0x00093C, "Member 'USwim_AnimBP_C::Target_Control_Rotation' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, Actual_Control_Rotation) == 0x000948, "Member 'USwim_AnimBP_C::Actual_Control_Rotation' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, Is_not_Drowned) == 0x000954, "Member 'USwim_AnimBP_C::Is_not_Drowned' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, Character_Reference) == 0x000958, "Member 'USwim_AnimBP_C::Character_Reference' has a wrong offset!");
static_assert(offsetof(USwim_AnimBP_C, Swimming_Component_Reference) == 0x000960, "Member 'USwim_AnimBP_C::Swimming_Component_Reference' has a wrong offset!");

}

