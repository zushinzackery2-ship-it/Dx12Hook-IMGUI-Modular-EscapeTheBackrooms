#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_Swimming

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_Swimming.AC_Swimming_C
// 0x00D0 (0x0180 - 0x00B0)
class UAC_Swimming_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABPCharacter_Demo_C*                    Character_Reference;                               // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            Movement_component_reference;                      // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Character_Mesh_Reference;                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Overlapping_Physics_Volume;                     // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_in_Water;                                       // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_underwater;                                     // 0x00D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3[0x5];                                       // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Breathing_Point_Reference;                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_not_Drowned;                                    // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       Spawned_ambient_underwater_particles;              // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Is_Diving;                                         // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               From_Rot;                                          // 0x00FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               To_Rot;                                            // 0x0108(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Current_Control_Rot;                               // 0x0114(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_sprinting_in_water;                             // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Is_in_Water)> Is_In_Water_Event;                              // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool Is_underwater)> Is_Underwater_Event;                          // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         WaterHeight;                                       // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Underwater_C*                       Underwater;                                        // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Lights;                                            // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsSwimmingUp;                                      // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasDivingHelmet;                                   // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterMeshActor*                        Water;                                             // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanDrown;                                          // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSwimmingDown;                                    // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldPlaySounds;                                  // 0x017A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_AC_Swimming(int32 EntryPoint);
	void Spawn_swimming_ambient_particle();
	void ToggleSurface();
	void ToggleUnderwater();
	void MC_Swim();
	void MC_Surface();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void Spawn_sound(class USoundBase* Sound);
	void EventIsUnderwater(bool IsUnderwater);
	void EventIsInWater(bool IsInWater);
	void Set_Sprint_speed_on_client();
	void Set_Sprint_speed_on_server();
	void Set_normal_swim_speed_on_client();
	void Set_normal_swim_speed_on_server();
	void Event_normal_swim();
	void Event_Sprint_swim();
	void Event_switch_diving_mode();
	void On_Tick_logic___Swimming();
	void On_Begin_Play_Logic___Swimming();
	void Start_underwater_ambient_particle_timer();
	void ReplicateRotationToServer(const struct FRotator& DesiredRotation);
	void unpause_underwater_ambient_particle();
	void pause_underwater_ambient_particle();
	void Destroy_underwater_ambient_particle();
	void SetSmoothCharacterRotationOnStrafeMovement();
	void DiveMovementLogic(float ScaleValue);
	void CustomDiveMovementLogic(float ScaleValue);
	void SwimUpMovementLogic();
	void GetSwimSpeed(float* Speed);
	void GetSwimSprintSpeed(float* Speed);
	void SwimDownMovementLogic();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_Swimming_C">();
	}
	static class UAC_Swimming_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_Swimming_C>();
	}
};
static_assert(alignof(UAC_Swimming_C) == 0x000008, "Wrong alignment on UAC_Swimming_C");
static_assert(sizeof(UAC_Swimming_C) == 0x000180, "Wrong size on UAC_Swimming_C");
static_assert(offsetof(UAC_Swimming_C, UberGraphFrame) == 0x0000B0, "Member 'UAC_Swimming_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Character_Reference) == 0x0000B8, "Member 'UAC_Swimming_C::Character_Reference' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Movement_component_reference) == 0x0000C0, "Member 'UAC_Swimming_C::Movement_component_reference' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Character_Mesh_Reference) == 0x0000C8, "Member 'UAC_Swimming_C::Character_Mesh_Reference' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Is_Overlapping_Physics_Volume) == 0x0000D0, "Member 'UAC_Swimming_C::Is_Overlapping_Physics_Volume' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Is_in_Water) == 0x0000D1, "Member 'UAC_Swimming_C::Is_in_Water' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Is_underwater) == 0x0000D2, "Member 'UAC_Swimming_C::Is_underwater' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Breathing_Point_Reference) == 0x0000D8, "Member 'UAC_Swimming_C::Breathing_Point_Reference' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Is_not_Drowned) == 0x0000E0, "Member 'UAC_Swimming_C::Is_not_Drowned' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Spawned_ambient_underwater_particles) == 0x0000E8, "Member 'UAC_Swimming_C::Spawned_ambient_underwater_particles' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Is_Diving) == 0x0000F8, "Member 'UAC_Swimming_C::Is_Diving' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, From_Rot) == 0x0000FC, "Member 'UAC_Swimming_C::From_Rot' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, To_Rot) == 0x000108, "Member 'UAC_Swimming_C::To_Rot' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Current_Control_Rot) == 0x000114, "Member 'UAC_Swimming_C::Current_Control_Rot' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Is_sprinting_in_water) == 0x000120, "Member 'UAC_Swimming_C::Is_sprinting_in_water' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Is_In_Water_Event) == 0x000128, "Member 'UAC_Swimming_C::Is_In_Water_Event' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Is_Underwater_Event) == 0x000138, "Member 'UAC_Swimming_C::Is_Underwater_Event' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, WaterHeight) == 0x000148, "Member 'UAC_Swimming_C::WaterHeight' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Underwater) == 0x000150, "Member 'UAC_Swimming_C::Underwater' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Lights) == 0x000158, "Member 'UAC_Swimming_C::Lights' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, IsSwimmingUp) == 0x000168, "Member 'UAC_Swimming_C::IsSwimmingUp' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, HasDivingHelmet) == 0x000169, "Member 'UAC_Swimming_C::HasDivingHelmet' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, Water) == 0x000170, "Member 'UAC_Swimming_C::Water' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, CanDrown) == 0x000178, "Member 'UAC_Swimming_C::CanDrown' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, IsSwimmingDown) == 0x000179, "Member 'UAC_Swimming_C::IsSwimmingDown' has a wrong offset!");
static_assert(offsetof(UAC_Swimming_C, ShouldPlaySounds) == 0x00017A, "Member 'UAC_Swimming_C::ShouldPlaySounds' has a wrong offset!");

}

