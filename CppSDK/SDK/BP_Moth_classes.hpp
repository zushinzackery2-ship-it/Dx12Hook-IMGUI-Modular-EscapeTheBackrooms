#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Moth

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Moth.BP_Moth_C
// 0x0100 (0x05C0 - 0x04C0)
class ABP_Moth_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio1;                                            // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 AttachedPlayer;                                    // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EyeSight;                                          // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       KillPlayer;                                        // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ToggleState_Alpha_B3C7BB3D404C6E94D9311B9279D18EDC; // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ToggleState__Direction_B3C7BB3D404C6E94D9311B9279D18EDC; // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ToggleState;                                       // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldMove;                                        // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanAttack;                                         // 0x0511(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StartIdle;                                         // 0x0512(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_513[0xD];                                      // 0x0513(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             IdleTransform;                                     // 0x0520(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsIdle;                                            // 0x0550(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_551[0xF];                                      // 0x0551(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0560(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABPCharacter_Demo_C*                    Attached;                                          // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HiveLocation;                                      // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCarrying;                                        // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldTrigger;                                     // 0x05A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A2[0x6];                                      // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CarryingController;                                // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LargerRadius;                                      // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B1[0x3];                                      // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChaseSpeed;                                        // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Moth(int32 EntryPoint);
	void WarnPlayer();
	void MC_WarnPlayer();
	void ResetAttack();
	void StopCarry();
	void StartCarry();
	void DropPlayer(bool ShouldAttack);
	void ResetBringToHive();
	void BringToHive();
	void ToggleIdle(bool IsIdle_0);
	void BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ResetRetreat();
	void Retreat();
	void MC_AttackAnimation();
	void MC_KillSound();
	void AttackPlayer(class ABPCharacter_Demo_C* Player);
	void StopSound();
	void StartSound();
	void ReceiveBeginPlay();
	void OnCompleted_826A0D8B4B2AF71A79AA649436631992(class FName NotifyName);
	void OnBlendOut_826A0D8B4B2AF71A79AA649436631992(class FName NotifyName);
	void OnInterrupted_826A0D8B4B2AF71A79AA649436631992(class FName NotifyName);
	void OnNotifyBegin_826A0D8B4B2AF71A79AA649436631992(class FName NotifyName);
	void OnNotifyEnd_826A0D8B4B2AF71A79AA649436631992(class FName NotifyName);
	void OnSuccess_80D0F13747A7105F75433DB2011DDF34(EPathFollowingResult MovementResult);
	void OnFail_80D0F13747A7105F75433DB2011DDF34(EPathFollowingResult MovementResult);
	void OnSuccess_01FE13E14A76136BD0F89EBBB3E97A95(EPathFollowingResult MovementResult);
	void OnFail_01FE13E14A76136BD0F89EBBB3E97A95(EPathFollowingResult MovementResult);
	void ToggleState__UpdateFunc();
	void ToggleState__FinishedFunc();
	void LookAtEntity(class ABPCharacter_Demo_C* Target);
	void StopMovement();
	void LookAtTarget(class ABPCharacter_Demo_C* Target);
	void CanSeePlayer(class ABPCharacter_Demo_C* Target, bool* CanSee);
	void OnRep_IsIdle();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Moth_C">();
	}
	static class ABP_Moth_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Moth_C>();
	}
};
static_assert(alignof(ABP_Moth_C) == 0x000010, "Wrong alignment on ABP_Moth_C");
static_assert(sizeof(ABP_Moth_C) == 0x0005C0, "Wrong size on ABP_Moth_C");
static_assert(offsetof(ABP_Moth_C, UberGraphFrame) == 0x0004C0, "Member 'ABP_Moth_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, Audio1) == 0x0004C8, "Member 'ABP_Moth_C::Audio1' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, Scene) == 0x0004D0, "Member 'ABP_Moth_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, Camera) == 0x0004D8, "Member 'ABP_Moth_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, AttachedPlayer) == 0x0004E0, "Member 'ABP_Moth_C::AttachedPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, EyeSight) == 0x0004E8, "Member 'ABP_Moth_C::EyeSight' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, KillPlayer) == 0x0004F0, "Member 'ABP_Moth_C::KillPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, Audio) == 0x0004F8, "Member 'ABP_Moth_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, ToggleState_Alpha_B3C7BB3D404C6E94D9311B9279D18EDC) == 0x000500, "Member 'ABP_Moth_C::ToggleState_Alpha_B3C7BB3D404C6E94D9311B9279D18EDC' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, ToggleState__Direction_B3C7BB3D404C6E94D9311B9279D18EDC) == 0x000504, "Member 'ABP_Moth_C::ToggleState__Direction_B3C7BB3D404C6E94D9311B9279D18EDC' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, ToggleState) == 0x000508, "Member 'ABP_Moth_C::ToggleState' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, ShouldMove) == 0x000510, "Member 'ABP_Moth_C::ShouldMove' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, CanAttack) == 0x000511, "Member 'ABP_Moth_C::CanAttack' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, StartIdle) == 0x000512, "Member 'ABP_Moth_C::StartIdle' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, IdleTransform) == 0x000520, "Member 'ABP_Moth_C::IdleTransform' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, IsIdle) == 0x000550, "Member 'ABP_Moth_C::IsIdle' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, StartTransform) == 0x000560, "Member 'ABP_Moth_C::StartTransform' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, Attached) == 0x000590, "Member 'ABP_Moth_C::Attached' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, HiveLocation) == 0x000598, "Member 'ABP_Moth_C::HiveLocation' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, IsCarrying) == 0x0005A0, "Member 'ABP_Moth_C::IsCarrying' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, ShouldTrigger) == 0x0005A1, "Member 'ABP_Moth_C::ShouldTrigger' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, CarryingController) == 0x0005A8, "Member 'ABP_Moth_C::CarryingController' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, LargerRadius) == 0x0005B0, "Member 'ABP_Moth_C::LargerRadius' has a wrong offset!");
static_assert(offsetof(ABP_Moth_C, ChaseSpeed) == 0x0005B4, "Member 'ABP_Moth_C::ChaseSpeed' has a wrong offset!");

}

