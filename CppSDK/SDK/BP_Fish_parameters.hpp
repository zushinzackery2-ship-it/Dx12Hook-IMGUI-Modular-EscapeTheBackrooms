#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Fish

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Fish.BP_Fish_C.ExecuteUbergraph_BP_Fish
// 0x0140 (0x0140 - 0x0000)
struct BP_Fish_C_ExecuteUbergraph_BP_Fish final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPCharacter_Demo_C*                    K2Node_CustomEvent_Target;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0050(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPCharacter_Demo_C*                    K2Node_CustomEvent_Player;                         // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Delay;                          // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPCharacter_Demo_C*                    K2Node_CustomEvent_Player_1;                       // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Fish_C_ExecuteUbergraph_BP_Fish) == 0x000008, "Wrong alignment on BP_Fish_C_ExecuteUbergraph_BP_Fish");
static_assert(sizeof(BP_Fish_C_ExecuteUbergraph_BP_Fish) == 0x000140, "Wrong size on BP_Fish_C_ExecuteUbergraph_BP_Fish");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, EntryPoint) == 0x000000, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000004, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, CallFunc_GetForwardVector_ReturnValue) == 0x000010, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_CustomEvent_Target) == 0x000020, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_CustomEvent_Target' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, CallFunc_IsLocallyControlled_ReturnValue) == 0x000028, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000030, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000038, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000040, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000048, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_ComponentBoundEvent_bFromSweep) == 0x00004C, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_ComponentBoundEvent_SweepResult) == 0x000050, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0000D8, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_ComponentBoundEvent_OtherActor) == 0x0000E0, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_ComponentBoundEvent_OtherComp) == 0x0000E8, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0000F0, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_CustomEvent_Player) == 0x0000F8, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, CallFunc_IsValid_ReturnValue) == 0x000100, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, CallFunc_IsPlaying_ReturnValue) == 0x000101, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_CustomEvent_Delay) == 0x000104, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_CustomEvent_Delay' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, CallFunc_HasAuthority_ReturnValue) == 0x000108, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00010C, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000118, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_Event_DeltaSeconds) == 0x000124, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, CallFunc_FindLookAtRotation_ReturnValue) == 0x000128, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000134, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_ExecuteUbergraph_BP_Fish, K2Node_CustomEvent_Player_1) == 0x000138, "Member 'BP_Fish_C_ExecuteUbergraph_BP_Fish::K2Node_CustomEvent_Player_1' has a wrong offset!");

// Function BP_Fish.BP_Fish_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Fish_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Fish_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Fish_C_ReceiveTick");
static_assert(sizeof(BP_Fish_C_ReceiveTick) == 0x000004, "Wrong size on BP_Fish_C_ReceiveTick");
static_assert(offsetof(BP_Fish_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Fish_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Fish.BP_Fish_C.MC_Stop
// 0x0004 (0x0004 - 0x0000)
struct BP_Fish_C_MC_Stop final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Fish_C_MC_Stop) == 0x000004, "Wrong alignment on BP_Fish_C_MC_Stop");
static_assert(sizeof(BP_Fish_C_MC_Stop) == 0x000004, "Wrong size on BP_Fish_C_MC_Stop");
static_assert(offsetof(BP_Fish_C_MC_Stop, Delay) == 0x000000, "Member 'BP_Fish_C_MC_Stop::Delay' has a wrong offset!");

// Function BP_Fish.BP_Fish_C.AttackPlayer
// 0x0008 (0x0008 - 0x0000)
struct BP_Fish_C_AttackPlayer final
{
public:
	class ABPCharacter_Demo_C*                    Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Fish_C_AttackPlayer) == 0x000008, "Wrong alignment on BP_Fish_C_AttackPlayer");
static_assert(sizeof(BP_Fish_C_AttackPlayer) == 0x000008, "Wrong size on BP_Fish_C_AttackPlayer");
static_assert(offsetof(BP_Fish_C_AttackPlayer, Player) == 0x000000, "Member 'BP_Fish_C_AttackPlayer::Player' has a wrong offset!");

// Function BP_Fish.BP_Fish_C.BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_Fish.BP_Fish_C.BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Fish_C_BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Fish.BP_Fish_C.MC_KillAnimation
// 0x0008 (0x0008 - 0x0000)
struct BP_Fish_C_MC_KillAnimation final
{
public:
	class ABPCharacter_Demo_C*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Fish_C_MC_KillAnimation) == 0x000008, "Wrong alignment on BP_Fish_C_MC_KillAnimation");
static_assert(sizeof(BP_Fish_C_MC_KillAnimation) == 0x000008, "Wrong size on BP_Fish_C_MC_KillAnimation");
static_assert(offsetof(BP_Fish_C_MC_KillAnimation, Target) == 0x000000, "Member 'BP_Fish_C_MC_KillAnimation::Target' has a wrong offset!");

// Function BP_Fish.BP_Fish_C.Jumpscare
// 0x0008 (0x0008 - 0x0000)
struct BP_Fish_C_Jumpscare final
{
public:
	class ABPCharacter_Demo_C*                    Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Fish_C_Jumpscare) == 0x000008, "Wrong alignment on BP_Fish_C_Jumpscare");
static_assert(sizeof(BP_Fish_C_Jumpscare) == 0x000008, "Wrong size on BP_Fish_C_Jumpscare");
static_assert(offsetof(BP_Fish_C_Jumpscare, Player) == 0x000000, "Member 'BP_Fish_C_Jumpscare::Player' has a wrong offset!");

// Function BP_Fish.BP_Fish_C.LookAtEntity
// 0x0048 (0x0048 - 0x0000)
struct BP_Fish_C_LookAtEntity final
{
public:
	class ABPCharacter_Demo_C*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Fish_C_LookAtEntity) == 0x000008, "Wrong alignment on BP_Fish_C_LookAtEntity");
static_assert(sizeof(BP_Fish_C_LookAtEntity) == 0x000048, "Wrong size on BP_Fish_C_LookAtEntity");
static_assert(offsetof(BP_Fish_C_LookAtEntity, Target) == 0x000000, "Member 'BP_Fish_C_LookAtEntity::Target' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_LookAtEntity, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_Fish_C_LookAtEntity::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_LookAtEntity, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000014, "Member 'BP_Fish_C_LookAtEntity::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_LookAtEntity, CallFunc_FindLookAtRotation_ReturnValue) == 0x000020, "Member 'BP_Fish_C_LookAtEntity::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_LookAtEntity, CallFunc_BreakRotator_Roll) == 0x00002C, "Member 'BP_Fish_C_LookAtEntity::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_LookAtEntity, CallFunc_BreakRotator_Pitch) == 0x000030, "Member 'BP_Fish_C_LookAtEntity::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_LookAtEntity, CallFunc_BreakRotator_Yaw) == 0x000034, "Member 'BP_Fish_C_LookAtEntity::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_LookAtEntity, CallFunc_MakeRotator_ReturnValue) == 0x000038, "Member 'BP_Fish_C_LookAtEntity::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_LookAtEntity, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000044, "Member 'BP_Fish_C_LookAtEntity::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function BP_Fish.BP_Fish_C.OnRep_IsTargetting
// 0x0128 (0x0128 - 0x0000)
struct BP_Fish_C_OnRep_IsTargetting final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0018(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x00A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Fish_C_OnRep_IsTargetting) == 0x000004, "Wrong alignment on BP_Fish_C_OnRep_IsTargetting");
static_assert(sizeof(BP_Fish_C_OnRep_IsTargetting) == 0x000128, "Wrong size on BP_Fish_C_OnRep_IsTargetting");
static_assert(offsetof(BP_Fish_C_OnRep_IsTargetting, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'BP_Fish_C_OnRep_IsTargetting::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_OnRep_IsTargetting, CallFunc_MakeVector_ReturnValue_1) == 0x00000C, "Member 'BP_Fish_C_OnRep_IsTargetting::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_OnRep_IsTargetting, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000018, "Member 'BP_Fish_C_OnRep_IsTargetting::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_OnRep_IsTargetting, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0000A0, "Member 'BP_Fish_C_OnRep_IsTargetting::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");

// Function BP_Fish.BP_Fish_C.CanSeePlayer
// 0x0158 (0x0158 - 0x0000)
struct BP_Fish_C_CanSeePlayer final
{
public:
	class ABPCharacter_Demo_C*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSee;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABPCharacter_Demo_C*>            CallFunc_GetAllActorsOfClass_OutActors;            // 0x0028(0x0010)(ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0038(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Fish_C_CanSeePlayer) == 0x000008, "Wrong alignment on BP_Fish_C_CanSeePlayer");
static_assert(sizeof(BP_Fish_C_CanSeePlayer) == 0x000158, "Wrong size on BP_Fish_C_CanSeePlayer");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, Target) == 0x000000, "Member 'BP_Fish_C_CanSeePlayer::Target' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CanSee) == 0x000008, "Member 'BP_Fish_C_CanSeePlayer::CanSee' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_GetAllActorsOfClass_OutActors) == 0x000028, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_LineTraceSingle_OutHit) == 0x000038, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_LineTraceSingle_ReturnValue) == 0x0000C0, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_bBlockingHit) == 0x0000C1, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000C2, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_Time) == 0x0000C4, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_Distance) == 0x0000C8, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_Location) == 0x0000CC, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D8, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_Normal) == 0x0000E4, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_ImpactNormal) == 0x0000F0, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_PhysMat) == 0x000100, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_HitActor) == 0x000108, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_HitComponent) == 0x000110, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_HitBoneName) == 0x000118, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_HitItem) == 0x000120, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_ElementIndex) == 0x000124, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_FaceIndex) == 0x000128, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_TraceStart) == 0x00012C, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_BreakHitResult_TraceEnd) == 0x000138, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x000144, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Fish_C_CanSeePlayer, CallFunc_GetDisplayName_ReturnValue) == 0x000148, "Member 'BP_Fish_C_CanSeePlayer::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");

}

