#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Underwater

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Underwater.BP_Underwater_C
// 0x0230 (0x0450 - 0x0220)
class ABP_Underwater_C final : public AActor
{
public:
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_OceanSurface;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      P_Dirt;                                            // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Sunlight_Bounced;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Dirt_Visibility;                                   // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0xF];                                      // 0x0251(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _Water_Transform;                                  // 0x0260(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          Water_Visibility;                                  // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Color_Grading_LUT_Intensity;                       // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Color_Grading_LUT;                                 // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FColorGradePerRangeSettings            Color_Grade_Settings;                              // 0x02B0(0x0050)(Edit, BlueprintVisible, NoDestructor)
	struct FWeightedBlendables                    Post_Process_Materials;                            // 0x0300(0x0010)(Edit, BlueprintVisible)
	float                                         Exposure;                                          // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Vignette_Intensity;                                // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Chromatic_Intensity;                               // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp;                                              // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tint;                                              // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Water_Blur;                                        // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Godrays_Emissive;                                  // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GodRays_Distance;                                  // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Godrays_Albedo;                                    // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GodRays_Scale;                                     // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GodRays_Distribution_;                             // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GodRays;                                           // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Fog_Dinesity;                                      // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Top_surface_Color;                                 // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Colors;                                        // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_opacity;                                       // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Top_Surface_Scattering;                            // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Distance;                                      // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Light_Function_Scale;                              // 0x037C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Light_Function_Material;                           // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         volumetric_Light_;                                 // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          volumetric_Shadow;                                 // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunLight_Soft_Shadow;                              // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunLight_Bounced_Intensity;                        // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunLight_Bounced_Color;                            // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunLight_Intensity;                                // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunLight_Color;                                    // 0x03B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0xC];                                      // 0x03C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SunLight_Bounced_Transform;                        // 0x03D0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             SunLight_Transform;                                // 0x0400(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FLinearColor                           HDRI_Tint_Color;                                   // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HDRI_Intensity;                                    // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           _Cubemap;                                          // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Underwater_C">();
	}
	static class ABP_Underwater_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Underwater_C>();
	}
};
static_assert(alignof(ABP_Underwater_C) == 0x000010, "Wrong alignment on ABP_Underwater_C");
static_assert(sizeof(ABP_Underwater_C) == 0x000450, "Wrong size on ABP_Underwater_C");
static_assert(offsetof(ABP_Underwater_C, ExponentialHeightFog) == 0x000220, "Member 'ABP_Underwater_C::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, SM_OceanSurface) == 0x000228, "Member 'ABP_Underwater_C::SM_OceanSurface' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, P_Dirt) == 0x000230, "Member 'ABP_Underwater_C::P_Dirt' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Sunlight_Bounced) == 0x000238, "Member 'ABP_Underwater_C::Sunlight_Bounced' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, DirectionalLight) == 0x000240, "Member 'ABP_Underwater_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, PostProcess) == 0x000248, "Member 'ABP_Underwater_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Dirt_Visibility) == 0x000250, "Member 'ABP_Underwater_C::Dirt_Visibility' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, _Water_Transform) == 0x000260, "Member 'ABP_Underwater_C::_Water_Transform' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Water_Visibility) == 0x000290, "Member 'ABP_Underwater_C::Water_Visibility' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Material) == 0x000298, "Member 'ABP_Underwater_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Color_Grading_LUT_Intensity) == 0x0002A0, "Member 'ABP_Underwater_C::Color_Grading_LUT_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Color_Grading_LUT) == 0x0002A8, "Member 'ABP_Underwater_C::Color_Grading_LUT' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Color_Grade_Settings) == 0x0002B0, "Member 'ABP_Underwater_C::Color_Grade_Settings' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Post_Process_Materials) == 0x000300, "Member 'ABP_Underwater_C::Post_Process_Materials' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Exposure) == 0x000310, "Member 'ABP_Underwater_C::Exposure' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Vignette_Intensity) == 0x000314, "Member 'ABP_Underwater_C::Vignette_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Chromatic_Intensity) == 0x000318, "Member 'ABP_Underwater_C::Chromatic_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Temp) == 0x00031C, "Member 'ABP_Underwater_C::Temp' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Tint) == 0x000320, "Member 'ABP_Underwater_C::Tint' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Water_Blur) == 0x000324, "Member 'ABP_Underwater_C::Water_Blur' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Godrays_Emissive) == 0x000328, "Member 'ABP_Underwater_C::Godrays_Emissive' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, GodRays_Distance) == 0x000338, "Member 'ABP_Underwater_C::GodRays_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Godrays_Albedo) == 0x00033C, "Member 'ABP_Underwater_C::Godrays_Albedo' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, GodRays_Scale) == 0x000340, "Member 'ABP_Underwater_C::GodRays_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, GodRays_Distribution_) == 0x000344, "Member 'ABP_Underwater_C::GodRays_Distribution_' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, GodRays) == 0x000348, "Member 'ABP_Underwater_C::GodRays' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Fog_Dinesity) == 0x00034C, "Member 'ABP_Underwater_C::Fog_Dinesity' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Top_surface_Color) == 0x000350, "Member 'ABP_Underwater_C::Top_surface_Color' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Fog_Colors) == 0x000360, "Member 'ABP_Underwater_C::Fog_Colors' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Fog_opacity) == 0x000370, "Member 'ABP_Underwater_C::Fog_opacity' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Top_Surface_Scattering) == 0x000374, "Member 'ABP_Underwater_C::Top_Surface_Scattering' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Fog_Distance) == 0x000378, "Member 'ABP_Underwater_C::Fog_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Light_Function_Scale) == 0x00037C, "Member 'ABP_Underwater_C::Light_Function_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, Light_Function_Material) == 0x000388, "Member 'ABP_Underwater_C::Light_Function_Material' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, volumetric_Light_) == 0x000390, "Member 'ABP_Underwater_C::volumetric_Light_' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, volumetric_Shadow) == 0x000394, "Member 'ABP_Underwater_C::volumetric_Shadow' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, SunLight_Soft_Shadow) == 0x000398, "Member 'ABP_Underwater_C::SunLight_Soft_Shadow' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, SunLight_Bounced_Intensity) == 0x00039C, "Member 'ABP_Underwater_C::SunLight_Bounced_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, SunLight_Bounced_Color) == 0x0003A0, "Member 'ABP_Underwater_C::SunLight_Bounced_Color' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, SunLight_Intensity) == 0x0003B0, "Member 'ABP_Underwater_C::SunLight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, SunLight_Color) == 0x0003B4, "Member 'ABP_Underwater_C::SunLight_Color' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, SunLight_Bounced_Transform) == 0x0003D0, "Member 'ABP_Underwater_C::SunLight_Bounced_Transform' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, SunLight_Transform) == 0x000400, "Member 'ABP_Underwater_C::SunLight_Transform' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, HDRI_Tint_Color) == 0x000430, "Member 'ABP_Underwater_C::HDRI_Tint_Color' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, HDRI_Intensity) == 0x000440, "Member 'ABP_Underwater_C::HDRI_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Underwater_C, _Cubemap) == 0x000448, "Member 'ABP_Underwater_C::_Cubemap' has a wrong offset!");

}

