#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Map_Selection

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_Map_Selection.W_Map_Selection_C.ExecuteUbergraph_W_Map_Selection
// 0x0038 (0x0038 - 0x0000)
struct W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Level_Name_ReturnValue;               // 0x0020(0x0018)()
};
static_assert(alignof(W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection) == 0x000008, "Wrong alignment on W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection");
static_assert(sizeof(W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection) == 0x000038, "Wrong size on W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection");
static_assert(offsetof(W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection, EntryPoint) == 0x000000, "Member 'W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection, CallFunc_Conv_TextToString_ReturnValue) == 0x000008, "Member 'W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000018, "Member 'W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection, CallFunc_Get_Level_Name_ReturnValue) == 0x000020, "Member 'W_Map_Selection_C_ExecuteUbergraph_W_Map_Selection::CallFunc_Get_Level_Name_ReturnValue' has a wrong offset!");

// Function W_Map_Selection.W_Map_Selection_C.GetTime
// 0x00A8 (0x00A8 - 0x0000)
struct W_Map_Selection_C_GetTime final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class FString                                 CallFunc_RoundedTime_Time;                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS;                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetSubstring_ReturnValue;                 // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0090(0x0018)()
};
static_assert(alignof(W_Map_Selection_C_GetTime) == 0x000008, "Wrong alignment on W_Map_Selection_C_GetTime");
static_assert(sizeof(W_Map_Selection_C_GetTime) == 0x0000A8, "Wrong size on W_Map_Selection_C_GetTime");
static_assert(offsetof(W_Map_Selection_C_GetTime, ReturnValue) == 0x000000, "Member 'W_Map_Selection_C_GetTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetTime, CallFunc_RoundedTime_Time) == 0x000018, "Member 'W_Map_Selection_C_GetTime::CallFunc_RoundedTime_Time' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetTime, CallFunc_Split_LeftS) == 0x000028, "Member 'W_Map_Selection_C_GetTime::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetTime, CallFunc_Split_RightS) == 0x000038, "Member 'W_Map_Selection_C_GetTime::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetTime, CallFunc_Split_ReturnValue) == 0x000048, "Member 'W_Map_Selection_C_GetTime::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetTime, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'W_Map_Selection_C_GetTime::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetTime, CallFunc_GetSubstring_ReturnValue) == 0x000060, "Member 'W_Map_Selection_C_GetTime::CallFunc_GetSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetTime, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000070, "Member 'W_Map_Selection_C_GetTime::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetTime, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000080, "Member 'W_Map_Selection_C_GetTime::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetTime, CallFunc_Conv_StringToText_ReturnValue) == 0x000090, "Member 'W_Map_Selection_C_GetTime::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function W_Map_Selection.W_Map_Selection_C.GetImage
// 0x01E8 (0x01E8 - 0x0000)
struct W_Map_Selection_C_GetImage final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0098(0x0028)()
	int32                                         CallFunc_Blueprint_GetSizeX_ReturnValue;           // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Blueprint_GetSizeY_ReturnValue;           // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x00D8(0x0088)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_1;                    // 0x0160(0x0088)()
};
static_assert(alignof(W_Map_Selection_C_GetImage) == 0x000008, "Wrong alignment on W_Map_Selection_C_GetImage");
static_assert(sizeof(W_Map_Selection_C_GetImage) == 0x0001E8, "Wrong size on W_Map_Selection_C_GetImage");
static_assert(offsetof(W_Map_Selection_C_GetImage, ReturnValue) == 0x000000, "Member 'W_Map_Selection_C_GetImage::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImage, K2Node_MakeStruct_LinearColor) == 0x000088, "Member 'W_Map_Selection_C_GetImage::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImage, K2Node_MakeStruct_SlateColor) == 0x000098, "Member 'W_Map_Selection_C_GetImage::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImage, CallFunc_Blueprint_GetSizeX_ReturnValue) == 0x0000C0, "Member 'W_Map_Selection_C_GetImage::CallFunc_Blueprint_GetSizeX_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImage, CallFunc_Blueprint_GetSizeY_ReturnValue) == 0x0000C4, "Member 'W_Map_Selection_C_GetImage::CallFunc_Blueprint_GetSizeY_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImage, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000C8, "Member 'W_Map_Selection_C_GetImage::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImage, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0000CC, "Member 'W_Map_Selection_C_GetImage::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImage, CallFunc_MakeVector2D_ReturnValue) == 0x0000D0, "Member 'W_Map_Selection_C_GetImage::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImage, K2Node_MakeStruct_SlateBrush) == 0x0000D8, "Member 'W_Map_Selection_C_GetImage::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImage, K2Node_MakeStruct_SlateBrush_1) == 0x000160, "Member 'W_Map_Selection_C_GetImage::K2Node_MakeStruct_SlateBrush_1' has a wrong offset!");

// Function W_Map_Selection.W_Map_Selection_C.GetLockVisibility
// 0x0001 (0x0001 - 0x0000)
struct W_Map_Selection_C_GetLockVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Map_Selection_C_GetLockVisibility) == 0x000001, "Wrong alignment on W_Map_Selection_C_GetLockVisibility");
static_assert(sizeof(W_Map_Selection_C_GetLockVisibility) == 0x000001, "Wrong size on W_Map_Selection_C_GetLockVisibility");
static_assert(offsetof(W_Map_Selection_C_GetLockVisibility, ReturnValue) == 0x000000, "Member 'W_Map_Selection_C_GetLockVisibility::ReturnValue' has a wrong offset!");

// Function W_Map_Selection.W_Map_Selection_C.Is Time Visible
// 0x0002 (0x0002 - 0x0000)
struct W_Map_Selection_C_Is_Time_Visible final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_Map_Selection_C_Is_Time_Visible) == 0x000001, "Wrong alignment on W_Map_Selection_C_Is_Time_Visible");
static_assert(sizeof(W_Map_Selection_C_Is_Time_Visible) == 0x000002, "Wrong size on W_Map_Selection_C_Is_Time_Visible");
static_assert(offsetof(W_Map_Selection_C_Is_Time_Visible, ReturnValue) == 0x000000, "Member 'W_Map_Selection_C_Is_Time_Visible::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Is_Time_Visible, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000001, "Member 'W_Map_Selection_C_Is_Time_Visible::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_Map_Selection.W_Map_Selection_C.RoundedTime
// 0x0030 (0x0030 - 0x0000)
struct W_Map_Selection_C_RoundedTime final
{
public:
	class FString                                 Time_0;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Map_Selection_C_RoundedTime) == 0x000008, "Wrong alignment on W_Map_Selection_C_RoundedTime");
static_assert(sizeof(W_Map_Selection_C_RoundedTime) == 0x000030, "Wrong size on W_Map_Selection_C_RoundedTime");
static_assert(offsetof(W_Map_Selection_C_RoundedTime, Time_0) == 0x000000, "Member 'W_Map_Selection_C_RoundedTime::Time_0' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_RoundedTime, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'W_Map_Selection_C_RoundedTime::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_RoundedTime, CallFunc_Round_ReturnValue) == 0x000014, "Member 'W_Map_Selection_C_RoundedTime::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_RoundedTime, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000018, "Member 'W_Map_Selection_C_RoundedTime::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_RoundedTime, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'W_Map_Selection_C_RoundedTime::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_RoundedTime, CallFunc_Conv_FloatToString_ReturnValue) == 0x000020, "Member 'W_Map_Selection_C_RoundedTime::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");

// Function W_Map_Selection.W_Map_Selection_C.GetRoundedTime
// 0x0014 (0x0014 - 0x0000)
struct W_Map_Selection_C_GetRoundedTime final
{
public:
	float                                         Rounded;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Map_Selection_C_GetRoundedTime) == 0x000004, "Wrong alignment on W_Map_Selection_C_GetRoundedTime");
static_assert(sizeof(W_Map_Selection_C_GetRoundedTime) == 0x000014, "Wrong size on W_Map_Selection_C_GetRoundedTime");
static_assert(offsetof(W_Map_Selection_C_GetRoundedTime, Rounded) == 0x000000, "Member 'W_Map_Selection_C_GetRoundedTime::Rounded' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetRoundedTime, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000004, "Member 'W_Map_Selection_C_GetRoundedTime::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetRoundedTime, CallFunc_Round_ReturnValue) == 0x000008, "Member 'W_Map_Selection_C_GetRoundedTime::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetRoundedTime, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'W_Map_Selection_C_GetRoundedTime::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetRoundedTime, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'W_Map_Selection_C_GetRoundedTime::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_Map_Selection.W_Map_Selection_C.GetImageSize
// 0x0028 (0x0028 - 0x0000)
struct W_Map_Selection_C_GetImageSize final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Blueprint_GetSizeX_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Blueprint_GetSizeY_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Map_Selection_C_GetImageSize) == 0x000004, "Wrong alignment on W_Map_Selection_C_GetImageSize");
static_assert(sizeof(W_Map_Selection_C_GetImageSize) == 0x000028, "Wrong size on W_Map_Selection_C_GetImageSize");
static_assert(offsetof(W_Map_Selection_C_GetImageSize, Size) == 0x000000, "Member 'W_Map_Selection_C_GetImageSize::Size' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImageSize, CallFunc_Blueprint_GetSizeX_ReturnValue) == 0x000008, "Member 'W_Map_Selection_C_GetImageSize::CallFunc_Blueprint_GetSizeX_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImageSize, CallFunc_Blueprint_GetSizeY_ReturnValue) == 0x00000C, "Member 'W_Map_Selection_C_GetImageSize::CallFunc_Blueprint_GetSizeY_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImageSize, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'W_Map_Selection_C_GetImageSize::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImageSize, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000014, "Member 'W_Map_Selection_C_GetImageSize::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImageSize, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'W_Map_Selection_C_GetImageSize::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImageSize, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'W_Map_Selection_C_GetImageSize::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_GetImageSize, CallFunc_MakeVector2D_ReturnValue) == 0x000020, "Member 'W_Map_Selection_C_GetImageSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function W_Map_Selection.W_Map_Selection_C.Get Level Name
// 0x0040 (0x0040 - 0x0000)
struct W_Map_Selection_C_Get_Level_Name final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class FString                                 CallFunc_Generate_Encrypted_Name_Name;             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0028(0x0018)()
};
static_assert(alignof(W_Map_Selection_C_Get_Level_Name) == 0x000008, "Wrong alignment on W_Map_Selection_C_Get_Level_Name");
static_assert(sizeof(W_Map_Selection_C_Get_Level_Name) == 0x000040, "Wrong size on W_Map_Selection_C_Get_Level_Name");
static_assert(offsetof(W_Map_Selection_C_Get_Level_Name, ReturnValue) == 0x000000, "Member 'W_Map_Selection_C_Get_Level_Name::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Get_Level_Name, CallFunc_Generate_Encrypted_Name_Name) == 0x000018, "Member 'W_Map_Selection_C_Get_Level_Name::CallFunc_Generate_Encrypted_Name_Name' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Get_Level_Name, CallFunc_Conv_StringToText_ReturnValue) == 0x000028, "Member 'W_Map_Selection_C_Get_Level_Name::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function W_Map_Selection.W_Map_Selection_C.Generate Encrypted Name
// 0x00E0 (0x00E0 - 0x0000)
struct W_Map_Selection_C_Generate_Encrypted_Name final
{
public:
	class FText                                   Level;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 EncryptedName;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         CharacterSet;                                      // 0x0038(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         CallFunc_GetCharacterArrayFromString_ReturnValue;  // 0x0060(0x0010)(ReferenceParm)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x0098(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Map_Selection_C_Generate_Encrypted_Name) == 0x000008, "Wrong alignment on W_Map_Selection_C_Generate_Encrypted_Name");
static_assert(sizeof(W_Map_Selection_C_Generate_Encrypted_Name) == 0x0000E0, "Wrong size on W_Map_Selection_C_Generate_Encrypted_Name");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, Level) == 0x000000, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::Level' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, Name_0) == 0x000018, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::Name_0' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, EncryptedName) == 0x000028, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::EncryptedName' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CharacterSet) == 0x000038, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CharacterSet' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, Temp_int_Variable) == 0x000048, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_Conv_TextToString_ReturnValue) == 0x000050, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_GetCharacterArrayFromString_ReturnValue) == 0x000060, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_GetCharacterArrayFromString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_Len_ReturnValue) == 0x000070, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_Array_Get_Item) == 0x000078, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_Subtract_IntInt_ReturnValue) == 0x000088, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x00008C, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00008D, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_Add_IntInt_ReturnValue) == 0x000090, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, K2Node_MakeArray_Array) == 0x000098, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_Concat_StrStr_ReturnValue) == 0x0000A8, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_RandomInteger_ReturnValue) == 0x0000B8, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_Array_Get_Item_1) == 0x0000C0, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_Map_Selection_C_Generate_Encrypted_Name, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000D0, "Member 'W_Map_Selection_C_Generate_Encrypted_Name::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

}

