#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Ocean_Manager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Ocean_Manager.BP_Ocean_Manager_C
// 0x0098 (0x02B8 - 0x0220)
class ABP_Ocean_Manager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ToggleWaves_Alpha2_B7D3808C4A2D1DC6DE8224867DB25EFF; // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ToggleWaves_Alpha_B7D3808C4A2D1DC6DE8224867DB25EFF; // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ToggleWaves__Direction_B7D3808C4A2D1DC6DE8224867DB25EFF; // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ToggleWaves;                                       // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEight_FFT_H_Ocean_Sim_C*               Ocean;                                             // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExponentialHeightFog*                  Fog;                                               // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetAmplitude;                                   // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetHeight;                                      // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetSpeed;                                       // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetChoppyness;                                  // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetWind;                                        // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingAmplitude;                                 // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingHeight;                                    // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingSpeed;                                     // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingChoppyness;                                // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingWind;                                      // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingTile;                                      // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetFog;                                         // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_RowBoat_C*>                  Boats;                                             // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	float                                         StartingFog;                                       // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldSpawn;                                       // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABPCharacter_Demo_C*                    CurrentTarget;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Storm_Volume_C*                     StormZone;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Ocean_Manager(int32 EntryPoint);
	void StopSpawnTimer();
	void StartSpawnTimer();
	void FindTarget();
	void UpdateWaterSettings();
	void StopRisingWaves();
	void StartRisingWaves();
	void ReceiveBeginPlay();
	void ToggleWaves__UpdateBuoyancy__EventFunc();
	void ToggleWaves__UpdateDrowning__EventFunc();
	void ToggleWaves__UpdateFunc();
	void ToggleWaves__FinishedFunc();
	void UpdateBuoyancy(bool Rising);
	void UpdateDrowning(bool Rising);
	void Find_Target_Player(class ABPCharacter_Demo_C** TargetPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Ocean_Manager_C">();
	}
	static class ABP_Ocean_Manager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Ocean_Manager_C>();
	}
};
static_assert(alignof(ABP_Ocean_Manager_C) == 0x000008, "Wrong alignment on ABP_Ocean_Manager_C");
static_assert(sizeof(ABP_Ocean_Manager_C) == 0x0002B8, "Wrong size on ABP_Ocean_Manager_C");
static_assert(offsetof(ABP_Ocean_Manager_C, UberGraphFrame) == 0x000220, "Member 'ABP_Ocean_Manager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_Ocean_Manager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, ToggleWaves_Alpha2_B7D3808C4A2D1DC6DE8224867DB25EFF) == 0x000230, "Member 'ABP_Ocean_Manager_C::ToggleWaves_Alpha2_B7D3808C4A2D1DC6DE8224867DB25EFF' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, ToggleWaves_Alpha_B7D3808C4A2D1DC6DE8224867DB25EFF) == 0x000234, "Member 'ABP_Ocean_Manager_C::ToggleWaves_Alpha_B7D3808C4A2D1DC6DE8224867DB25EFF' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, ToggleWaves__Direction_B7D3808C4A2D1DC6DE8224867DB25EFF) == 0x000238, "Member 'ABP_Ocean_Manager_C::ToggleWaves__Direction_B7D3808C4A2D1DC6DE8224867DB25EFF' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, ToggleWaves) == 0x000240, "Member 'ABP_Ocean_Manager_C::ToggleWaves' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, Ocean) == 0x000248, "Member 'ABP_Ocean_Manager_C::Ocean' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, Fog) == 0x000250, "Member 'ABP_Ocean_Manager_C::Fog' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, TargetAmplitude) == 0x000258, "Member 'ABP_Ocean_Manager_C::TargetAmplitude' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, TargetHeight) == 0x00025C, "Member 'ABP_Ocean_Manager_C::TargetHeight' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, TargetSpeed) == 0x000260, "Member 'ABP_Ocean_Manager_C::TargetSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, TargetChoppyness) == 0x000264, "Member 'ABP_Ocean_Manager_C::TargetChoppyness' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, TargetWind) == 0x000268, "Member 'ABP_Ocean_Manager_C::TargetWind' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, StartingAmplitude) == 0x00026C, "Member 'ABP_Ocean_Manager_C::StartingAmplitude' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, StartingHeight) == 0x000270, "Member 'ABP_Ocean_Manager_C::StartingHeight' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, StartingSpeed) == 0x000274, "Member 'ABP_Ocean_Manager_C::StartingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, StartingChoppyness) == 0x000278, "Member 'ABP_Ocean_Manager_C::StartingChoppyness' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, StartingWind) == 0x00027C, "Member 'ABP_Ocean_Manager_C::StartingWind' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, StartingTile) == 0x000280, "Member 'ABP_Ocean_Manager_C::StartingTile' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, TargetFog) == 0x000284, "Member 'ABP_Ocean_Manager_C::TargetFog' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, Boats) == 0x000288, "Member 'ABP_Ocean_Manager_C::Boats' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, StartingFog) == 0x000298, "Member 'ABP_Ocean_Manager_C::StartingFog' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, ShouldSpawn) == 0x00029C, "Member 'ABP_Ocean_Manager_C::ShouldSpawn' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, TimerHandle) == 0x0002A0, "Member 'ABP_Ocean_Manager_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, CurrentTarget) == 0x0002A8, "Member 'ABP_Ocean_Manager_C::CurrentTarget' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Manager_C, StormZone) == 0x0002B0, "Member 'ABP_Ocean_Manager_C::StormZone' has a wrong offset!");

}

