#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleScatterPlugin

#include "Basic.hpp"

#include "SimpleScatterPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SimpleScatterPlugin.SimpleScatter
// 0x0168 (0x0388 - 0x0220)
class ASimpleScatter final : public AActor
{
public:
	uint8                                         Pad_220[0x70];                                     // 0x0220(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnabled;                                          // 0x0290(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomSeed;                                        // 0x0294(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FInstancedMesh>                 InstancedMeshes;                                   // 0x0298(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FScatterSurface>                ScatterSurfaces;                                   // 0x02A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	EDistributionMode                             DistributionMode;                                  // 0x02B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstanceSpacing;                                   // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              GridScale;                                         // 0x02C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlopeDistributionLimit                SlopeDistributionLimit;                            // 0x02C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FHeightDistributionLimit               HeightDistributionLimit;                           // 0x02D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	TArray<class ASimpleScatterSplineActor*>      SplineActors;                                      // 0x02E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         ExcludeMeshes;                                     // 0x02F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FVector                                MoveMin;                                           // 0x0308(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                MoveMax;                                           // 0x0314(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MoveZ_BySurface;                                   // 0x0320(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               RotateMin;                                         // 0x0324(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FRotator                               RotateMax;                                         // 0x0330(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         AlignToSurface;                                    // 0x033C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESurfaceAlignMode                             AlignMode;                                         // 0x0340(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ScaleMin;                                          // 0x0344(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                ScaleMax;                                          // 0x0350(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EScaleMode                                    ScaleMode;                                         // 0x035C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35D[0x3];                                      // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaterialScaleEffect;                               // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlopeScaleFalloff                     SlopeScaleFalloff;                                 // 0x0364(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	int32                                         MinCullDistance;                                   // 0x0374(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxCullDistance;                                   // 0x0378(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxInstancesLimit;                                 // 0x037C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DistributionMaterialResolution;                    // 0x0380(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowDebugMessages;                                // 0x0384(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ManualRefresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleScatter">();
	}
	static class ASimpleScatter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASimpleScatter>();
	}
};
static_assert(alignof(ASimpleScatter) == 0x000008, "Wrong alignment on ASimpleScatter");
static_assert(sizeof(ASimpleScatter) == 0x000388, "Wrong size on ASimpleScatter");
static_assert(offsetof(ASimpleScatter, bEnabled) == 0x000290, "Member 'ASimpleScatter::bEnabled' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, RandomSeed) == 0x000294, "Member 'ASimpleScatter::RandomSeed' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, InstancedMeshes) == 0x000298, "Member 'ASimpleScatter::InstancedMeshes' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, ScatterSurfaces) == 0x0002A8, "Member 'ASimpleScatter::ScatterSurfaces' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, DistributionMode) == 0x0002B8, "Member 'ASimpleScatter::DistributionMode' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, InstanceSpacing) == 0x0002BC, "Member 'ASimpleScatter::InstanceSpacing' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, GridScale) == 0x0002C0, "Member 'ASimpleScatter::GridScale' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, SlopeDistributionLimit) == 0x0002C8, "Member 'ASimpleScatter::SlopeDistributionLimit' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, HeightDistributionLimit) == 0x0002D8, "Member 'ASimpleScatter::HeightDistributionLimit' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, SplineActors) == 0x0002E8, "Member 'ASimpleScatter::SplineActors' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, ExcludeMeshes) == 0x0002F8, "Member 'ASimpleScatter::ExcludeMeshes' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, MoveMin) == 0x000308, "Member 'ASimpleScatter::MoveMin' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, MoveMax) == 0x000314, "Member 'ASimpleScatter::MoveMax' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, MoveZ_BySurface) == 0x000320, "Member 'ASimpleScatter::MoveZ_BySurface' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, RotateMin) == 0x000324, "Member 'ASimpleScatter::RotateMin' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, RotateMax) == 0x000330, "Member 'ASimpleScatter::RotateMax' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, AlignToSurface) == 0x00033C, "Member 'ASimpleScatter::AlignToSurface' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, AlignMode) == 0x000340, "Member 'ASimpleScatter::AlignMode' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, ScaleMin) == 0x000344, "Member 'ASimpleScatter::ScaleMin' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, ScaleMax) == 0x000350, "Member 'ASimpleScatter::ScaleMax' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, ScaleMode) == 0x00035C, "Member 'ASimpleScatter::ScaleMode' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, MaterialScaleEffect) == 0x000360, "Member 'ASimpleScatter::MaterialScaleEffect' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, SlopeScaleFalloff) == 0x000364, "Member 'ASimpleScatter::SlopeScaleFalloff' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, MinCullDistance) == 0x000374, "Member 'ASimpleScatter::MinCullDistance' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, MaxCullDistance) == 0x000378, "Member 'ASimpleScatter::MaxCullDistance' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, MaxInstancesLimit) == 0x00037C, "Member 'ASimpleScatter::MaxInstancesLimit' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, DistributionMaterialResolution) == 0x000380, "Member 'ASimpleScatter::DistributionMaterialResolution' has a wrong offset!");
static_assert(offsetof(ASimpleScatter, bShowDebugMessages) == 0x000384, "Member 'ASimpleScatter::bShowDebugMessages' has a wrong offset!");

// Class SimpleScatterPlugin.SimpleScatterSpline
// 0x0040 (0x0590 - 0x0550)
class USimpleScatterSpline final : public USplineComponent
{
public:
	bool                                          bExcludeSpline;                                    // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClosedSpline;                                     // 0x0549(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54A[0x2];                                      // 0x054A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DensityDistanceEffect;                             // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityDistanceMin;                                // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityDistanceMax;                                // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityDistanceCurve;                              // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleDistanceEffect;                               // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleDistanceMin;                                  // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleDistanceMax;                                  // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleDistanceCurve;                                // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56C[0x24];                                     // 0x056C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleScatterSpline">();
	}
	static class USimpleScatterSpline* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleScatterSpline>();
	}
};
static_assert(alignof(USimpleScatterSpline) == 0x000010, "Wrong alignment on USimpleScatterSpline");
static_assert(sizeof(USimpleScatterSpline) == 0x000590, "Wrong size on USimpleScatterSpline");
static_assert(offsetof(USimpleScatterSpline, bExcludeSpline) == 0x000548, "Member 'USimpleScatterSpline::bExcludeSpline' has a wrong offset!");
static_assert(offsetof(USimpleScatterSpline, bClosedSpline) == 0x000549, "Member 'USimpleScatterSpline::bClosedSpline' has a wrong offset!");
static_assert(offsetof(USimpleScatterSpline, DensityDistanceEffect) == 0x00054C, "Member 'USimpleScatterSpline::DensityDistanceEffect' has a wrong offset!");
static_assert(offsetof(USimpleScatterSpline, DensityDistanceMin) == 0x000550, "Member 'USimpleScatterSpline::DensityDistanceMin' has a wrong offset!");
static_assert(offsetof(USimpleScatterSpline, DensityDistanceMax) == 0x000554, "Member 'USimpleScatterSpline::DensityDistanceMax' has a wrong offset!");
static_assert(offsetof(USimpleScatterSpline, DensityDistanceCurve) == 0x000558, "Member 'USimpleScatterSpline::DensityDistanceCurve' has a wrong offset!");
static_assert(offsetof(USimpleScatterSpline, ScaleDistanceEffect) == 0x00055C, "Member 'USimpleScatterSpline::ScaleDistanceEffect' has a wrong offset!");
static_assert(offsetof(USimpleScatterSpline, ScaleDistanceMin) == 0x000560, "Member 'USimpleScatterSpline::ScaleDistanceMin' has a wrong offset!");
static_assert(offsetof(USimpleScatterSpline, ScaleDistanceMax) == 0x000564, "Member 'USimpleScatterSpline::ScaleDistanceMax' has a wrong offset!");
static_assert(offsetof(USimpleScatterSpline, ScaleDistanceCurve) == 0x000568, "Member 'USimpleScatterSpline::ScaleDistanceCurve' has a wrong offset!");

// Class SimpleScatterPlugin.SimpleScatterSplineActor
// 0x0008 (0x0228 - 0x0220)
class ASimpleScatterSplineActor final : public AActor
{
public:
	class USimpleScatterSpline*                   SplineComponent;                                   // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleScatterSplineActor">();
	}
	static class ASimpleScatterSplineActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASimpleScatterSplineActor>();
	}
};
static_assert(alignof(ASimpleScatterSplineActor) == 0x000008, "Wrong alignment on ASimpleScatterSplineActor");
static_assert(sizeof(ASimpleScatterSplineActor) == 0x000228, "Wrong size on ASimpleScatterSplineActor");
static_assert(offsetof(ASimpleScatterSplineActor, SplineComponent) == 0x000220, "Member 'ASimpleScatterSplineActor::SplineComponent' has a wrong offset!");

}

