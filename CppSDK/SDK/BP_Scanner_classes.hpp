#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Scanner

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Backrooms_structs.hpp"
#include "BP_Item_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Scanner.BP_Scanner_C
// 0x0138 (0x0390 - 0x0258)
class ABP_Scanner_C final : public ABP_Item_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Scanner_C;                       // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ULIDARComponent*                        LIDARComponent;                                    // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Display;                                           // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane1;                                            // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRenderScanDistancePercent;                     // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SideScene;                                         // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CenterScene;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          InstancedStaticMesh;                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRenderScanPercent;                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRenderTargets;                                 // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRenderDistance;                                // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane;                                             // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ScannerComponent_C*                 MotionScannerComponent;                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioTarget;                                       // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          CanUse;                                            // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsLiDAREnable;                                    // 0x02D1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bIsWaveScannerEnbale;                              // 0x02D2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bIsMotionScannerEnable;                            // 0x02D3(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DMI_MotionScanner;                                 // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           NpcMeshArr;                                        // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         MinDetectWaveDistance;                             // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TargetsSoundTimer;                                 // 0x02F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        LidarLocation;                                     // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DisplaySize;                                       // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationRay;                                       // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChangeDistanceRot;                                 // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetDecayRate;                                   // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTargetsStruct>                 NewTargets;                                        // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FTargetsStruct>                 LastTargets;                                       // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMotionScannerComponent*>        Targets;                                           // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         BeamSpawnPerSecond;                                // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DotScaleFactorSK;                                  // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumBeams;                                          // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              UVData;                                            // 0x035C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkelMeshCollisionUVROF;                            // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanRunSKCollisionUV;                               // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               LIDARDotsMat;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LIDARGunMat;                                       // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ScannerDirector_C*                  ScanDirector;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsingFOV;                                          // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Scanner(int32 EntryPoint);
	void ReceiveDestroyed();
	void SRV_Lidar(const struct FHitResult& HitResult, const struct FColor& Color);
	void OC_Fire();
	void Initialize();
	void MC_Fire();
	void BndEvt__BP_Scanner_LIDARComponent_K2Node_ComponentBoundEvent_2_ScannerUpdateSignature__DelegateSignature();
	void BndEvt__BP_Scanner_LIDARComponent_K2Node_ComponentBoundEvent_0_ScannerTraceSignature__DelegateSignature();
	void ResetSKCollisionUVBool();
	void SpawnScannerBeam(const struct FVector& BeamStart, const struct FVector& BeamEnd);
	void SetScanDistance(float NewDistance);
	void BndEvt__BP_Scanner_BP_ScannerComponent_K2Node_ComponentBoundEvent_1_ScannerWaveUpdateDelegate__DelegateSignature(TArray<struct FTargetsStruct>& OutTargets, const struct FTelemetryStruct& OutTelemetry);
	void SetEnableMotionScanner(bool bEnable);
	void SetEnableWaveScan(bool bEnable);
	void SetEnableLiDAR(bool Enable);
	void ReceiveTick(float DeltaSeconds);
	void SetStartEnableMotionScanner(bool Activate);
	void SoundChangeDistance(float& NewDistance);
	void OnRep_bIsMotionScannerEnable();
	void OnRep_bIsWaveScannerEnbale();
	void OnRep_bIsLiDAREnable();
	void SetNewPositionTarget(const struct FVector& SecondLocation, struct FVector* ReturnPosition);
	void SetTargets();
	void AddTarget(const struct FTargetsStruct& TargetsStruct);
	void UpdateTargetSound(float InFloat, bool bEnable);
	float UpdateMinDistance();
	void UpdateScanPercent();
	void SetTargetPosition(bool OneTarget, class UMotionScannerComponent* SetMotionScanner, class UStaticMeshComponent* SetNpcMesh);
	void ScannerTraceCalc(struct FVector* TraceStart, struct FVector* TraceEnd);
	void FixUVStretching(const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, int32 FaceIndex, const struct FVector2D& HitUVLocation, float* FixedSize, struct FVector* FixedStretch);
	void InitializeMaterials();
	void InitializeColors();
	void LiDAR(float& Delta);
	void GetMaterial(class UMaterialInterface* Material_0, class UMaterialInterface** Adjusted);
	void ReceiveBeginPlay();
	void UseItem();
	void SetMaterial(bool EnabledFOV);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Scanner_C">();
	}
	static class ABP_Scanner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Scanner_C>();
	}
};
static_assert(alignof(ABP_Scanner_C) == 0x000008, "Wrong alignment on ABP_Scanner_C");
static_assert(sizeof(ABP_Scanner_C) == 0x000390, "Wrong size on ABP_Scanner_C");
static_assert(offsetof(ABP_Scanner_C, UberGraphFrame_BP_Scanner_C) == 0x000258, "Member 'ABP_Scanner_C::UberGraphFrame_BP_Scanner_C' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, LIDARComponent) == 0x000260, "Member 'ABP_Scanner_C::LIDARComponent' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, SkeletalMesh) == 0x000268, "Member 'ABP_Scanner_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, Display) == 0x000270, "Member 'ABP_Scanner_C::Display' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, Plane1) == 0x000278, "Member 'ABP_Scanner_C::Plane1' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, TextRenderScanDistancePercent) == 0x000280, "Member 'ABP_Scanner_C::TextRenderScanDistancePercent' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, SideScene) == 0x000288, "Member 'ABP_Scanner_C::SideScene' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, CenterScene) == 0x000290, "Member 'ABP_Scanner_C::CenterScene' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, InstancedStaticMesh) == 0x000298, "Member 'ABP_Scanner_C::InstancedStaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, TextRenderScanPercent) == 0x0002A0, "Member 'ABP_Scanner_C::TextRenderScanPercent' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, TextRenderTargets) == 0x0002A8, "Member 'ABP_Scanner_C::TextRenderTargets' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, TextRenderDistance) == 0x0002B0, "Member 'ABP_Scanner_C::TextRenderDistance' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, Plane) == 0x0002B8, "Member 'ABP_Scanner_C::Plane' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, MotionScannerComponent) == 0x0002C0, "Member 'ABP_Scanner_C::MotionScannerComponent' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, AudioTarget) == 0x0002C8, "Member 'ABP_Scanner_C::AudioTarget' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, CanUse) == 0x0002D0, "Member 'ABP_Scanner_C::CanUse' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, bIsLiDAREnable) == 0x0002D1, "Member 'ABP_Scanner_C::bIsLiDAREnable' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, bIsWaveScannerEnbale) == 0x0002D2, "Member 'ABP_Scanner_C::bIsWaveScannerEnbale' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, bIsMotionScannerEnable) == 0x0002D3, "Member 'ABP_Scanner_C::bIsMotionScannerEnable' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, DMI_MotionScanner) == 0x0002D8, "Member 'ABP_Scanner_C::DMI_MotionScanner' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, NpcMeshArr) == 0x0002E0, "Member 'ABP_Scanner_C::NpcMeshArr' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, MinDetectWaveDistance) == 0x0002F0, "Member 'ABP_Scanner_C::MinDetectWaveDistance' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, TargetsSoundTimer) == 0x0002F8, "Member 'ABP_Scanner_C::TargetsSoundTimer' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, LidarLocation) == 0x000300, "Member 'ABP_Scanner_C::LidarLocation' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, DisplaySize) == 0x000310, "Member 'ABP_Scanner_C::DisplaySize' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, RotationRay) == 0x000314, "Member 'ABP_Scanner_C::RotationRay' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, ChangeDistanceRot) == 0x000318, "Member 'ABP_Scanner_C::ChangeDistanceRot' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, TargetDecayRate) == 0x00031C, "Member 'ABP_Scanner_C::TargetDecayRate' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, NewTargets) == 0x000320, "Member 'ABP_Scanner_C::NewTargets' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, LastTargets) == 0x000330, "Member 'ABP_Scanner_C::LastTargets' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, Targets) == 0x000340, "Member 'ABP_Scanner_C::Targets' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, BeamSpawnPerSecond) == 0x000350, "Member 'ABP_Scanner_C::BeamSpawnPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, DotScaleFactorSK) == 0x000354, "Member 'ABP_Scanner_C::DotScaleFactorSK' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, NumBeams) == 0x000358, "Member 'ABP_Scanner_C::NumBeams' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, UVData) == 0x00035C, "Member 'ABP_Scanner_C::UVData' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, SkelMeshCollisionUVROF) == 0x000364, "Member 'ABP_Scanner_C::SkelMeshCollisionUVROF' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, CanRunSKCollisionUV) == 0x000368, "Member 'ABP_Scanner_C::CanRunSKCollisionUV' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, LIDARDotsMat) == 0x000370, "Member 'ABP_Scanner_C::LIDARDotsMat' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, LIDARGunMat) == 0x000378, "Member 'ABP_Scanner_C::LIDARGunMat' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, ScanDirector) == 0x000380, "Member 'ABP_Scanner_C::ScanDirector' has a wrong offset!");
static_assert(offsetof(ABP_Scanner_C, UsingFOV) == 0x000388, "Member 'ABP_Scanner_C::UsingFOV' has a wrong offset!");

}

