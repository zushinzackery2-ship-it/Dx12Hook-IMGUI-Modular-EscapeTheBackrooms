#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Thermometer_Display

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_SegmentDisplayType_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Thermometer_Display.BP_Thermometer_Display_C
// 0x0058 (0x0278 - 0x0220)
class ABP_Thermometer_Display_C final : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 Value;                                             // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          bOn;                                               // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Colour;                                            // 0x023C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Brightness;                                        // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           SegmentArray;                                      // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         Background_Opacity;                                // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_SegmentDisplayType                       Segment_Type;                                      // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Length;                                            // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsingFOV;                                          // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void UserConstructionScript();
	void Construct_Core();
	void Construct_Update();
	void Update();
	void SetLength();
	void SetSegmentType(class UPrimitiveComponent* Mesh);
	void MaterialSettings(class UMeshComponent* Mesh);
	void SetDisplayValue(class UMeshComponent* Mesh, const class FString& Value_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Thermometer_Display_C">();
	}
	static class ABP_Thermometer_Display_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Thermometer_Display_C>();
	}
};
static_assert(alignof(ABP_Thermometer_Display_C) == 0x000008, "Wrong alignment on ABP_Thermometer_Display_C");
static_assert(sizeof(ABP_Thermometer_Display_C) == 0x000278, "Wrong size on ABP_Thermometer_Display_C");
static_assert(offsetof(ABP_Thermometer_Display_C, DefaultSceneRoot) == 0x000220, "Member 'ABP_Thermometer_Display_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_Display_C, Value) == 0x000228, "Member 'ABP_Thermometer_Display_C::Value' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_Display_C, bOn) == 0x000238, "Member 'ABP_Thermometer_Display_C::bOn' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_Display_C, Colour) == 0x00023C, "Member 'ABP_Thermometer_Display_C::Colour' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_Display_C, Brightness) == 0x00024C, "Member 'ABP_Thermometer_Display_C::Brightness' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_Display_C, SegmentArray) == 0x000250, "Member 'ABP_Thermometer_Display_C::SegmentArray' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_Display_C, Background_Opacity) == 0x000260, "Member 'ABP_Thermometer_Display_C::Background_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_Display_C, Segment_Type) == 0x000264, "Member 'ABP_Thermometer_Display_C::Segment_Type' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_Display_C, Length) == 0x000268, "Member 'ABP_Thermometer_Display_C::Length' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_Display_C, Distance) == 0x00026C, "Member 'ABP_Thermometer_Display_C::Distance' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_Display_C, UsingFOV) == 0x000270, "Member 'ABP_Thermometer_Display_C::UsingFOV' has a wrong offset!");

}

