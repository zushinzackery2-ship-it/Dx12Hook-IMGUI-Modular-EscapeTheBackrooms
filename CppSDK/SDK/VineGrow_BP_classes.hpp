#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VineGrow_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_VineSpline_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass VineGrow_BP.VineGrow_BP_C
// 0x0098 (0x02B8 - 0x0220)
class AVineGrow_BP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VFXPosition;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       LeftArmPath;                                       // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       RightArmPath;                                      // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       RightLegVinePath;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          InstancedStaticMesh;                               // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       BodyVinePath;                                      // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            VineMesh;                                          // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrowthDuration;                                    // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         RetractingDuration;                                // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class USplineMeshComponent*                   CurrentSplineMeshComponent;                        // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_VineSpline>                  SplineArray;                                       // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         CurrentSegmentIndex;                               // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSegmentAlpha;                               // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimePerSegment;                                    // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Growing;                                           // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPCharacter_Demo_C*                    ParentPlayer;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAnimMontage*                           VinesIdle;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_VineGrow_BP(int32 EntryPoint);
	void UpdateSplineVisibility();
	void ReceiveTick(float DeltaSeconds);
	void UpdateCurrentSegment();
	void ReceiveBeginPlay();
	void GrowVines();
	void ResetVines();
	void UserConstructionScript();
	void Get_Max_Number_Of_Segments(int32* Segments);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"VineGrow_BP_C">();
	}
	static class AVineGrow_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVineGrow_BP_C>();
	}
};
static_assert(alignof(AVineGrow_BP_C) == 0x000008, "Wrong alignment on AVineGrow_BP_C");
static_assert(sizeof(AVineGrow_BP_C) == 0x0002B8, "Wrong size on AVineGrow_BP_C");
static_assert(offsetof(AVineGrow_BP_C, UberGraphFrame) == 0x000220, "Member 'AVineGrow_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, Audio) == 0x000228, "Member 'AVineGrow_BP_C::Audio' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, VFXPosition) == 0x000230, "Member 'AVineGrow_BP_C::VFXPosition' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, LeftArmPath) == 0x000238, "Member 'AVineGrow_BP_C::LeftArmPath' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, RightArmPath) == 0x000240, "Member 'AVineGrow_BP_C::RightArmPath' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, RightLegVinePath) == 0x000248, "Member 'AVineGrow_BP_C::RightLegVinePath' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, SkeletalMesh) == 0x000250, "Member 'AVineGrow_BP_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, InstancedStaticMesh) == 0x000258, "Member 'AVineGrow_BP_C::InstancedStaticMesh' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, BodyVinePath) == 0x000260, "Member 'AVineGrow_BP_C::BodyVinePath' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, DefaultSceneRoot) == 0x000268, "Member 'AVineGrow_BP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, VineMesh) == 0x000270, "Member 'AVineGrow_BP_C::VineMesh' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, GrowthDuration) == 0x000278, "Member 'AVineGrow_BP_C::GrowthDuration' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, RetractingDuration) == 0x00027C, "Member 'AVineGrow_BP_C::RetractingDuration' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, CurrentSplineMeshComponent) == 0x000280, "Member 'AVineGrow_BP_C::CurrentSplineMeshComponent' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, SplineArray) == 0x000288, "Member 'AVineGrow_BP_C::SplineArray' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, CurrentSegmentIndex) == 0x000298, "Member 'AVineGrow_BP_C::CurrentSegmentIndex' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, CurrentSegmentAlpha) == 0x00029C, "Member 'AVineGrow_BP_C::CurrentSegmentAlpha' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, TimePerSegment) == 0x0002A0, "Member 'AVineGrow_BP_C::TimePerSegment' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, Growing) == 0x0002A4, "Member 'AVineGrow_BP_C::Growing' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, ParentPlayer) == 0x0002A8, "Member 'AVineGrow_BP_C::ParentPlayer' has a wrong offset!");
static_assert(offsetof(AVineGrow_BP_C, VinesIdle) == 0x0002B0, "Member 'AVineGrow_BP_C::VinesIdle' has a wrong offset!");

}

