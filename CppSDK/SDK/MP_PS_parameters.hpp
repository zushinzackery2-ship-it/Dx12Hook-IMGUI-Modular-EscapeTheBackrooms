#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MP_PS

#include "Basic.hpp"

#include "S_UserProfile_structs.hpp"
#include "AdvancedSessions_structs.hpp"
#include "S_PlayerData_structs.hpp"
#include "S_PlayerConnectionInfo_structs.hpp"
#include "E_HeadsetType_structs.hpp"


namespace SDK::Params
{

// Function MP_PS.MP_PS_C.ExecuteUbergraph_MP_PS
// 0x00F8 (0x00F8 - 0x0000)
struct MP_PS_C_ExecuteUbergraph_MP_PS final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           K2Node_Event_NewPlayerState;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Index;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_Name;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_CustomEvent_Inventory;                      // 0x0020(0x0010)(ConstParm, ReferenceParm)
	float                                         K2Node_CustomEvent_Amount;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPCharacter_Demo_C*                    K2Node_DynamicCast_AsBPCharacter_Demo;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_UserProfile                         K2Node_CustomEvent_Player_UserProfile;             // 0x0070(0x0018)(ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPCharacter_Demo_C*                    K2Node_DynamicCast_AsBPCharacter_Demo_1;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A3[0x1];                                       // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_PlayerConnectionInfo                K2Node_CustomEvent_Player_ConnectionInfo;          // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_HeadsetType                                 K2Node_CustomEvent_HeadsetType;                    // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF[0x1];                                       // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x00B0(0x0010)(ReferenceParm)
	int32                                         K2Node_CustomEvent_Level;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MySaveGame_C*                       CallFunc_Get_Save_Game_SaveGame;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoadLevelFromXP_Level;                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoadLevelFromXP_VisualLevel;              // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller_1;          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsTalking;                      // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocalPlayerController_ReturnValue;      // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EB[0x1];                                       // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Index1;                         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Index2;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MP_PS_C_ExecuteUbergraph_MP_PS) == 0x000008, "Wrong alignment on MP_PS_C_ExecuteUbergraph_MP_PS");
static_assert(sizeof(MP_PS_C_ExecuteUbergraph_MP_PS) == 0x0000F8, "Wrong size on MP_PS_C_ExecuteUbergraph_MP_PS");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, EntryPoint) == 0x000000, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::EntryPoint' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_Event_NewPlayerState) == 0x000008, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_Event_NewPlayerState' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, Temp_bool_Has_Been_Initd_Variable) == 0x000010, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_Index) == 0x000014, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_Index' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_Name) == 0x000018, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_Name' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_Inventory) == 0x000020, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_Inventory' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_Amount) == 0x000030, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_Amount' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_Add_FloatFloat_ReturnValue) == 0x000040, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_DynamicCast_AsPlayer_Controller) == 0x000048, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_FClamp_ReturnValue) == 0x000054, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_K2_GetPawn_ReturnValue) == 0x000058, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_DynamicCast_AsBPCharacter_Demo) == 0x000060, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_DynamicCast_AsBPCharacter_Demo' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_Player_UserProfile) == 0x000070, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_Player_UserProfile' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000088, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_HasAuthority_ReturnValue) == 0x000090, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_DynamicCast_AsBPCharacter_Demo_1) == 0x000098, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_DynamicCast_AsBPCharacter_Demo_1' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_DynamicCast_bSuccess_2) == 0x0000A0, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_IsValid_ReturnValue) == 0x0000A1, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_IsValid_ReturnValue_1) == 0x0000A2, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_Player_ConnectionInfo) == 0x0000A4, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_Player_ConnectionInfo' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, Temp_bool_IsClosed_Variable) == 0x0000AC, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000AD, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_HeadsetType) == 0x0000AE, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_HeadsetType' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_MakeArray_Array) == 0x0000B0, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_Level) == 0x0000C0, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_Level' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_Get_Save_Game_SaveGame) == 0x0000C8, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_Get_Save_Game_SaveGame' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_LoadLevelFromXP_Level) == 0x0000D0, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_LoadLevelFromXP_Level' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_LoadLevelFromXP_VisualLevel) == 0x0000D4, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_LoadLevelFromXP_VisualLevel' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_GetOwner_ReturnValue_1) == 0x0000D8, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_DynamicCast_AsPlayer_Controller_1) == 0x0000E0, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_DynamicCast_AsPlayer_Controller_1' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_DynamicCast_bSuccess_3) == 0x0000E8, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_IsTalking) == 0x0000E9, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_IsTalking' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, CallFunc_IsLocalPlayerController_ReturnValue) == 0x0000EA, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::CallFunc_IsLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_Index1) == 0x0000EC, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_Index1' has a wrong offset!");
static_assert(offsetof(MP_PS_C_ExecuteUbergraph_MP_PS, K2Node_CustomEvent_Index2) == 0x0000F0, "Member 'MP_PS_C_ExecuteUbergraph_MP_PS::K2Node_CustomEvent_Index2' has a wrong offset!");

// Function MP_PS.MP_PS_C.InvSwap
// 0x0008 (0x0008 - 0x0000)
struct MP_PS_C_InvSwap final
{
public:
	int32                                         Index1;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index2;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MP_PS_C_InvSwap) == 0x000004, "Wrong alignment on MP_PS_C_InvSwap");
static_assert(sizeof(MP_PS_C_InvSwap) == 0x000008, "Wrong size on MP_PS_C_InvSwap");
static_assert(offsetof(MP_PS_C_InvSwap, Index1) == 0x000000, "Member 'MP_PS_C_InvSwap::Index1' has a wrong offset!");
static_assert(offsetof(MP_PS_C_InvSwap, Index2) == 0x000004, "Member 'MP_PS_C_InvSwap::Index2' has a wrong offset!");

// Function MP_PS.MP_PS_C.UpdateIsTalking
// 0x0001 (0x0001 - 0x0000)
struct MP_PS_C_UpdateIsTalking final
{
public:
	bool                                          IsTalking_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MP_PS_C_UpdateIsTalking) == 0x000001, "Wrong alignment on MP_PS_C_UpdateIsTalking");
static_assert(sizeof(MP_PS_C_UpdateIsTalking) == 0x000001, "Wrong size on MP_PS_C_UpdateIsTalking");
static_assert(offsetof(MP_PS_C_UpdateIsTalking, IsTalking_0) == 0x000000, "Member 'MP_PS_C_UpdateIsTalking::IsTalking_0' has a wrong offset!");

// Function MP_PS.MP_PS_C.UpdateLevel
// 0x0004 (0x0004 - 0x0000)
struct MP_PS_C_UpdateLevel final
{
public:
	int32                                         Level_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MP_PS_C_UpdateLevel) == 0x000004, "Wrong alignment on MP_PS_C_UpdateLevel");
static_assert(sizeof(MP_PS_C_UpdateLevel) == 0x000004, "Wrong size on MP_PS_C_UpdateLevel");
static_assert(offsetof(MP_PS_C_UpdateLevel, Level_0) == 0x000000, "Member 'MP_PS_C_UpdateLevel::Level_0' has a wrong offset!");

// Function MP_PS.MP_PS_C.SRV_SetHeadsetType
// 0x0001 (0x0001 - 0x0000)
struct MP_PS_C_SRV_SetHeadsetType final
{
public:
	E_HeadsetType                                 HeadsetType_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MP_PS_C_SRV_SetHeadsetType) == 0x000001, "Wrong alignment on MP_PS_C_SRV_SetHeadsetType");
static_assert(sizeof(MP_PS_C_SRV_SetHeadsetType) == 0x000001, "Wrong size on MP_PS_C_SRV_SetHeadsetType");
static_assert(offsetof(MP_PS_C_SRV_SetHeadsetType, HeadsetType_0) == 0x000000, "Member 'MP_PS_C_SRV_SetHeadsetType::HeadsetType_0' has a wrong offset!");

// Function MP_PS.MP_PS_C.SRV_AddSanity
// 0x0004 (0x0004 - 0x0000)
struct MP_PS_C_SRV_AddSanity final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MP_PS_C_SRV_AddSanity) == 0x000004, "Wrong alignment on MP_PS_C_SRV_AddSanity");
static_assert(sizeof(MP_PS_C_SRV_AddSanity) == 0x000004, "Wrong size on MP_PS_C_SRV_AddSanity");
static_assert(offsetof(MP_PS_C_SRV_AddSanity, Amount) == 0x000000, "Member 'MP_PS_C_SRV_AddSanity::Amount' has a wrong offset!");

// Function MP_PS.MP_PS_C.SaveInventory
// 0x0010 (0x0010 - 0x0000)
struct MP_PS_C_SaveInventory final
{
public:
	TArray<class FName>                           Inventory;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(MP_PS_C_SaveInventory) == 0x000008, "Wrong alignment on MP_PS_C_SaveInventory");
static_assert(sizeof(MP_PS_C_SaveInventory) == 0x000010, "Wrong size on MP_PS_C_SaveInventory");
static_assert(offsetof(MP_PS_C_SaveInventory, Inventory) == 0x000000, "Member 'MP_PS_C_SaveInventory::Inventory' has a wrong offset!");

// Function MP_PS.MP_PS_C.SetInventoryItem
// 0x000C (0x000C - 0x0000)
struct MP_PS_C_SetInventoryItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Name_0;                                            // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MP_PS_C_SetInventoryItem) == 0x000004, "Wrong alignment on MP_PS_C_SetInventoryItem");
static_assert(sizeof(MP_PS_C_SetInventoryItem) == 0x00000C, "Wrong size on MP_PS_C_SetInventoryItem");
static_assert(offsetof(MP_PS_C_SetInventoryItem, Index_0) == 0x000000, "Member 'MP_PS_C_SetInventoryItem::Index_0' has a wrong offset!");
static_assert(offsetof(MP_PS_C_SetInventoryItem, Name_0) == 0x000004, "Member 'MP_PS_C_SetInventoryItem::Name_0' has a wrong offset!");

// Function MP_PS.MP_PS_C.ReceiveCopyProperties
// 0x0008 (0x0008 - 0x0000)
struct MP_PS_C_ReceiveCopyProperties final
{
public:
	class APlayerState*                           NewPlayerState;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MP_PS_C_ReceiveCopyProperties) == 0x000008, "Wrong alignment on MP_PS_C_ReceiveCopyProperties");
static_assert(sizeof(MP_PS_C_ReceiveCopyProperties) == 0x000008, "Wrong size on MP_PS_C_ReceiveCopyProperties");
static_assert(offsetof(MP_PS_C_ReceiveCopyProperties, NewPlayerState) == 0x000000, "Member 'MP_PS_C_ReceiveCopyProperties::NewPlayerState' has a wrong offset!");

// Function MP_PS.MP_PS_C.SR_Update_Player_UserProfile
// 0x0018 (0x0018 - 0x0000)
struct MP_PS_C_SR_Update_Player_UserProfile final
{
public:
	struct FS_UserProfile                         Player_UserProfile;                                // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(MP_PS_C_SR_Update_Player_UserProfile) == 0x000008, "Wrong alignment on MP_PS_C_SR_Update_Player_UserProfile");
static_assert(sizeof(MP_PS_C_SR_Update_Player_UserProfile) == 0x000018, "Wrong size on MP_PS_C_SR_Update_Player_UserProfile");
static_assert(offsetof(MP_PS_C_SR_Update_Player_UserProfile, Player_UserProfile) == 0x000000, "Member 'MP_PS_C_SR_Update_Player_UserProfile::Player_UserProfile' has a wrong offset!");

// Function MP_PS.MP_PS_C.SR_Update_Player_ConnectionInfo
// 0x0008 (0x0008 - 0x0000)
struct MP_PS_C_SR_Update_Player_ConnectionInfo final
{
public:
	struct FS_PlayerConnectionInfo                Player_ConnectionInfo;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MP_PS_C_SR_Update_Player_ConnectionInfo) == 0x000004, "Wrong alignment on MP_PS_C_SR_Update_Player_ConnectionInfo");
static_assert(sizeof(MP_PS_C_SR_Update_Player_ConnectionInfo) == 0x000008, "Wrong size on MP_PS_C_SR_Update_Player_ConnectionInfo");
static_assert(offsetof(MP_PS_C_SR_Update_Player_ConnectionInfo, Player_ConnectionInfo) == 0x000000, "Member 'MP_PS_C_SR_Update_Player_ConnectionInfo::Player_ConnectionInfo' has a wrong offset!");

// Function MP_PS.MP_PS_C.Load_Player_UserProfile
// 0x0080 (0x0080 - 0x0000)
struct MP_PS_C_Load_Player_UserProfile final
{
public:
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0010(0x0028)()
	struct FS_UserProfile                         K2Node_MakeStruct_S_UserProfile;                   // 0x0038(0x0018)(ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash)
	EBlueprintAsyncResultSwitch                   CallFunc_GetSteamFriendAvatar_Result;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_GetSteamFriendAvatar_ReturnValue;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_UserProfile                         K2Node_MakeStruct_S_UserProfile_1;                 // 0x0060(0x0018)(ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MP_PS_C_Load_Player_UserProfile) == 0x000008, "Wrong alignment on MP_PS_C_Load_Player_UserProfile");
static_assert(sizeof(MP_PS_C_Load_Player_UserProfile) == 0x000080, "Wrong size on MP_PS_C_Load_Player_UserProfile");
static_assert(offsetof(MP_PS_C_Load_Player_UserProfile, CallFunc_GetPlayerName_ReturnValue) == 0x000000, "Member 'MP_PS_C_Load_Player_UserProfile::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_Load_Player_UserProfile, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000010, "Member 'MP_PS_C_Load_Player_UserProfile::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(MP_PS_C_Load_Player_UserProfile, K2Node_MakeStruct_S_UserProfile) == 0x000038, "Member 'MP_PS_C_Load_Player_UserProfile::K2Node_MakeStruct_S_UserProfile' has a wrong offset!");
static_assert(offsetof(MP_PS_C_Load_Player_UserProfile, CallFunc_GetSteamFriendAvatar_Result) == 0x000050, "Member 'MP_PS_C_Load_Player_UserProfile::CallFunc_GetSteamFriendAvatar_Result' has a wrong offset!");
static_assert(offsetof(MP_PS_C_Load_Player_UserProfile, CallFunc_GetSteamFriendAvatar_ReturnValue) == 0x000058, "Member 'MP_PS_C_Load_Player_UserProfile::CallFunc_GetSteamFriendAvatar_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_Load_Player_UserProfile, K2Node_MakeStruct_S_UserProfile_1) == 0x000060, "Member 'MP_PS_C_Load_Player_UserProfile::K2Node_MakeStruct_S_UserProfile_1' has a wrong offset!");
static_assert(offsetof(MP_PS_C_Load_Player_UserProfile, K2Node_SwitchEnum_CmpSuccess) == 0x000078, "Member 'MP_PS_C_Load_Player_UserProfile::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function MP_PS.MP_PS_C.Load_Player_ConnectionInfo
// 0x0018 (0x0018 - 0x0000)
struct MP_PS_C_Load_Player_ConnectionInfo final
{
public:
	bool                                          Client_ReadyStatus;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_PlayerConnectionInfo                K2Node_MakeStruct_S_PlayerConnectionInfo;          // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_PlayerConnectionInfo                K2Node_MakeStruct_S_PlayerConnectionInfo_1;        // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MP_PS_C_Load_Player_ConnectionInfo) == 0x000004, "Wrong alignment on MP_PS_C_Load_Player_ConnectionInfo");
static_assert(sizeof(MP_PS_C_Load_Player_ConnectionInfo) == 0x000018, "Wrong size on MP_PS_C_Load_Player_ConnectionInfo");
static_assert(offsetof(MP_PS_C_Load_Player_ConnectionInfo, Client_ReadyStatus) == 0x000000, "Member 'MP_PS_C_Load_Player_ConnectionInfo::Client_ReadyStatus' has a wrong offset!");
static_assert(offsetof(MP_PS_C_Load_Player_ConnectionInfo, K2Node_MakeStruct_S_PlayerConnectionInfo) == 0x000004, "Member 'MP_PS_C_Load_Player_ConnectionInfo::K2Node_MakeStruct_S_PlayerConnectionInfo' has a wrong offset!");
static_assert(offsetof(MP_PS_C_Load_Player_ConnectionInfo, K2Node_MakeStruct_S_PlayerConnectionInfo_1) == 0x00000C, "Member 'MP_PS_C_Load_Player_ConnectionInfo::K2Node_MakeStruct_S_PlayerConnectionInfo_1' has a wrong offset!");
static_assert(offsetof(MP_PS_C_Load_Player_ConnectionInfo, CallFunc_IsServer_ReturnValue) == 0x000014, "Member 'MP_PS_C_Load_Player_ConnectionInfo::CallFunc_IsServer_ReturnValue' has a wrong offset!");

// Function MP_PS.MP_PS_C.SavePlayer
// 0x0068 (0x0068 - 0x0000)
struct MP_PS_C_SavePlayer final
{
public:
	bool                                          ForceSave;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTearingDown_isTearingDown;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue_1;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_PlayerData                          K2Node_MakeStruct_S_PlayerData;                    // 0x0010(0x0018)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0030(0x0028)()
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(MP_PS_C_SavePlayer) == 0x000008, "Wrong alignment on MP_PS_C_SavePlayer");
static_assert(sizeof(MP_PS_C_SavePlayer) == 0x000068, "Wrong size on MP_PS_C_SavePlayer");
static_assert(offsetof(MP_PS_C_SavePlayer, ForceSave) == 0x000000, "Member 'MP_PS_C_SavePlayer::ForceSave' has a wrong offset!");
static_assert(offsetof(MP_PS_C_SavePlayer, CallFunc_K2_IsTearingDown_isTearingDown) == 0x000001, "Member 'MP_PS_C_SavePlayer::CallFunc_K2_IsTearingDown_isTearingDown' has a wrong offset!");
static_assert(offsetof(MP_PS_C_SavePlayer, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000004, "Member 'MP_PS_C_SavePlayer::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_SavePlayer, CallFunc_GetGameTimeInSeconds_ReturnValue_1) == 0x000008, "Member 'MP_PS_C_SavePlayer::CallFunc_GetGameTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MP_PS_C_SavePlayer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'MP_PS_C_SavePlayer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_SavePlayer, K2Node_MakeStruct_S_PlayerData) == 0x000010, "Member 'MP_PS_C_SavePlayer::K2Node_MakeStruct_S_PlayerData' has a wrong offset!");
static_assert(offsetof(MP_PS_C_SavePlayer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'MP_PS_C_SavePlayer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_SavePlayer, CallFunc_BooleanOR_ReturnValue) == 0x000029, "Member 'MP_PS_C_SavePlayer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_SavePlayer, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000030, "Member 'MP_PS_C_SavePlayer::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(MP_PS_C_SavePlayer, CallFunc_UniqueNetIdToString_String) == 0x000058, "Member 'MP_PS_C_SavePlayer::CallFunc_UniqueNetIdToString_String' has a wrong offset!");

// Function MP_PS.MP_PS_C.LoadPlayer
// 0x0068 (0x0068 - 0x0000)
struct MP_PS_C_LoadPlayer final
{
public:
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0000(0x0028)()
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LoadPlayerData_DidFind;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_PlayerData                          CallFunc_LoadPlayerData_Inventory;                 // 0x0040(0x0018)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MP_PS_C_LoadPlayer) == 0x000008, "Wrong alignment on MP_PS_C_LoadPlayer");
static_assert(sizeof(MP_PS_C_LoadPlayer) == 0x000068, "Wrong size on MP_PS_C_LoadPlayer");
static_assert(offsetof(MP_PS_C_LoadPlayer, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000000, "Member 'MP_PS_C_LoadPlayer::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(MP_PS_C_LoadPlayer, CallFunc_UniqueNetIdToString_String) == 0x000028, "Member 'MP_PS_C_LoadPlayer::CallFunc_UniqueNetIdToString_String' has a wrong offset!");
static_assert(offsetof(MP_PS_C_LoadPlayer, CallFunc_LoadPlayerData_DidFind) == 0x000038, "Member 'MP_PS_C_LoadPlayer::CallFunc_LoadPlayerData_DidFind' has a wrong offset!");
static_assert(offsetof(MP_PS_C_LoadPlayer, CallFunc_LoadPlayerData_Inventory) == 0x000040, "Member 'MP_PS_C_LoadPlayer::CallFunc_LoadPlayerData_Inventory' has a wrong offset!");
static_assert(offsetof(MP_PS_C_LoadPlayer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'MP_PS_C_LoadPlayer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_LoadPlayer, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'MP_PS_C_LoadPlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MP_PS_C_LoadPlayer, CallFunc_Greater_IntInt_ReturnValue) == 0x000060, "Member 'MP_PS_C_LoadPlayer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

}

