#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Lobby_DifficultySwitcher

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Lobby_DifficultySwitcher.Lobby_DifficultySwitcher_C.ExecuteUbergraph_Lobby_DifficultySwitcher
// 0x0008 (0x0008 - 0x0000)
struct Lobby_DifficultySwitcher_C_ExecuteUbergraph_Lobby_DifficultySwitcher final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lobby_DifficultySwitcher_C_ExecuteUbergraph_Lobby_DifficultySwitcher) == 0x000004, "Wrong alignment on Lobby_DifficultySwitcher_C_ExecuteUbergraph_Lobby_DifficultySwitcher");
static_assert(sizeof(Lobby_DifficultySwitcher_C_ExecuteUbergraph_Lobby_DifficultySwitcher) == 0x000008, "Wrong size on Lobby_DifficultySwitcher_C_ExecuteUbergraph_Lobby_DifficultySwitcher");
static_assert(offsetof(Lobby_DifficultySwitcher_C_ExecuteUbergraph_Lobby_DifficultySwitcher, EntryPoint) == 0x000000, "Member 'Lobby_DifficultySwitcher_C_ExecuteUbergraph_Lobby_DifficultySwitcher::EntryPoint' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_ExecuteUbergraph_Lobby_DifficultySwitcher, K2Node_Event_IsDesignTime) == 0x000004, "Member 'Lobby_DifficultySwitcher_C_ExecuteUbergraph_Lobby_DifficultySwitcher::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function Lobby_DifficultySwitcher.Lobby_DifficultySwitcher_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Lobby_DifficultySwitcher_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lobby_DifficultySwitcher_C_PreConstruct) == 0x000001, "Wrong alignment on Lobby_DifficultySwitcher_C_PreConstruct");
static_assert(sizeof(Lobby_DifficultySwitcher_C_PreConstruct) == 0x000001, "Wrong size on Lobby_DifficultySwitcher_C_PreConstruct");
static_assert(offsetof(Lobby_DifficultySwitcher_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Lobby_DifficultySwitcher_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Lobby_DifficultySwitcher.Lobby_DifficultySwitcher_C.Switch_Option
// 0x0048 (0x0048 - 0x0000)
struct Lobby_DifficultySwitcher_C_Switch_Option final
{
public:
	bool                                          Decrease_;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Max_Options;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Min_Options;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Selection;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lobby_DifficultySwitcher_C_Switch_Option) == 0x000008, "Wrong alignment on Lobby_DifficultySwitcher_C_Switch_Option");
static_assert(sizeof(Lobby_DifficultySwitcher_C_Switch_Option) == 0x000048, "Wrong size on Lobby_DifficultySwitcher_C_Switch_Option");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, Decrease_) == 0x000000, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::Decrease_' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, Max_Options) == 0x000004, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::Max_Options' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, Min_Options) == 0x000008, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::Min_Options' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, Current_Selection) == 0x00000C, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::Current_Selection' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, CallFunc_Array_Find_ReturnValue) == 0x000010, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, CallFunc_Array_Get_Item) == 0x000018, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, CallFunc_Subtract_IntInt_ReturnValue) == 0x00002C, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000030, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000031, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, Temp_int_Variable) == 0x000034, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000038, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Switch_Option, Temp_int_Variable_1) == 0x000040, "Member 'Lobby_DifficultySwitcher_C_Switch_Option::Temp_int_Variable_1' has a wrong offset!");

// Function Lobby_DifficultySwitcher.Lobby_DifficultySwitcher_C.Set_SelectedOption
// 0x0028 (0x0028 - 0x0000)
struct Lobby_DifficultySwitcher_C_Set_SelectedOption final
{
public:
	class FString                                 SelectedOption_0;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0010(0x0018)()
};
static_assert(alignof(Lobby_DifficultySwitcher_C_Set_SelectedOption) == 0x000008, "Wrong alignment on Lobby_DifficultySwitcher_C_Set_SelectedOption");
static_assert(sizeof(Lobby_DifficultySwitcher_C_Set_SelectedOption) == 0x000028, "Wrong size on Lobby_DifficultySwitcher_C_Set_SelectedOption");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Set_SelectedOption, SelectedOption_0) == 0x000000, "Member 'Lobby_DifficultySwitcher_C_Set_SelectedOption::SelectedOption_0' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Set_SelectedOption, CallFunc_Conv_StringToText_ReturnValue) == 0x000010, "Member 'Lobby_DifficultySwitcher_C_Set_SelectedOption::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function Lobby_DifficultySwitcher.Lobby_DifficultySwitcher_C.Setup
// 0x0070 (0x0070 - 0x0000)
struct Lobby_DifficultySwitcher_C_Setup final
{
public:
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0000(0x0058)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Lobby_DifficultySwitcher_C_Setup) == 0x000008, "Wrong alignment on Lobby_DifficultySwitcher_C_Setup");
static_assert(sizeof(Lobby_DifficultySwitcher_C_Setup) == 0x000070, "Wrong size on Lobby_DifficultySwitcher_C_Setup");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Setup, K2Node_MakeStruct_SlateFontInfo) == 0x000000, "Member 'Lobby_DifficultySwitcher_C_Setup::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Setup, CallFunc_Array_Find_ReturnValue) == 0x000058, "Member 'Lobby_DifficultySwitcher_C_Setup::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Setup, CallFunc_Array_Get_Item) == 0x000060, "Member 'Lobby_DifficultySwitcher_C_Setup::CallFunc_Array_Get_Item' has a wrong offset!");

// Function Lobby_DifficultySwitcher.Lobby_DifficultySwitcher_C.Set_OptionButtons_Visibility
// 0x0001 (0x0001 - 0x0000)
struct Lobby_DifficultySwitcher_C_Set_OptionButtons_Visibility final
{
public:
	bool                                          ShowOptionButtons_;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lobby_DifficultySwitcher_C_Set_OptionButtons_Visibility) == 0x000001, "Wrong alignment on Lobby_DifficultySwitcher_C_Set_OptionButtons_Visibility");
static_assert(sizeof(Lobby_DifficultySwitcher_C_Set_OptionButtons_Visibility) == 0x000001, "Wrong size on Lobby_DifficultySwitcher_C_Set_OptionButtons_Visibility");
static_assert(offsetof(Lobby_DifficultySwitcher_C_Set_OptionButtons_Visibility, ShowOptionButtons_) == 0x000000, "Member 'Lobby_DifficultySwitcher_C_Set_OptionButtons_Visibility::ShowOptionButtons_' has a wrong offset!");

}

