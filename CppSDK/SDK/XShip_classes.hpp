#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XShip

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "XShip_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class XShip.XShipComponent
// 0x00D8 (0x0188 - 0x00B0)
class UXShipComponent final : public UActorComponent
{
public:
	TArray<struct FXShipFloater>                  XShipFloaters;                                     // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FXShipEngine>                   XShipEngines;                                      // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         WaterDensity;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirDensity;                                        // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterWorldZ;                                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomShipBoundsRadius;                           // 0x00DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShipBoundsRadius;                                  // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWaterLinearDamping;                              // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutWaterLinearDamping;                             // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWaterAngularDamping;                             // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutWaterAngularDamping;                            // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementAccelerationSpeed;                         // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementBrakingSpeed;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementSideDampingSpeed;                          // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOrientRotationToMovement;                         // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanMoveBackwardWithOrientRotation;                // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ToleranceForMoveBackwardWithOrientRotation;        // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationSpeed;                                  // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAccelerationSpeed;                         // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationBrakingSpeed;                              // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiplyRotationBySpeed;                          // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedForMaxRotation;                               // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStabilization;                              // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStabilizationInAir;                         // 0x011D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAirAngularStabilizationSpeed;                    // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAirAngularStabilizationDamping;                  // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStabilizationSpeed;                         // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularStabilizationDamping;                       // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearStabilizationDamping;                        // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncMovement;                                     // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SendPacketInterval;                                // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientSyncSpeed;                                   // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRepXShipMovement                      RepXShipMovement;                                  // 0x0140(0x0030)(Net, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         SendPacketIntervalLocal;                           // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                MovementInput;                                     // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationInput;                                     // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableAllEngines();
	void DisableAllFloaters();
	void EnableAllEngines();
	void EnableAllFloaters();
	float GetShipBoundsRadius();
	class AXShipPawn* GetXShipPawn();
	bool IsEngineInWater();
	void Server_PassMovementInfo(const struct FRepXShipMovement& NewRepXShipMovement);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XShipComponent">();
	}
	static class UXShipComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXShipComponent>();
	}
};
static_assert(alignof(UXShipComponent) == 0x000008, "Wrong alignment on UXShipComponent");
static_assert(sizeof(UXShipComponent) == 0x000188, "Wrong size on UXShipComponent");
static_assert(offsetof(UXShipComponent, XShipFloaters) == 0x0000B0, "Member 'UXShipComponent::XShipFloaters' has a wrong offset!");
static_assert(offsetof(UXShipComponent, XShipEngines) == 0x0000C0, "Member 'UXShipComponent::XShipEngines' has a wrong offset!");
static_assert(offsetof(UXShipComponent, WaterDensity) == 0x0000D0, "Member 'UXShipComponent::WaterDensity' has a wrong offset!");
static_assert(offsetof(UXShipComponent, AirDensity) == 0x0000D4, "Member 'UXShipComponent::AirDensity' has a wrong offset!");
static_assert(offsetof(UXShipComponent, WaterWorldZ) == 0x0000D8, "Member 'UXShipComponent::WaterWorldZ' has a wrong offset!");
static_assert(offsetof(UXShipComponent, bCustomShipBoundsRadius) == 0x0000DC, "Member 'UXShipComponent::bCustomShipBoundsRadius' has a wrong offset!");
static_assert(offsetof(UXShipComponent, ShipBoundsRadius) == 0x0000E0, "Member 'UXShipComponent::ShipBoundsRadius' has a wrong offset!");
static_assert(offsetof(UXShipComponent, InWaterLinearDamping) == 0x0000E4, "Member 'UXShipComponent::InWaterLinearDamping' has a wrong offset!");
static_assert(offsetof(UXShipComponent, OutWaterLinearDamping) == 0x0000E8, "Member 'UXShipComponent::OutWaterLinearDamping' has a wrong offset!");
static_assert(offsetof(UXShipComponent, InWaterAngularDamping) == 0x0000EC, "Member 'UXShipComponent::InWaterAngularDamping' has a wrong offset!");
static_assert(offsetof(UXShipComponent, OutWaterAngularDamping) == 0x0000F0, "Member 'UXShipComponent::OutWaterAngularDamping' has a wrong offset!");
static_assert(offsetof(UXShipComponent, MovementAccelerationSpeed) == 0x0000F4, "Member 'UXShipComponent::MovementAccelerationSpeed' has a wrong offset!");
static_assert(offsetof(UXShipComponent, MovementBrakingSpeed) == 0x0000F8, "Member 'UXShipComponent::MovementBrakingSpeed' has a wrong offset!");
static_assert(offsetof(UXShipComponent, MovementSideDampingSpeed) == 0x0000FC, "Member 'UXShipComponent::MovementSideDampingSpeed' has a wrong offset!");
static_assert(offsetof(UXShipComponent, bOrientRotationToMovement) == 0x000100, "Member 'UXShipComponent::bOrientRotationToMovement' has a wrong offset!");
static_assert(offsetof(UXShipComponent, bCanMoveBackwardWithOrientRotation) == 0x000101, "Member 'UXShipComponent::bCanMoveBackwardWithOrientRotation' has a wrong offset!");
static_assert(offsetof(UXShipComponent, ToleranceForMoveBackwardWithOrientRotation) == 0x000104, "Member 'UXShipComponent::ToleranceForMoveBackwardWithOrientRotation' has a wrong offset!");
static_assert(offsetof(UXShipComponent, MaxRotationSpeed) == 0x000108, "Member 'UXShipComponent::MaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(UXShipComponent, RotationAccelerationSpeed) == 0x00010C, "Member 'UXShipComponent::RotationAccelerationSpeed' has a wrong offset!");
static_assert(offsetof(UXShipComponent, RotationBrakingSpeed) == 0x000110, "Member 'UXShipComponent::RotationBrakingSpeed' has a wrong offset!");
static_assert(offsetof(UXShipComponent, bMultiplyRotationBySpeed) == 0x000114, "Member 'UXShipComponent::bMultiplyRotationBySpeed' has a wrong offset!");
static_assert(offsetof(UXShipComponent, SpeedForMaxRotation) == 0x000118, "Member 'UXShipComponent::SpeedForMaxRotation' has a wrong offset!");
static_assert(offsetof(UXShipComponent, bEnableStabilization) == 0x00011C, "Member 'UXShipComponent::bEnableStabilization' has a wrong offset!");
static_assert(offsetof(UXShipComponent, bEnableStabilizationInAir) == 0x00011D, "Member 'UXShipComponent::bEnableStabilizationInAir' has a wrong offset!");
static_assert(offsetof(UXShipComponent, InAirAngularStabilizationSpeed) == 0x000120, "Member 'UXShipComponent::InAirAngularStabilizationSpeed' has a wrong offset!");
static_assert(offsetof(UXShipComponent, InAirAngularStabilizationDamping) == 0x000124, "Member 'UXShipComponent::InAirAngularStabilizationDamping' has a wrong offset!");
static_assert(offsetof(UXShipComponent, AngularStabilizationSpeed) == 0x000128, "Member 'UXShipComponent::AngularStabilizationSpeed' has a wrong offset!");
static_assert(offsetof(UXShipComponent, AngularStabilizationDamping) == 0x00012C, "Member 'UXShipComponent::AngularStabilizationDamping' has a wrong offset!");
static_assert(offsetof(UXShipComponent, LinearStabilizationDamping) == 0x000130, "Member 'UXShipComponent::LinearStabilizationDamping' has a wrong offset!");
static_assert(offsetof(UXShipComponent, bSyncMovement) == 0x000134, "Member 'UXShipComponent::bSyncMovement' has a wrong offset!");
static_assert(offsetof(UXShipComponent, SendPacketInterval) == 0x000138, "Member 'UXShipComponent::SendPacketInterval' has a wrong offset!");
static_assert(offsetof(UXShipComponent, ClientSyncSpeed) == 0x00013C, "Member 'UXShipComponent::ClientSyncSpeed' has a wrong offset!");
static_assert(offsetof(UXShipComponent, RepXShipMovement) == 0x000140, "Member 'UXShipComponent::RepXShipMovement' has a wrong offset!");
static_assert(offsetof(UXShipComponent, SendPacketIntervalLocal) == 0x000170, "Member 'UXShipComponent::SendPacketIntervalLocal' has a wrong offset!");
static_assert(offsetof(UXShipComponent, MovementInput) == 0x000174, "Member 'UXShipComponent::MovementInput' has a wrong offset!");
static_assert(offsetof(UXShipComponent, RotationInput) == 0x000180, "Member 'UXShipComponent::RotationInput' has a wrong offset!");

// Class XShip.XShipPawn
// 0x0018 (0x0298 - 0x0280)
class AXShipPawn final : public APawn
{
public:
	class UBoxComponent*                          RootBoxComponent;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        ArrowComponent;                                    // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UXShipComponent*                        XShipComponent;                                    // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddRotationInput(float ScaleValue);
	float GetWaterDensity(const struct FVector2D& InLocation);
	struct FVector GetWaterNormal(const struct FVector2D& InLocation);
	float GetWaterWorldZ(const struct FVector2D& InLocation);
	class UXShipComponent* GetXShipComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XShipPawn">();
	}
	static class AXShipPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AXShipPawn>();
	}
};
static_assert(alignof(AXShipPawn) == 0x000008, "Wrong alignment on AXShipPawn");
static_assert(sizeof(AXShipPawn) == 0x000298, "Wrong size on AXShipPawn");
static_assert(offsetof(AXShipPawn, RootBoxComponent) == 0x000280, "Member 'AXShipPawn::RootBoxComponent' has a wrong offset!");
static_assert(offsetof(AXShipPawn, ArrowComponent) == 0x000288, "Member 'AXShipPawn::ArrowComponent' has a wrong offset!");
static_assert(offsetof(AXShipPawn, XShipComponent) == 0x000290, "Member 'AXShipPawn::XShipComponent' has a wrong offset!");

}

