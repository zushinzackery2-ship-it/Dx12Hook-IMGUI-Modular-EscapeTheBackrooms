#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Hound

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Hound.BP_Hound_C
// 0x00A0 (0x0560 - 0x04C0)
class ABP_Hound_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio1;                                            // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EyeSight;                                          // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       KillPlayer;                                        // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldMove;                                        // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanAttack;                                         // 0x04F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsTargetting;                                      // 0x04F2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_4F3[0x5];                                      // 0x04F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RetreatActor;                                      // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroyOnRetreat;                                  // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldRoam;                                        // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_502[0xE];                                      // 0x0502(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RetreatTransform;                                  // 0x0510(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UBehaviorTree*                          BTAsset;                                           // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanChase;                                          // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549[0x3];                                      // 0x0549(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SprintSpeed;                                       // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldCheckDelete;                                 // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldRemoveInNormal;                              // 0x0551(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanStun;                                           // 0x0552(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRetreating;                                      // 0x0553(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanHowl;                                           // 0x0554(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_BP_Hound(int32 EntryPoint);
	void ResetHowl();
	void MC_Stop(float Delay);
	void BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_Hound_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ResetBlinded();
	void BlindHound();
	void ResetRetreat();
	void Retreat();
	void MC_KillAnimation(class ABPCharacter_Demo_C* Target);
	void PlayBlinded();
	void PlayHowl();
	void Jumpscare(class ABPCharacter_Demo_C* Player);
	void MC_KillSound();
	void AttackPlayer(class ABPCharacter_Demo_C* Player);
	void StopSound();
	void StartSound();
	void ReceiveBeginPlay();
	void OnSuccess_D233563A4C47828202C239AEFB9124B7(EPathFollowingResult MovementResult);
	void OnFail_D233563A4C47828202C239AEFB9124B7(EPathFollowingResult MovementResult);
	void OnCompleted_8DA5DC9D4777A3A447018893354E8C0B(class FName NotifyName);
	void OnBlendOut_8DA5DC9D4777A3A447018893354E8C0B(class FName NotifyName);
	void OnInterrupted_8DA5DC9D4777A3A447018893354E8C0B(class FName NotifyName);
	void OnNotifyBegin_8DA5DC9D4777A3A447018893354E8C0B(class FName NotifyName);
	void OnNotifyEnd_8DA5DC9D4777A3A447018893354E8C0B(class FName NotifyName);
	void OnCompleted_61765EC24FF4E248EA3B909C032488D4(class FName NotifyName);
	void OnBlendOut_61765EC24FF4E248EA3B909C032488D4(class FName NotifyName);
	void OnInterrupted_61765EC24FF4E248EA3B909C032488D4(class FName NotifyName);
	void OnNotifyBegin_61765EC24FF4E248EA3B909C032488D4(class FName NotifyName);
	void OnNotifyEnd_61765EC24FF4E248EA3B909C032488D4(class FName NotifyName);
	void LookAtEntity(class ABPCharacter_Demo_C* Target);
	void StopMovement();
	void OnRep_IsTargetting();
	void LookAtTarget(class ABPCharacter_Demo_C* Target);
	void CanSeePlayer(class ABPCharacter_Demo_C* Target, bool* CanSee);
	void GetStunDuration(float* Delay);
	void OnRep_CanHowl();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Hound_C">();
	}
	static class ABP_Hound_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Hound_C>();
	}
};
static_assert(alignof(ABP_Hound_C) == 0x000010, "Wrong alignment on ABP_Hound_C");
static_assert(sizeof(ABP_Hound_C) == 0x000560, "Wrong size on ABP_Hound_C");
static_assert(offsetof(ABP_Hound_C, UberGraphFrame) == 0x0004C0, "Member 'ABP_Hound_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, Audio1) == 0x0004C8, "Member 'ABP_Hound_C::Audio1' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, EyeSight) == 0x0004D0, "Member 'ABP_Hound_C::EyeSight' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, Box) == 0x0004D8, "Member 'ABP_Hound_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, KillPlayer) == 0x0004E0, "Member 'ABP_Hound_C::KillPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, Audio) == 0x0004E8, "Member 'ABP_Hound_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, ShouldMove) == 0x0004F0, "Member 'ABP_Hound_C::ShouldMove' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, CanAttack) == 0x0004F1, "Member 'ABP_Hound_C::CanAttack' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, IsTargetting) == 0x0004F2, "Member 'ABP_Hound_C::IsTargetting' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, RetreatActor) == 0x0004F8, "Member 'ABP_Hound_C::RetreatActor' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, DestroyOnRetreat) == 0x000500, "Member 'ABP_Hound_C::DestroyOnRetreat' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, ShouldRoam) == 0x000501, "Member 'ABP_Hound_C::ShouldRoam' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, RetreatTransform) == 0x000510, "Member 'ABP_Hound_C::RetreatTransform' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, BTAsset) == 0x000540, "Member 'ABP_Hound_C::BTAsset' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, CanChase) == 0x000548, "Member 'ABP_Hound_C::CanChase' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, SprintSpeed) == 0x00054C, "Member 'ABP_Hound_C::SprintSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, ShouldCheckDelete) == 0x000550, "Member 'ABP_Hound_C::ShouldCheckDelete' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, ShouldRemoveInNormal) == 0x000551, "Member 'ABP_Hound_C::ShouldRemoveInNormal' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, CanStun) == 0x000552, "Member 'ABP_Hound_C::CanStun' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, IsRetreating) == 0x000553, "Member 'ABP_Hound_C::IsRetreating' has a wrong offset!");
static_assert(offsetof(ABP_Hound_C, CanHowl) == 0x000554, "Member 'ABP_Hound_C::CanHowl' has a wrong offset!");

}

