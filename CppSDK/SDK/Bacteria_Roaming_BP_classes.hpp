#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bacteria_Roaming_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Bacteria_Roaming_BP.Bacteria_Roaming_BP_C
// 0x00A0 (0x0560 - 0x04C0)
class ABacteria_Roaming_BP_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        EyeSight;                                          // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       KillPlayer;                                        // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldMove;                                        // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinutesElapsed;                                    // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAttack;                                         // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldReset;                                       // 0x04E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EA[0x2];                                      // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartingLocation;                                  // 0x04EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ShakeTimer;                                        // 0x04F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSoundTime;                                  // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ShakeTimes;                                        // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           RotateTimer;                                       // 0x0518(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Bacteria_RoomPoint_C*>       RoamingPoints;                                     // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	class ABP_Bacteria_RoomPoint_C*               CurrentPoint;                                      // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RoamingTeleport;                                   // 0x0538(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TeleportTimer;                                     // 0x0548(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle;                                       // 0x0550(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ReduceVision;                                      // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          AutoPatrol;                                        // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RandomPatrolLocation;                              // 0x055A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Bacteria_Roaming_BP(int32 EntryPoint);
	void Activate();
	void BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UpdateToPatrol();
	void SetSpeed(float Speed);
	void SetShouldPatrol();
	void HasSeenPlayer();
	void MC_KillAnimation();
	void MC_KillSound();
	void AttackPlayer(class ABPCharacter_Demo_C* Player);
	void FaceClosestPlayer();
	void StopSound();
	void StartSound();
	void ReceiveBeginPlay();
	void UpdateSpeed();
	void GetClosestPlayer(class ABPCharacter_Demo_C** Closest);
	void LookAtEntity(class ABPCharacter_Demo_C* Target);
	void StopMovement();
	void CheckShakeTime();
	void GetRoamLocation(class ABP_Bacteria_RoomPoint_C** RoamPoint);
	void TeleportToRoam();
	void CanSeePlayer(class ABPCharacter_Demo_C* Target, bool* CanSee);
	void CheckPlayersTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Bacteria_Roaming_BP_C">();
	}
	static class ABacteria_Roaming_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABacteria_Roaming_BP_C>();
	}
};
static_assert(alignof(ABacteria_Roaming_BP_C) == 0x000010, "Wrong alignment on ABacteria_Roaming_BP_C");
static_assert(sizeof(ABacteria_Roaming_BP_C) == 0x000560, "Wrong size on ABacteria_Roaming_BP_C");
static_assert(offsetof(ABacteria_Roaming_BP_C, UberGraphFrame) == 0x0004C0, "Member 'ABacteria_Roaming_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, EyeSight) == 0x0004C8, "Member 'ABacteria_Roaming_BP_C::EyeSight' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, KillPlayer) == 0x0004D0, "Member 'ABacteria_Roaming_BP_C::KillPlayer' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, Audio) == 0x0004D8, "Member 'ABacteria_Roaming_BP_C::Audio' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, ShouldMove) == 0x0004E0, "Member 'ABacteria_Roaming_BP_C::ShouldMove' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, MinutesElapsed) == 0x0004E4, "Member 'ABacteria_Roaming_BP_C::MinutesElapsed' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, CanAttack) == 0x0004E8, "Member 'ABacteria_Roaming_BP_C::CanAttack' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, ShouldReset) == 0x0004E9, "Member 'ABacteria_Roaming_BP_C::ShouldReset' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, StartingLocation) == 0x0004EC, "Member 'ABacteria_Roaming_BP_C::StartingLocation' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, ShakeTimer) == 0x0004F8, "Member 'ABacteria_Roaming_BP_C::ShakeTimer' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, CurrentSoundTime) == 0x000500, "Member 'ABacteria_Roaming_BP_C::CurrentSoundTime' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, ShakeTimes) == 0x000508, "Member 'ABacteria_Roaming_BP_C::ShakeTimes' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, RotateTimer) == 0x000518, "Member 'ABacteria_Roaming_BP_C::RotateTimer' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, RoamingPoints) == 0x000520, "Member 'ABacteria_Roaming_BP_C::RoamingPoints' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, CurrentPoint) == 0x000530, "Member 'ABacteria_Roaming_BP_C::CurrentPoint' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, RoamingTeleport) == 0x000538, "Member 'ABacteria_Roaming_BP_C::RoamingTeleport' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, TeleportTimer) == 0x000548, "Member 'ABacteria_Roaming_BP_C::TeleportTimer' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, TimerHandle) == 0x000550, "Member 'ABacteria_Roaming_BP_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, ReduceVision) == 0x000558, "Member 'ABacteria_Roaming_BP_C::ReduceVision' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, AutoPatrol) == 0x000559, "Member 'ABacteria_Roaming_BP_C::AutoPatrol' has a wrong offset!");
static_assert(offsetof(ABacteria_Roaming_BP_C, RandomPatrolLocation) == 0x00055A, "Member 'ABacteria_Roaming_BP_C::RandomPatrolLocation' has a wrong offset!");

}

