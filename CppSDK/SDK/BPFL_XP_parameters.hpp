#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_XP

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPFL_XP.BPFL_XP_C.AddEXP
// 0x0030 (0x0030 - 0x0000)
struct BPFL_XP_C_AddEXP final
{
public:
	float                                         XP;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddXP_ReturnValue;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MyGameInstance_C*                   K2Node_DynamicCast_AsBP_My_Game_Instance;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_XP_C_AddEXP) == 0x000008, "Wrong alignment on BPFL_XP_C_AddEXP");
static_assert(sizeof(BPFL_XP_C_AddEXP) == 0x000030, "Wrong size on BPFL_XP_C_AddEXP");
static_assert(offsetof(BPFL_XP_C_AddEXP, XP) == 0x000000, "Member 'BPFL_XP_C_AddEXP::XP' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_AddEXP, __WorldContext) == 0x000008, "Member 'BPFL_XP_C_AddEXP::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_AddEXP, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BPFL_XP_C_AddEXP::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_AddEXP, CallFunc_AddXP_ReturnValue) == 0x000018, "Member 'BPFL_XP_C_AddEXP::CallFunc_AddXP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_AddEXP, K2Node_DynamicCast_AsBP_My_Game_Instance) == 0x000020, "Member 'BPFL_XP_C_AddEXP::K2Node_DynamicCast_AsBP_My_Game_Instance' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_AddEXP, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPFL_XP_C_AddEXP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_XP.BPFL_XP_C.LoadEXP
// 0x0028 (0x0028 - 0x0000)
struct BPFL_XP_C_LoadEXP final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Exp;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LoadXP_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MyGameInstance_C*                   K2Node_DynamicCast_AsBP_My_Game_Instance;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_XP_C_LoadEXP) == 0x000008, "Wrong alignment on BPFL_XP_C_LoadEXP");
static_assert(sizeof(BPFL_XP_C_LoadEXP) == 0x000028, "Wrong size on BPFL_XP_C_LoadEXP");
static_assert(offsetof(BPFL_XP_C_LoadEXP, __WorldContext) == 0x000000, "Member 'BPFL_XP_C_LoadEXP::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadEXP, Exp) == 0x000008, "Member 'BPFL_XP_C_LoadEXP::Exp' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadEXP, CallFunc_LoadXP_ReturnValue) == 0x00000C, "Member 'BPFL_XP_C_LoadEXP::CallFunc_LoadXP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadEXP, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BPFL_XP_C_LoadEXP::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadEXP, K2Node_DynamicCast_AsBP_My_Game_Instance) == 0x000018, "Member 'BPFL_XP_C_LoadEXP::K2Node_DynamicCast_AsBP_My_Game_Instance' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadEXP, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPFL_XP_C_LoadEXP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_XP.BPFL_XP_C.LoadLevelFromXP
// 0x0038 (0x0038 - 0x0000)
struct BPFL_XP_C_LoadLevelFromXP final
{
public:
	int32                                         XP;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VisualLevel;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XPConst;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_XP_C_LoadLevelFromXP) == 0x000008, "Wrong alignment on BPFL_XP_C_LoadLevelFromXP");
static_assert(sizeof(BPFL_XP_C_LoadLevelFromXP) == 0x000038, "Wrong size on BPFL_XP_C_LoadLevelFromXP");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, XP) == 0x000000, "Member 'BPFL_XP_C_LoadLevelFromXP::XP' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, __WorldContext) == 0x000008, "Member 'BPFL_XP_C_LoadLevelFromXP::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, Level) == 0x000010, "Member 'BPFL_XP_C_LoadLevelFromXP::Level' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, VisualLevel) == 0x000014, "Member 'BPFL_XP_C_LoadLevelFromXP::VisualLevel' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, XPConst) == 0x000018, "Member 'BPFL_XP_C_LoadLevelFromXP::XPConst' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00001C, "Member 'BPFL_XP_C_LoadLevelFromXP::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, CallFunc_Sqrt_ReturnValue) == 0x000020, "Member 'BPFL_XP_C_LoadLevelFromXP::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'BPFL_XP_C_LoadLevelFromXP::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, CallFunc_FTrunc_ReturnValue) == 0x000028, "Member 'BPFL_XP_C_LoadLevelFromXP::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BPFL_XP_C_LoadLevelFromXP::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_LoadLevelFromXP, CallFunc_Clamp_ReturnValue) == 0x000030, "Member 'BPFL_XP_C_LoadLevelFromXP::CallFunc_Clamp_ReturnValue' has a wrong offset!");

// Function BPFL_XP.BPFL_XP_C.CalculateXPNeededForNextLevel
// 0x0058 (0x0058 - 0x0000)
struct BPFL_XP_C_CalculateXPNeededForNextLevel final
{
public:
	int32                                         CurrentXP;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLevel;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLevelBaseXP;                                // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextLevelXP;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XPNeeded;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XPConst;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoadLevelFromXP_Level;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoadLevelFromXP_VisualLevel;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_XP_C_CalculateXPNeededForNextLevel) == 0x000008, "Wrong alignment on BPFL_XP_C_CalculateXPNeededForNextLevel");
static_assert(sizeof(BPFL_XP_C_CalculateXPNeededForNextLevel) == 0x000058, "Wrong size on BPFL_XP_C_CalculateXPNeededForNextLevel");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CurrentXP) == 0x000000, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CurrentXP' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, __WorldContext) == 0x000008, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CurrentLevel) == 0x000010, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CurrentLevel' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CurrentLevelBaseXP) == 0x000014, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CurrentLevelBaseXP' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, NextLevelXP) == 0x000018, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::NextLevelXP' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, XPNeeded) == 0x00001C, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::XPNeeded' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, XPConst) == 0x000020, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::XPConst' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_LoadLevelFromXP_Level) == 0x000024, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_LoadLevelFromXP_Level' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_LoadLevelFromXP_VisualLevel) == 0x000028, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_LoadLevelFromXP_VisualLevel' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00002C, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000034, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000038, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_FTrunc_ReturnValue) == 0x000044, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1) == 0x000048, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_FTrunc_ReturnValue_1) == 0x00004C, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_XP_C_CalculateXPNeededForNextLevel, CallFunc_Subtract_IntInt_ReturnValue) == 0x000050, "Member 'BPFL_XP_C_CalculateXPNeededForNextLevel::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

}

