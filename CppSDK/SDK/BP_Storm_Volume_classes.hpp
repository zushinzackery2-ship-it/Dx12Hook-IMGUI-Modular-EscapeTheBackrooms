#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Storm_Volume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Storm_Volume.BP_Storm_Volume_C
// 0x0020 (0x0248 - 0x0228)
class ABP_Storm_Volume_C final : public ATriggerBox
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Ocean_Manager_C*                    OceanManager;                                      // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Lighthouse_C*                       Lighthouse;                                        // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Storm_Volume(int32 EntryPoint);
	void ResetStop();
	void ResetRising();
	void StopRising();
	void StartRising();
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Storm_Volume_C">();
	}
	static class ABP_Storm_Volume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Storm_Volume_C>();
	}
};
static_assert(alignof(ABP_Storm_Volume_C) == 0x000008, "Wrong alignment on ABP_Storm_Volume_C");
static_assert(sizeof(ABP_Storm_Volume_C) == 0x000248, "Wrong size on ABP_Storm_Volume_C");
static_assert(offsetof(ABP_Storm_Volume_C, UberGraphFrame) == 0x000228, "Member 'ABP_Storm_Volume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Storm_Volume_C, Audio) == 0x000230, "Member 'ABP_Storm_Volume_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_Storm_Volume_C, OceanManager) == 0x000238, "Member 'ABP_Storm_Volume_C::OceanManager' has a wrong offset!");
static_assert(offsetof(ABP_Storm_Volume_C, Lighthouse) == 0x000240, "Member 'ABP_Storm_Volume_C::Lighthouse' has a wrong offset!");

}

