#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_Swimming

#include "Basic.hpp"

#include "AC_Swimming_classes.hpp"
#include "AC_Swimming_parameters.hpp"


namespace SDK
{

// Function AC_Swimming.AC_Swimming_C.ExecuteUbergraph_AC_Swimming
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Swimming_C::ExecuteUbergraph_AC_Swimming(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "ExecuteUbergraph_AC_Swimming");

	Params::AC_Swimming_C_ExecuteUbergraph_AC_Swimming Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Swimming.AC_Swimming_C.Spawn swimming ambient particle
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::Spawn_swimming_ambient_particle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Spawn swimming ambient particle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.ToggleSurface
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::ToggleSurface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "ToggleSurface");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.ToggleUnderwater
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::ToggleUnderwater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "ToggleUnderwater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.MC_Swim
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::MC_Swim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "MC_Swim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.MC_Surface
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::MC_Surface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "MC_Surface");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UAC_Swimming_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Swimming_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "ReceiveTick");

	Params::AC_Swimming_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Swimming.AC_Swimming_C.OnMovementModeChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Swimming_C::OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "OnMovementModeChanged");

	Params::AC_Swimming_C_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Swimming.AC_Swimming_C.Spawn sound
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundBase*                       Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Swimming_C::Spawn_sound(class USoundBase* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Spawn sound");

	Params::AC_Swimming_C_Spawn_sound Parms{};

	Parms.Sound = Sound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Swimming.AC_Swimming_C.EventIsUnderwater
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUnderwater                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAC_Swimming_C::EventIsUnderwater(bool IsUnderwater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "EventIsUnderwater");

	Params::AC_Swimming_C_EventIsUnderwater Parms{};

	Parms.IsUnderwater = IsUnderwater;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Swimming.AC_Swimming_C.EventIsInWater
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsInWater                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAC_Swimming_C::EventIsInWater(bool IsInWater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "EventIsInWater");

	Params::AC_Swimming_C_EventIsInWater Parms{};

	Parms.IsInWater = IsInWater;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Swimming.AC_Swimming_C.Set Sprint speed on client
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::Set_Sprint_speed_on_client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Set Sprint speed on client");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.Set Sprint speed on server
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::Set_Sprint_speed_on_server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Set Sprint speed on server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.Set normal swim speed on client
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::Set_normal_swim_speed_on_client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Set normal swim speed on client");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.Set normal swim speed on server
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::Set_normal_swim_speed_on_server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Set normal swim speed on server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.Event normal swim
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::Event_normal_swim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Event normal swim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.Event Sprint swim
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::Event_Sprint_swim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Event Sprint swim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.Event switch diving mode
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::Event_switch_diving_mode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Event switch diving mode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.On Tick logic - Swimming
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::On_Tick_logic___Swimming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "On Tick logic - Swimming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.On Begin Play Logic - Swimming
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::On_Begin_Play_Logic___Swimming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "On Begin Play Logic - Swimming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.Start underwater ambient particle timer
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::Start_underwater_ambient_particle_timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Start underwater ambient particle timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.ReplicateRotationToServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  DesiredRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAC_Swimming_C::ReplicateRotationToServer(const struct FRotator& DesiredRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "ReplicateRotationToServer");

	Params::AC_Swimming_C_ReplicateRotationToServer Parms{};

	Parms.DesiredRotation = std::move(DesiredRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Swimming.AC_Swimming_C.unpause underwater ambient particle
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::unpause_underwater_ambient_particle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "unpause underwater ambient particle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.pause underwater ambient particle
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::pause_underwater_ambient_particle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "pause underwater ambient particle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.Destroy underwater ambient particle
// (BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::Destroy_underwater_ambient_particle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "Destroy underwater ambient particle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.SetSmoothCharacterRotationOnStrafeMovement
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::SetSmoothCharacterRotationOnStrafeMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "SetSmoothCharacterRotationOnStrafeMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.DiveMovementLogic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ScaleValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Swimming_C::DiveMovementLogic(float ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "DiveMovementLogic");

	Params::AC_Swimming_C_DiveMovementLogic Parms{};

	Parms.ScaleValue = ScaleValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Swimming.AC_Swimming_C.CustomDiveMovementLogic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ScaleValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Swimming_C::CustomDiveMovementLogic(float ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "CustomDiveMovementLogic");

	Params::AC_Swimming_C_CustomDiveMovementLogic Parms{};

	Parms.ScaleValue = ScaleValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Swimming.AC_Swimming_C.SwimUpMovementLogic
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::SwimUpMovementLogic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "SwimUpMovementLogic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Swimming.AC_Swimming_C.GetSwimSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Swimming_C::GetSwimSpeed(float* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "GetSwimSpeed");

	Params::AC_Swimming_C_GetSwimSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function AC_Swimming.AC_Swimming_C.GetSwimSprintSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Swimming_C::GetSwimSprintSpeed(float* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "GetSwimSprintSpeed");

	Params::AC_Swimming_C_GetSwimSprintSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function AC_Swimming.AC_Swimming_C.SwimDownMovementLogic
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_Swimming_C::SwimDownMovementLogic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Swimming_C", "SwimDownMovementLogic");

	UObject::ProcessEvent(Func, nullptr);
}

}

