#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hound_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Hound_AnimBP.Hound_AnimBP_C
// 0x0250 (0x0510 - 0x02C0)
class UHound_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x02F8(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x03E0(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0410(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x04C0(0x0048)()
	float                                         Speed;                                             // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Hound_AnimBP(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Hound_AnimBP_C">();
	}
	static class UHound_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHound_AnimBP_C>();
	}
};
static_assert(alignof(UHound_AnimBP_C) == 0x000010, "Wrong alignment on UHound_AnimBP_C");
static_assert(sizeof(UHound_AnimBP_C) == 0x000510, "Wrong size on UHound_AnimBP_C");
static_assert(offsetof(UHound_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UHound_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHound_AnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UHound_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UHound_AnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x0002F8, "Member 'UHound_AnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UHound_AnimBP_C, AnimGraphNode_StateResult) == 0x0003E0, "Member 'UHound_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UHound_AnimBP_C, AnimGraphNode_StateMachine) == 0x000410, "Member 'UHound_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UHound_AnimBP_C, AnimGraphNode_Slot) == 0x0004C0, "Member 'UHound_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UHound_AnimBP_C, Speed) == 0x000508, "Member 'UHound_AnimBP_C::Speed' has a wrong offset!");

}

