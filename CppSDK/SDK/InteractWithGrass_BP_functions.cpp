#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InteractWithGrass_BP

#include "Basic.hpp"

#include "InteractWithGrass_BP_classes.hpp"
#include "InteractWithGrass_BP_parameters.hpp"


namespace SDK
{

// Function InteractWithGrass_BP.InteractWithGrass_BP_C.ExecuteUbergraph_InteractWithGrass_BP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInteractWithGrass_BP_C::ExecuteUbergraph_InteractWithGrass_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "ExecuteUbergraph_InteractWithGrass_BP");

	Params::InteractWithGrass_BP_C_ExecuteUbergraph_InteractWithGrass_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.Start Interacting
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::Start_Interacting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "Start Interacting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.TurnON
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::TurnON()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "TurnON");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.TurnOFF
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::TurnOFF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "TurnOFF");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.DetectNearbyComponents
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::DetectNearbyComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "DetectNearbyComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.CheckIfComponentsStillNear
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::CheckIfComponentsStillNear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "CheckIfComponentsStillNear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.CheckIfShouldTurn_OFF_DispInteraction
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::CheckIfShouldTurn_OFF_DispInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "CheckIfShouldTurn_OFF_DispInteraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.CheckIfShouldTurn_ON_DispInteraction
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::CheckIfShouldTurn_ON_DispInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "CheckIfShouldTurn_ON_DispInteraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.UpdateMatInterParamForMainActor
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::UpdateMatInterParamForMainActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "UpdateMatInterParamForMainActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.UpdateMatInteractionParam
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::UpdateMatInteractionParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "UpdateMatInteractionParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.CheckIfShould_DISABLE_MatInteraction
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::CheckIfShould_DISABLE_MatInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "CheckIfShould_DISABLE_MatInteraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.CheckIfShould_ENABLE_MatInteraction
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::CheckIfShould_ENABLE_MatInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "CheckIfShould_ENABLE_MatInteraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.OnOwnerDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInteractWithGrass_BP_C::OnOwnerDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "OnOwnerDestroyed");

	Params::InteractWithGrass_BP_C_OnOwnerDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.FreeUpInteractionChannel
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::FreeUpInteractionChannel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "FreeUpInteractionChannel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.CheckNearbyGrass
// (BlueprintCallable, BlueprintEvent)

void UInteractWithGrass_BP_C::CheckNearbyGrass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "CheckNearbyGrass");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UInteractWithGrass_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InteractWithGrass_BP.InteractWithGrass_BP_C.IsInDistanceToViewTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InDistance                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   isInDistance                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float*                                  currentDistance                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInteractWithGrass_BP_C::IsInDistanceToViewTarget(float InDistance, bool* isInDistance, float* currentDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractWithGrass_BP_C", "IsInDistanceToViewTarget");

	Params::InteractWithGrass_BP_C_IsInDistanceToViewTarget Parms{};

	Parms.InDistance = InDistance;

	UObject::ProcessEvent(Func, &Parms);

	if (isInDistance != nullptr)
		*isInDistance = Parms.isInDistance;

	if (currentDistance != nullptr)
		*currentDistance = Parms.currentDistance;
}

}

