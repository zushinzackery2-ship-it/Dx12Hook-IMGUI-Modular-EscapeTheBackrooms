#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenInputPlugin

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum OpenInputPlugin.EVRActionHand
// NumValues: 0x0003
enum class EVRActionHand : uint8
{
	EActionHand_Left                         = 0,
	EActionHand_Right                        = 1,
	EActionHand_MAX                          = 2,
};

// Enum OpenInputPlugin.EVROpenVRSkeletonType
// NumValues: 0x0006
enum class EVROpenVRSkeletonType : uint8
{
	OVR_SkeletonType_UE4Default_Left         = 0,
	OVR_SkeletonType_UE4Default_Right        = 1,
	OVR_SkeletonType_OpenVRDefault_Left      = 2,
	OVR_SkeletonType_OpenVRDefault_Right     = 3,
	OVERSkeletonType_Custom                  = 4,
	EVROpenVRSkeletonType_MAX                = 5,
};

// Enum OpenInputPlugin.EVRSkeletalReplicationType
// NumValues: 0x0005
enum class EVRSkeletalReplicationType : uint8
{
	Rep_CurlOnly                             = 0,
	Rep_CurlAndSplay                         = 1,
	Rep_HardTransforms                       = 2,
	Rep_SteamVRCompressedTransforms          = 3,
	Rep_MAX                                  = 4,
};

// Enum OpenInputPlugin.EVROpenInputFingerIndexType
// NumValues: 0x000A
enum class EVROpenInputFingerIndexType : uint8
{
	VRFinger_Thumb                           = 0,
	VRFinger_Index                           = 1,
	VRFinger_Middle                          = 2,
	VRFinger_Ring                            = 3,
	VRFinger_Pinky                           = 4,
	VRFingerSplay_Thumb_Index                = 5,
	VRFingerSplay_Index_Middle               = 6,
	VRFingerSplay_Middle_Ring                = 7,
	VRFingerSplay_Ring_Pinky                 = 8,
	EVROpenInputFingerIndexType_MAX          = 9,
};

// Enum OpenInputPlugin.EVROpenInputSkeletalTrackingLevel
// NumValues: 0x0005
enum class EVROpenInputSkeletalTrackingLevel : uint8
{
	VRSkeletalTracking_Estimated             = 0,
	VRSkeletalTracking_Partial               = 1,
	VRSkeletalTracking_Full                  = 2,
	VRSkeletalTrackingLevel_Max              = 3,
	EVROpenInputSkeletalTrackingLevel_MAX    = 4,
};

// Enum OpenInputPlugin.EVROpenInputReferencePose
// NumValues: 0x0005
enum class EVROpenInputReferencePose : uint8
{
	VRSkeletalReferencePose_BindPose         = 0,
	VRSkeletalReferencePose_OpenHand         = 1,
	VRSkeletalReferencePose_Fist             = 2,
	VRSkeletalReferencePose_GripLimit        = 3,
	VRSkeletalReferencePose_MAX              = 4,
};

// Enum OpenInputPlugin.EVROpenInputBones
// NumValues: 0x0021
enum class EVROpenInputBones : uint8
{
	eBone_Root                               = 0,
	eBone_Wrist                              = 1,
	eBone_Thumb0                             = 2,
	eBone_Thumb1                             = 3,
	eBone_Thumb2                             = 4,
	eBone_Thumb3                             = 5,
	eBone_IndexFinger0                       = 6,
	eBone_IndexFinger1                       = 7,
	eBone_IndexFinger2                       = 8,
	eBone_IndexFinger3                       = 9,
	eBone_IndexFinger4                       = 10,
	eBone_MiddleFinger0                      = 11,
	eBone_MiddleFinger1                      = 12,
	eBone_MiddleFinger2                      = 13,
	eBone_MiddleFinger3                      = 14,
	eBone_MiddleFinger4                      = 15,
	eBone_RingFinger0                        = 16,
	eBone_RingFinger1                        = 17,
	eBone_RingFinger2                        = 18,
	eBone_RingFinger3                        = 19,
	eBone_RingFinger4                        = 20,
	eBone_PinkyFinger0                       = 21,
	eBone_PinkyFinger1                       = 22,
	eBone_PinkyFinger2                       = 23,
	eBone_PinkyFinger3                       = 24,
	eBone_PinkyFinger4                       = 25,
	eBone_Aux_Thumb                          = 26,
	eBone_Aux_IndexFinger                    = 27,
	eBone_Aux_MiddleFinger                   = 28,
	eBone_Aux_RingFinger                     = 29,
	eBone_Aux_PinkyFinger                    = 30,
	eBone_Count                              = 31,
	eBone_MAX                                = 32,
};

// ScriptStruct OpenInputPlugin.BPOpenVRActionSkeletalData
// 0x0050 (0x0050 - 0x0000)
struct FBPOpenVRActionSkeletalData final
{
public:
	EVRActionHand                                 TargetHand;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDeformingMesh;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrorHand;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrorLeftRight;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     SkeletalTransforms;                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AdditionTransform;                                 // 0x0020(0x0030)(Edit, BlueprintVisible, IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPOpenVRActionSkeletalData) == 0x000010, "Wrong alignment on FBPOpenVRActionSkeletalData");
static_assert(sizeof(FBPOpenVRActionSkeletalData) == 0x000050, "Wrong size on FBPOpenVRActionSkeletalData");
static_assert(offsetof(FBPOpenVRActionSkeletalData, TargetHand) == 0x000000, "Member 'FBPOpenVRActionSkeletalData::TargetHand' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionSkeletalData, bAllowDeformingMesh) == 0x000001, "Member 'FBPOpenVRActionSkeletalData::bAllowDeformingMesh' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionSkeletalData, bMirrorHand) == 0x000002, "Member 'FBPOpenVRActionSkeletalData::bMirrorHand' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionSkeletalData, bMirrorLeftRight) == 0x000003, "Member 'FBPOpenVRActionSkeletalData::bMirrorLeftRight' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionSkeletalData, SkeletalTransforms) == 0x000008, "Member 'FBPOpenVRActionSkeletalData::SkeletalTransforms' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionSkeletalData, AdditionTransform) == 0x000020, "Member 'FBPOpenVRActionSkeletalData::AdditionTransform' has a wrong offset!");

// ScriptStruct OpenInputPlugin.BPOpenVRSkeletalPair
// 0x0020 (0x0020 - 0x0000)
struct FBPOpenVRSkeletalPair final
{
public:
	EVROpenInputBones                             OpenVRBone;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneToTarget;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x14];                                       // 0x000C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBPOpenVRSkeletalPair) == 0x000004, "Wrong alignment on FBPOpenVRSkeletalPair");
static_assert(sizeof(FBPOpenVRSkeletalPair) == 0x000020, "Wrong size on FBPOpenVRSkeletalPair");
static_assert(offsetof(FBPOpenVRSkeletalPair, OpenVRBone) == 0x000000, "Member 'FBPOpenVRSkeletalPair::OpenVRBone' has a wrong offset!");
static_assert(offsetof(FBPOpenVRSkeletalPair, BoneToTarget) == 0x000004, "Member 'FBPOpenVRSkeletalPair::BoneToTarget' has a wrong offset!");

// ScriptStruct OpenInputPlugin.BPSkeletalMappingData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FBPSkeletalMappingData final
{
public:
	TArray<struct FBPOpenVRSkeletalPair>          BonePairs;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMergeMissingBonesUE4;                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVRActionHand                                 TargetHand;                                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2E];                                      // 0x0012(0x002E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBPSkeletalMappingData) == 0x000010, "Wrong alignment on FBPSkeletalMappingData");
static_assert(sizeof(FBPSkeletalMappingData) == 0x000040, "Wrong size on FBPSkeletalMappingData");
static_assert(offsetof(FBPSkeletalMappingData, BonePairs) == 0x000000, "Member 'FBPSkeletalMappingData::BonePairs' has a wrong offset!");
static_assert(offsetof(FBPSkeletalMappingData, bMergeMissingBonesUE4) == 0x000010, "Member 'FBPSkeletalMappingData::bMergeMissingBonesUE4' has a wrong offset!");
static_assert(offsetof(FBPSkeletalMappingData, TargetHand) == 0x000011, "Member 'FBPSkeletalMappingData::TargetHand' has a wrong offset!");

// ScriptStruct OpenInputPlugin.AnimNode_ApplyOpenInputTransform
// 0x00A8 (0x0170 - 0x00C8)
struct FAnimNode_ApplyOpenInputTransform final : public FAnimNode_SkeletalControlBase
{
public:
	EVROpenVRSkeletonType                         SkeletonType;                                      // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipRootBone;                                     // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyApplyWristTransform;                          // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPOpenVRActionSkeletalData            OptionalStoredActionInfo;                          // 0x00D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBPSkeletalMappingData                 MappedBonePairs;                                   // 0x0120(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x10];                                     // 0x0160(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ApplyOpenInputTransform) == 0x000010, "Wrong alignment on FAnimNode_ApplyOpenInputTransform");
static_assert(sizeof(FAnimNode_ApplyOpenInputTransform) == 0x000170, "Wrong size on FAnimNode_ApplyOpenInputTransform");
static_assert(offsetof(FAnimNode_ApplyOpenInputTransform, SkeletonType) == 0x0000C8, "Member 'FAnimNode_ApplyOpenInputTransform::SkeletonType' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyOpenInputTransform, bSkipRootBone) == 0x0000C9, "Member 'FAnimNode_ApplyOpenInputTransform::bSkipRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyOpenInputTransform, bOnlyApplyWristTransform) == 0x0000CA, "Member 'FAnimNode_ApplyOpenInputTransform::bOnlyApplyWristTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyOpenInputTransform, OptionalStoredActionInfo) == 0x0000D0, "Member 'FAnimNode_ApplyOpenInputTransform::OptionalStoredActionInfo' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyOpenInputTransform, MappedBonePairs) == 0x000120, "Member 'FAnimNode_ApplyOpenInputTransform::MappedBonePairs' has a wrong offset!");

// ScriptStruct OpenInputPlugin.BPOpenVRGesturePoseData
// 0x0020 (0x0020 - 0x0000)
struct FBPOpenVRGesturePoseData final
{
public:
	TArray<float>                                 PoseFingerCurls;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	TArray<float>                                 PoseFingerSplays;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPOpenVRGesturePoseData) == 0x000008, "Wrong alignment on FBPOpenVRGesturePoseData");
static_assert(sizeof(FBPOpenVRGesturePoseData) == 0x000020, "Wrong size on FBPOpenVRGesturePoseData");
static_assert(offsetof(FBPOpenVRGesturePoseData, PoseFingerCurls) == 0x000000, "Member 'FBPOpenVRGesturePoseData::PoseFingerCurls' has a wrong offset!");
static_assert(offsetof(FBPOpenVRGesturePoseData, PoseFingerSplays) == 0x000010, "Member 'FBPOpenVRGesturePoseData::PoseFingerSplays' has a wrong offset!");

// ScriptStruct OpenInputPlugin.BPSkeletalRepContainer
// 0x0058 (0x0058 - 0x0000)
struct FBPSkeletalRepContainer final
{
public:
	EVRActionHand                                 TargetHand;                                        // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVRSkeletalReplicationType                    ReplicationType;                                   // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPOpenVRGesturePoseData               PoseFingerData;                                    // 0x0008(0x0020)(Transient, RepSkip, NativeAccessSpecifierPublic)
	bool                                          bAllowDeformingMesh;                               // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     SkeletalTransforms;                                // 0x0030(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	uint8                                         BoneCount;                                         // 0x0040(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CompressedTransforms;                              // 0x0048(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPSkeletalRepContainer) == 0x000008, "Wrong alignment on FBPSkeletalRepContainer");
static_assert(sizeof(FBPSkeletalRepContainer) == 0x000058, "Wrong size on FBPSkeletalRepContainer");
static_assert(offsetof(FBPSkeletalRepContainer, TargetHand) == 0x000000, "Member 'FBPSkeletalRepContainer::TargetHand' has a wrong offset!");
static_assert(offsetof(FBPSkeletalRepContainer, ReplicationType) == 0x000001, "Member 'FBPSkeletalRepContainer::ReplicationType' has a wrong offset!");
static_assert(offsetof(FBPSkeletalRepContainer, PoseFingerData) == 0x000008, "Member 'FBPSkeletalRepContainer::PoseFingerData' has a wrong offset!");
static_assert(offsetof(FBPSkeletalRepContainer, bAllowDeformingMesh) == 0x000028, "Member 'FBPSkeletalRepContainer::bAllowDeformingMesh' has a wrong offset!");
static_assert(offsetof(FBPSkeletalRepContainer, SkeletalTransforms) == 0x000030, "Member 'FBPSkeletalRepContainer::SkeletalTransforms' has a wrong offset!");
static_assert(offsetof(FBPSkeletalRepContainer, BoneCount) == 0x000040, "Member 'FBPSkeletalRepContainer::BoneCount' has a wrong offset!");
static_assert(offsetof(FBPSkeletalRepContainer, CompressedTransforms) == 0x000048, "Member 'FBPSkeletalRepContainer::CompressedTransforms' has a wrong offset!");

// ScriptStruct OpenInputPlugin.BPOpenVRActionInfo
// 0x00F0 (0x00F0 - 0x0000)
struct FBPOpenVRActionInfo final
{
public:
	bool                                          bGetSkeletalTransforms_WithController;             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActionName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPOpenVRActionSkeletalData            SkeletalData;                                      // 0x0020(0x0050)(Edit, BlueprintVisible, RepSkip, NativeAccessSpecifierPublic)
	TArray<int32>                                 BoneParentIndexes;                                 // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	struct FBPOpenVRGesturePoseData               PoseFingerData;                                    // 0x0080(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, RepSkip, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     OldSkeletalTransforms;                             // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	bool                                          bHasValidData;                                     // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVROpenInputSkeletalTrackingLevel             SkeletalTrackingLevel;                             // 0x00B1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x1E];                                      // 0x00B2(0x001E)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CompressedTransforms;                              // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        CompressedSize;                                    // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          BoneCount;                                         // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0xB];                                       // 0x00E5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBPOpenVRActionInfo) == 0x000010, "Wrong alignment on FBPOpenVRActionInfo");
static_assert(sizeof(FBPOpenVRActionInfo) == 0x0000F0, "Wrong size on FBPOpenVRActionInfo");
static_assert(offsetof(FBPOpenVRActionInfo, bGetSkeletalTransforms_WithController) == 0x000000, "Member 'FBPOpenVRActionInfo::bGetSkeletalTransforms_WithController' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionInfo, ActionName) == 0x000008, "Member 'FBPOpenVRActionInfo::ActionName' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionInfo, SkeletalData) == 0x000020, "Member 'FBPOpenVRActionInfo::SkeletalData' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionInfo, BoneParentIndexes) == 0x000070, "Member 'FBPOpenVRActionInfo::BoneParentIndexes' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionInfo, PoseFingerData) == 0x000080, "Member 'FBPOpenVRActionInfo::PoseFingerData' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionInfo, OldSkeletalTransforms) == 0x0000A0, "Member 'FBPOpenVRActionInfo::OldSkeletalTransforms' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionInfo, bHasValidData) == 0x0000B0, "Member 'FBPOpenVRActionInfo::bHasValidData' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionInfo, SkeletalTrackingLevel) == 0x0000B1, "Member 'FBPOpenVRActionInfo::SkeletalTrackingLevel' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionInfo, CompressedTransforms) == 0x0000D0, "Member 'FBPOpenVRActionInfo::CompressedTransforms' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionInfo, CompressedSize) == 0x0000E0, "Member 'FBPOpenVRActionInfo::CompressedSize' has a wrong offset!");
static_assert(offsetof(FBPOpenVRActionInfo, BoneCount) == 0x0000E4, "Member 'FBPOpenVRActionInfo::BoneCount' has a wrong offset!");

// ScriptStruct OpenInputPlugin.BPOpenVRActionHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FBPOpenVRActionHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBPOpenVRActionHandle) == 0x000008, "Wrong alignment on FBPOpenVRActionHandle");
static_assert(sizeof(FBPOpenVRActionHandle) == 0x000008, "Wrong size on FBPOpenVRActionHandle");

// ScriptStruct OpenInputPlugin.OpenInputAnimInstanceProxy
// 0x0020 (0x0790 - 0x0770)
struct FOpenInputAnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_770[0x20];                                     // 0x0770(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOpenInputAnimInstanceProxy) == 0x000010, "Wrong alignment on FOpenInputAnimInstanceProxy");
static_assert(sizeof(FOpenInputAnimInstanceProxy) == 0x000790, "Wrong size on FOpenInputAnimInstanceProxy");

// ScriptStruct OpenInputPlugin.OpenInputGestureFingerPosition
// 0x000C (0x000C - 0x0000)
struct FOpenInputGestureFingerPosition final
{
public:
	EVROpenInputFingerIndexType                   IndexType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOpenInputGestureFingerPosition) == 0x000004, "Wrong alignment on FOpenInputGestureFingerPosition");
static_assert(sizeof(FOpenInputGestureFingerPosition) == 0x00000C, "Wrong size on FOpenInputGestureFingerPosition");
static_assert(offsetof(FOpenInputGestureFingerPosition, IndexType) == 0x000000, "Member 'FOpenInputGestureFingerPosition::IndexType' has a wrong offset!");
static_assert(offsetof(FOpenInputGestureFingerPosition, Value) == 0x000004, "Member 'FOpenInputGestureFingerPosition::Value' has a wrong offset!");
static_assert(offsetof(FOpenInputGestureFingerPosition, Threshold) == 0x000008, "Member 'FOpenInputGestureFingerPosition::Threshold' has a wrong offset!");

// ScriptStruct OpenInputPlugin.OpenInputGesture
// 0x0020 (0x0020 - 0x0000)
struct FOpenInputGesture final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOpenInputGestureFingerPosition> FingerValues;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseFingerCurlOnly;                                // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOpenInputGesture) == 0x000008, "Wrong alignment on FOpenInputGesture");
static_assert(sizeof(FOpenInputGesture) == 0x000020, "Wrong size on FOpenInputGesture");
static_assert(offsetof(FOpenInputGesture, Name) == 0x000000, "Member 'FOpenInputGesture::Name' has a wrong offset!");
static_assert(offsetof(FOpenInputGesture, FingerValues) == 0x000008, "Member 'FOpenInputGesture::FingerValues' has a wrong offset!");
static_assert(offsetof(FOpenInputGesture, bUseFingerCurlOnly) == 0x000018, "Member 'FOpenInputGesture::bUseFingerCurlOnly' has a wrong offset!");

}

