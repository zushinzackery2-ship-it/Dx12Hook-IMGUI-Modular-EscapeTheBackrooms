#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SmoothSyncPlugin

#include "Basic.hpp"

#include "SmoothSyncPlugin_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SmoothSyncPlugin.SmoothSync
// 0x02C0 (0x0370 - 0x00B0)
class alignas(0x10) USmoothSync final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x58];                                      // 0x00B0(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         interpolationBackTime;                             // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ExtrapolationMode                             ExtrapolationMode;                                 // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useExtrapolationTimeLimit;                         // 0x010D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         extrapolationTimeLimit;                            // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useExtrapolationDistanceLimit;                     // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         extrapolationDistanceLimit;                        // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         sendPositionThreshold;                             // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         sendRotationThreshold;                             // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         sendScaleThreshold;                                // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         sendVelocityThreshold;                             // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         sendAngularVelocityThreshold;                      // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         receivedPositionThreshold;                         // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         receivedRotationThreshold;                         // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         positionSnapThreshold;                             // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         rotationSnapThreshold;                             // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         scaleSnapThreshold;                                // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         timeSmoothing;                                     // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         positionLerpSpeed;                                 // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         rotationLerpSpeed;                                 // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         scaleLerpSpeed;                                    // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESyncMode                                     syncPosition;                                      // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESyncMode                                     syncRotation;                                      // 0x0155(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESyncMode                                     syncScale;                                         // 0x0156(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESyncMode                                     syncVelocity;                                      // 0x0157(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESyncMode                                     syncAngularVelocity;                               // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          syncMovementMode;                                  // 0x0159(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPositionCompressed;                              // 0x015A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isRotationCompressed;                              // 0x015B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isScaleCompressed;                                 // 0x015C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isVelocityCompressed;                              // 0x015D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAngularVelocityCompressed;                       // 0x015E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15F[0x1];                                      // 0x015F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         sendRate;                                          // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isUsingOriginRebasing;                             // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          alwaysSendOrigin;                                  // 0x0165(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          syncOwnershipChange;                               // 0x0166(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_167[0x91];                                     // 0x0167(0x0091)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        realComponentToSync;                               // 0x01F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_200[0x18];                                     // 0x0200(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationTime;                                 // 0x0218(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x134];                                    // 0x021C(0x0134)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         atRestPositionThreshold;                           // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         atRestRotationThreshold;                           // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x18];                                     // 0x0358(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void clearBuffer();
	void ClientSendsTransformToServer(const TArray<uint8>& Value);
	void enableSmoothSync(bool Enable);
	void forceStateSendNextFrame();
	void ServerSendsTransformToEveryone(const TArray<uint8>& Value);
	void setSceneComponentToSync(class USceneComponent* theComponent);
	void SmoothSyncEnableClientToServer(bool Enable);
	void SmoothSyncEnableServerToClients(bool Enable);
	void SmoothSyncTeleportClientToServer(const struct FVector& Position, const struct FVector& Rotation, const struct FVector& Scale, float tempOwnerTime);
	void SmoothSyncTeleportServerToClients(const struct FVector& Position, const struct FVector& Rotation, const struct FVector& Scale, float tempOwnerTime);
	void teleport();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmoothSync">();
	}
	static class USmoothSync* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmoothSync>();
	}
};
static_assert(alignof(USmoothSync) == 0x000010, "Wrong alignment on USmoothSync");
static_assert(sizeof(USmoothSync) == 0x000370, "Wrong size on USmoothSync");
static_assert(offsetof(USmoothSync, interpolationBackTime) == 0x000108, "Member 'USmoothSync::interpolationBackTime' has a wrong offset!");
static_assert(offsetof(USmoothSync, ExtrapolationMode) == 0x00010C, "Member 'USmoothSync::ExtrapolationMode' has a wrong offset!");
static_assert(offsetof(USmoothSync, useExtrapolationTimeLimit) == 0x00010D, "Member 'USmoothSync::useExtrapolationTimeLimit' has a wrong offset!");
static_assert(offsetof(USmoothSync, extrapolationTimeLimit) == 0x000110, "Member 'USmoothSync::extrapolationTimeLimit' has a wrong offset!");
static_assert(offsetof(USmoothSync, useExtrapolationDistanceLimit) == 0x000114, "Member 'USmoothSync::useExtrapolationDistanceLimit' has a wrong offset!");
static_assert(offsetof(USmoothSync, extrapolationDistanceLimit) == 0x000118, "Member 'USmoothSync::extrapolationDistanceLimit' has a wrong offset!");
static_assert(offsetof(USmoothSync, sendPositionThreshold) == 0x00011C, "Member 'USmoothSync::sendPositionThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, sendRotationThreshold) == 0x000120, "Member 'USmoothSync::sendRotationThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, sendScaleThreshold) == 0x000124, "Member 'USmoothSync::sendScaleThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, sendVelocityThreshold) == 0x000128, "Member 'USmoothSync::sendVelocityThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, sendAngularVelocityThreshold) == 0x00012C, "Member 'USmoothSync::sendAngularVelocityThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, receivedPositionThreshold) == 0x000130, "Member 'USmoothSync::receivedPositionThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, receivedRotationThreshold) == 0x000134, "Member 'USmoothSync::receivedRotationThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, positionSnapThreshold) == 0x000138, "Member 'USmoothSync::positionSnapThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, rotationSnapThreshold) == 0x00013C, "Member 'USmoothSync::rotationSnapThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, scaleSnapThreshold) == 0x000140, "Member 'USmoothSync::scaleSnapThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, timeSmoothing) == 0x000144, "Member 'USmoothSync::timeSmoothing' has a wrong offset!");
static_assert(offsetof(USmoothSync, positionLerpSpeed) == 0x000148, "Member 'USmoothSync::positionLerpSpeed' has a wrong offset!");
static_assert(offsetof(USmoothSync, rotationLerpSpeed) == 0x00014C, "Member 'USmoothSync::rotationLerpSpeed' has a wrong offset!");
static_assert(offsetof(USmoothSync, scaleLerpSpeed) == 0x000150, "Member 'USmoothSync::scaleLerpSpeed' has a wrong offset!");
static_assert(offsetof(USmoothSync, syncPosition) == 0x000154, "Member 'USmoothSync::syncPosition' has a wrong offset!");
static_assert(offsetof(USmoothSync, syncRotation) == 0x000155, "Member 'USmoothSync::syncRotation' has a wrong offset!");
static_assert(offsetof(USmoothSync, syncScale) == 0x000156, "Member 'USmoothSync::syncScale' has a wrong offset!");
static_assert(offsetof(USmoothSync, syncVelocity) == 0x000157, "Member 'USmoothSync::syncVelocity' has a wrong offset!");
static_assert(offsetof(USmoothSync, syncAngularVelocity) == 0x000158, "Member 'USmoothSync::syncAngularVelocity' has a wrong offset!");
static_assert(offsetof(USmoothSync, syncMovementMode) == 0x000159, "Member 'USmoothSync::syncMovementMode' has a wrong offset!");
static_assert(offsetof(USmoothSync, isPositionCompressed) == 0x00015A, "Member 'USmoothSync::isPositionCompressed' has a wrong offset!");
static_assert(offsetof(USmoothSync, isRotationCompressed) == 0x00015B, "Member 'USmoothSync::isRotationCompressed' has a wrong offset!");
static_assert(offsetof(USmoothSync, isScaleCompressed) == 0x00015C, "Member 'USmoothSync::isScaleCompressed' has a wrong offset!");
static_assert(offsetof(USmoothSync, isVelocityCompressed) == 0x00015D, "Member 'USmoothSync::isVelocityCompressed' has a wrong offset!");
static_assert(offsetof(USmoothSync, isAngularVelocityCompressed) == 0x00015E, "Member 'USmoothSync::isAngularVelocityCompressed' has a wrong offset!");
static_assert(offsetof(USmoothSync, sendRate) == 0x000160, "Member 'USmoothSync::sendRate' has a wrong offset!");
static_assert(offsetof(USmoothSync, isUsingOriginRebasing) == 0x000164, "Member 'USmoothSync::isUsingOriginRebasing' has a wrong offset!");
static_assert(offsetof(USmoothSync, alwaysSendOrigin) == 0x000165, "Member 'USmoothSync::alwaysSendOrigin' has a wrong offset!");
static_assert(offsetof(USmoothSync, syncOwnershipChange) == 0x000166, "Member 'USmoothSync::syncOwnershipChange' has a wrong offset!");
static_assert(offsetof(USmoothSync, realComponentToSync) == 0x0001F8, "Member 'USmoothSync::realComponentToSync' has a wrong offset!");
static_assert(offsetof(USmoothSync, InterpolationTime) == 0x000218, "Member 'USmoothSync::InterpolationTime' has a wrong offset!");
static_assert(offsetof(USmoothSync, atRestPositionThreshold) == 0x000350, "Member 'USmoothSync::atRestPositionThreshold' has a wrong offset!");
static_assert(offsetof(USmoothSync, atRestRotationThreshold) == 0x000354, "Member 'USmoothSync::atRestRotationThreshold' has a wrong offset!");

}

