#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Roaming_Smiler

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "HE_LookAtLocationSeq_structs.hpp"
#include "HE_LookAtLocation_structs.hpp"


namespace SDK::Params
{

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.ExecuteUbergraph_BP_Roaming_Smiler
// 0x0300 (0x0300 - 0x0000)
struct BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UEnvQueryInstanceBlueprintWrapper* QueryInstance, EEnvQueryStatus QueryStatus)> K2Node_CreateDelegate_OutputDelegate; // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPCharacter_Demo_C*                    K2Node_CustomEvent_Player;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIC_Roaming_Smiler_C*                  K2Node_DynamicCast_AsAIC_Roaming_Smiler;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHE_LookAtLocationSeq                  K2Node_MakeStruct_HE_LookAtLocationSeq;            // 0x0058(0x0018)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHE_LookAtLocationSeq>          K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ReferenceParm)
	struct FHE_LookAtLocation                     K2Node_MakeStruct_HE_LookAtLocation;               // 0x0088(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsSprinting;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEnvQueryInstanceBlueprintWrapper*      K2Node_CustomEvent_QueryInstance;                  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEnvQueryStatus                               K2Node_CustomEvent_QueryStatus;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FVector>                        CallFunc_GetQueryResultsAsLocations_ResultLocations; // 0x00E0(0x0010)(ReferenceParm)
	bool                                          CallFunc_GetQueryResultsAsLocations_ReturnValue;   // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0100(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQueryInstanceBlueprintWrapper*      CallFunc_RunEQSQuery_ReturnValue;                  // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0198(0x0010)(ReferenceParm)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult_1;     // 0x01A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue_1;        // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0240(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0248(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0258(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0268(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ABPCharacter_Demo_C*                    K2Node_DynamicCast_AsBPCharacter_Demo;             // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler) == 0x000008, "Wrong alignment on BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler");
static_assert(sizeof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler) == 0x000300, "Wrong size on BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, EntryPoint) == 0x000000, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, Temp_bool_Has_Been_Initd_Variable) == 0x000014, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_HasAuthority_ReturnValue) == 0x000015, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_GetAIController_ReturnValue) == 0x000018, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_CustomEvent_Player) == 0x000020, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_DynamicCast_AsAIC_Roaming_Smiler) == 0x000028, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_DynamicCast_AsAIC_Roaming_Smiler' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000034, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000040, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_Add_VectorVector_ReturnValue) == 0x00004C, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_MakeStruct_HE_LookAtLocationSeq) == 0x000058, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_MakeStruct_HE_LookAtLocationSeq' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_HasAuthority_ReturnValue_1) == 0x000070, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_MakeArray_Array) == 0x000078, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_MakeStruct_HE_LookAtLocation) == 0x000088, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_MakeStruct_HE_LookAtLocation' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_CustomEvent_IsSprinting) == 0x0000A0, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_CustomEvent_IsSprinting' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_Lerp_ReturnValue) == 0x0000A4, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000A8, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0000B0, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_CustomEvent_QueryInstance) == 0x0000B8, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_CustomEvent_QueryInstance' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_CustomEvent_QueryStatus) == 0x0000C0, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_CustomEvent_QueryStatus' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C4, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0000D0, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_GetQueryResultsAsLocations_ResultLocations) == 0x0000E0, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_GetQueryResultsAsLocations_ResultLocations' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_GetQueryResultsAsLocations_ReturnValue) == 0x0000F0, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_GetQueryResultsAsLocations_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_Array_Get_Item) == 0x0000F4, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000100, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000188, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_RunEQSQuery_ReturnValue) == 0x000190, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_RunEQSQuery_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000198, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_K2_SetActorLocation_SweepHitResult_1) == 0x0001A8, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_K2_SetActorLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_K2_SetActorLocation_ReturnValue_1) == 0x000230, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_K2_SetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_Array_Length_ReturnValue) == 0x000234, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_Greater_IntInt_ReturnValue) == 0x000238, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, CallFunc_K2_SetTimer_ReturnValue) == 0x000240, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000248, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_ComponentBoundEvent_OtherActor) == 0x000250, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_ComponentBoundEvent_OtherComp) == 0x000258, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000260, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_ComponentBoundEvent_bFromSweep) == 0x000264, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_ComponentBoundEvent_SweepResult) == 0x000268, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_DynamicCast_AsBPCharacter_Demo) == 0x0002F0, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_DynamicCast_AsBPCharacter_Demo' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, K2Node_DynamicCast_bSuccess_1) == 0x0002F8, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler, Temp_bool_IsClosed_Variable) == 0x0002F9, "Member 'BP_Roaming_Smiler_C_ExecuteUbergraph_BP_Roaming_Smiler::Temp_bool_IsClosed_Variable' has a wrong offset!");

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Roaming_Smiler_C_BndEvt__Bacteria_Roaming_BP_KillPlayer_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.OnQueryFinished
// 0x0010 (0x0010 - 0x0000)
struct BP_Roaming_Smiler_C_OnQueryFinished final
{
public:
	class UEnvQueryInstanceBlueprintWrapper*      QueryInstance;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEnvQueryStatus                               QueryStatus;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Roaming_Smiler_C_OnQueryFinished) == 0x000008, "Wrong alignment on BP_Roaming_Smiler_C_OnQueryFinished");
static_assert(sizeof(BP_Roaming_Smiler_C_OnQueryFinished) == 0x000010, "Wrong size on BP_Roaming_Smiler_C_OnQueryFinished");
static_assert(offsetof(BP_Roaming_Smiler_C_OnQueryFinished, QueryInstance) == 0x000000, "Member 'BP_Roaming_Smiler_C_OnQueryFinished::QueryInstance' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_OnQueryFinished, QueryStatus) == 0x000008, "Member 'BP_Roaming_Smiler_C_OnQueryFinished::QueryStatus' has a wrong offset!");

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.ToggleSprint
// 0x0001 (0x0001 - 0x0000)
struct BP_Roaming_Smiler_C_ToggleSprint final
{
public:
	bool                                          IsSprinting;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Roaming_Smiler_C_ToggleSprint) == 0x000001, "Wrong alignment on BP_Roaming_Smiler_C_ToggleSprint");
static_assert(sizeof(BP_Roaming_Smiler_C_ToggleSprint) == 0x000001, "Wrong size on BP_Roaming_Smiler_C_ToggleSprint");
static_assert(offsetof(BP_Roaming_Smiler_C_ToggleSprint, IsSprinting) == 0x000000, "Member 'BP_Roaming_Smiler_C_ToggleSprint::IsSprinting' has a wrong offset!");

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.AttackPlayer
// 0x0008 (0x0008 - 0x0000)
struct BP_Roaming_Smiler_C_AttackPlayer final
{
public:
	class ABPCharacter_Demo_C*                    Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Roaming_Smiler_C_AttackPlayer) == 0x000008, "Wrong alignment on BP_Roaming_Smiler_C_AttackPlayer");
static_assert(sizeof(BP_Roaming_Smiler_C_AttackPlayer) == 0x000008, "Wrong size on BP_Roaming_Smiler_C_AttackPlayer");
static_assert(offsetof(BP_Roaming_Smiler_C_AttackPlayer, Player) == 0x000000, "Member 'BP_Roaming_Smiler_C_AttackPlayer::Player' has a wrong offset!");

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.lookAt
// 0x0048 (0x0048 - 0x0000)
struct BP_Roaming_Smiler_C_lookAt final
{
public:
	class ABPCharacter_Demo_C*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Roaming_Smiler_C_lookAt) == 0x000008, "Wrong alignment on BP_Roaming_Smiler_C_lookAt");
static_assert(sizeof(BP_Roaming_Smiler_C_lookAt) == 0x000048, "Wrong size on BP_Roaming_Smiler_C_lookAt");
static_assert(offsetof(BP_Roaming_Smiler_C_lookAt, Target) == 0x000000, "Member 'BP_Roaming_Smiler_C_lookAt::Target' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_lookAt, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_Roaming_Smiler_C_lookAt::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_lookAt, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000014, "Member 'BP_Roaming_Smiler_C_lookAt::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_lookAt, CallFunc_FindLookAtRotation_ReturnValue) == 0x000020, "Member 'BP_Roaming_Smiler_C_lookAt::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_lookAt, CallFunc_BreakRotator_Roll) == 0x00002C, "Member 'BP_Roaming_Smiler_C_lookAt::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_lookAt, CallFunc_BreakRotator_Pitch) == 0x000030, "Member 'BP_Roaming_Smiler_C_lookAt::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_lookAt, CallFunc_BreakRotator_Yaw) == 0x000034, "Member 'BP_Roaming_Smiler_C_lookAt::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_lookAt, CallFunc_MakeRotator_ReturnValue) == 0x000038, "Member 'BP_Roaming_Smiler_C_lookAt::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_lookAt, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000044, "Member 'BP_Roaming_Smiler_C_lookAt::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.LookAtPlayer
// 0x0060 (0x0060 - 0x0000)
struct BP_Roaming_Smiler_C_LookAtPlayer final
{
public:
	class ABPCharacter_Demo_C*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Roaming_Smiler_C_LookAtPlayer) == 0x000008, "Wrong alignment on BP_Roaming_Smiler_C_LookAtPlayer");
static_assert(sizeof(BP_Roaming_Smiler_C_LookAtPlayer) == 0x000060, "Wrong size on BP_Roaming_Smiler_C_LookAtPlayer");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, Target) == 0x000000, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::Target' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000008, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000014, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_BreakRotator_Roll) == 0x000020, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_BreakRotator_Pitch) == 0x000024, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_BreakRotator_Yaw) == 0x000028, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_FindLookAtRotation_ReturnValue) == 0x000038, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_BreakRotator_Roll_1) == 0x000044, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_BreakRotator_Pitch_1) == 0x000048, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_BreakRotator_Yaw_1) == 0x00004C, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_LookAtPlayer, CallFunc_K2_SetActorRotation_ReturnValue) == 0x00005C, "Member 'BP_Roaming_Smiler_C_LookAtPlayer::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.CanSeePlayer
// 0x00D8 (0x00D8 - 0x0000)
struct BP_Roaming_Smiler_C_CanSeePlayer final
{
public:
	class ABPCharacter_Demo_C*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSee;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Ignored;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABPCharacter_Demo_C*>            CallFunc_GetAllActorsOfClass_OutActors;            // 0x0030(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x004C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Roaming_Smiler_C_CanSeePlayer) == 0x000008, "Wrong alignment on BP_Roaming_Smiler_C_CanSeePlayer");
static_assert(sizeof(BP_Roaming_Smiler_C_CanSeePlayer) == 0x0000D8, "Wrong size on BP_Roaming_Smiler_C_CanSeePlayer");
static_assert(offsetof(BP_Roaming_Smiler_C_CanSeePlayer, Target) == 0x000000, "Member 'BP_Roaming_Smiler_C_CanSeePlayer::Target' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CanSeePlayer, CanSee) == 0x000008, "Member 'BP_Roaming_Smiler_C_CanSeePlayer::CanSee' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CanSeePlayer, Ignored) == 0x000010, "Member 'BP_Roaming_Smiler_C_CanSeePlayer::Ignored' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CanSeePlayer, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_Roaming_Smiler_C_CanSeePlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CanSeePlayer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'BP_Roaming_Smiler_C_CanSeePlayer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CanSeePlayer, CallFunc_GetAllActorsOfClass_OutActors) == 0x000030, "Member 'BP_Roaming_Smiler_C_CanSeePlayer::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CanSeePlayer, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000040, "Member 'BP_Roaming_Smiler_C_CanSeePlayer::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CanSeePlayer, CallFunc_LineTraceSingle_OutHit) == 0x00004C, "Member 'BP_Roaming_Smiler_C_CanSeePlayer::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CanSeePlayer, CallFunc_LineTraceSingle_ReturnValue) == 0x0000D4, "Member 'BP_Roaming_Smiler_C_CanSeePlayer::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CanSeePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x0000D5, "Member 'BP_Roaming_Smiler_C_CanSeePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.CheckPlayersTimer
// 0x0080 (0x0080 - 0x0000)
struct BP_Roaming_Smiler_C_CheckPlayersTimer final
{
public:
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0030(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_ComponentOverlapActors_OutActors;         // 0x0050(0x0010)(ReferenceParm)
	bool                                          CallFunc_ComponentOverlapActors_ReturnValue;       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPCharacter_Demo_C*                    K2Node_DynamicCast_AsBPCharacter_Demo;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSeePlayer_CanSee;                      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Roaming_Smiler_C_CheckPlayersTimer) == 0x000010, "Wrong alignment on BP_Roaming_Smiler_C_CheckPlayersTimer");
static_assert(sizeof(BP_Roaming_Smiler_C_CheckPlayersTimer) == 0x000080, "Wrong size on BP_Roaming_Smiler_C_CheckPlayersTimer");
static_assert(offsetof(BP_Roaming_Smiler_C_CheckPlayersTimer, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000000, "Member 'BP_Roaming_Smiler_C_CheckPlayersTimer::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CheckPlayersTimer, Temp_object_Variable) == 0x000030, "Member 'BP_Roaming_Smiler_C_CheckPlayersTimer::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CheckPlayersTimer, K2Node_MakeArray_Array) == 0x000040, "Member 'BP_Roaming_Smiler_C_CheckPlayersTimer::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CheckPlayersTimer, CallFunc_ComponentOverlapActors_OutActors) == 0x000050, "Member 'BP_Roaming_Smiler_C_CheckPlayersTimer::CallFunc_ComponentOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CheckPlayersTimer, CallFunc_ComponentOverlapActors_ReturnValue) == 0x000060, "Member 'BP_Roaming_Smiler_C_CheckPlayersTimer::CallFunc_ComponentOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CheckPlayersTimer, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_Roaming_Smiler_C_CheckPlayersTimer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CheckPlayersTimer, K2Node_DynamicCast_AsBPCharacter_Demo) == 0x000070, "Member 'BP_Roaming_Smiler_C_CheckPlayersTimer::K2Node_DynamicCast_AsBPCharacter_Demo' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CheckPlayersTimer, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BP_Roaming_Smiler_C_CheckPlayersTimer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CheckPlayersTimer, CallFunc_CanSeePlayer_CanSee) == 0x000079, "Member 'BP_Roaming_Smiler_C_CheckPlayersTimer::CallFunc_CanSeePlayer_CanSee' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_CheckPlayersTimer, CallFunc_BooleanAND_ReturnValue) == 0x00007A, "Member 'BP_Roaming_Smiler_C_CheckPlayersTimer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.OnRep_IsVisible
// 0x0002 (0x0002 - 0x0000)
struct BP_Roaming_Smiler_C_OnRep_IsVisible final
{
public:
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue_1;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Roaming_Smiler_C_OnRep_IsVisible) == 0x000001, "Wrong alignment on BP_Roaming_Smiler_C_OnRep_IsVisible");
static_assert(sizeof(BP_Roaming_Smiler_C_OnRep_IsVisible) == 0x000002, "Wrong size on BP_Roaming_Smiler_C_OnRep_IsVisible");
static_assert(offsetof(BP_Roaming_Smiler_C_OnRep_IsVisible, CallFunc_IsActive_ReturnValue) == 0x000000, "Member 'BP_Roaming_Smiler_C_OnRep_IsVisible::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_OnRep_IsVisible, CallFunc_IsActive_ReturnValue_1) == 0x000001, "Member 'BP_Roaming_Smiler_C_OnRep_IsVisible::CallFunc_IsActive_ReturnValue_1' has a wrong offset!");

// Function BP_Roaming_Smiler.BP_Roaming_Smiler_C.SetupSmilerParticles
// 0x0010 (0x0010 - 0x0000)
struct BP_Roaming_Smiler_C_SetupSmilerParticles final
{
public:
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVisualEffectQuality_ReturnValue;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Roaming_Smiler_C_SetupSmilerParticles) == 0x000008, "Wrong alignment on BP_Roaming_Smiler_C_SetupSmilerParticles");
static_assert(sizeof(BP_Roaming_Smiler_C_SetupSmilerParticles) == 0x000010, "Wrong size on BP_Roaming_Smiler_C_SetupSmilerParticles");
static_assert(offsetof(BP_Roaming_Smiler_C_SetupSmilerParticles, CallFunc_GetGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_Roaming_Smiler_C_SetupSmilerParticles::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_SetupSmilerParticles, CallFunc_GetVisualEffectQuality_ReturnValue) == 0x000008, "Member 'BP_Roaming_Smiler_C_SetupSmilerParticles::CallFunc_GetVisualEffectQuality_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Roaming_Smiler_C_SetupSmilerParticles, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Roaming_Smiler_C_SetupSmilerParticles::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

}

