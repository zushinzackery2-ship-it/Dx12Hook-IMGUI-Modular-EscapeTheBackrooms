#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MP_GameMode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Backrooms_structs.hpp"
#include "Backrooms_classes.hpp"
#include "AdvancedSessions_structs.hpp"
#include "E_HeadsetType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MP_GameMode.MP_GameMode_C
// 0x0068 (0x0388 - 0x0320)
class AMP_GameMode_C : public AFancyGameMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFancyEntitySightingManager*            FancyEntitySightingManager;                        // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AMP_PlayerController_C*>         PlayerControllers;                                 // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         PlayersInZone;                                     // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarted;                                         // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RandomStart;                                       // 0x034D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34E[0x2];                                      // 0x034E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerScale;                                       // 0x0350(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldSpawnSpectators;                             // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsExit;                                            // 0x035D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35E[0x2];                                      // 0x035E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerStart*>                   PlayerStarts;                                      // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         LevelTime;                                         // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           NetworkCheckTimer;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MP_GameMode(int32 EntryPoint);
	void UnlockHUBForAllPlayers();
	void CheckNetworkDisconnect();
	void ReceiveTick(float DeltaSeconds);
	void LoadBackIntoLobby();
	void BndEvt__MP_GameMode_FancyEntitySightingManager_K2Node_ComponentBoundEvent_0_OnEntitySightedEvent__DelegateSignature();
	void UpdateCanJoin(bool CanJoin);
	void OnDecreaseSanity();
	void K2_PostLogin(class APlayerController* NewPlayer);
	void EndGame();
	void K2_OnLogout(class AController* ExitingController);
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	void K2_OnRestartPlayer(class AController* NewPlayer);
	void OnPlayerSpawn(class ABPCharacter_Demo_C* Player);
	void OnPlayerKilled(class ABPCharacter_Demo_C* Killed);
	void LoadLevel(class FName Map, bool IsFromHub, const bool IsExit_0);
	void UpdateAllScoreboards();
	void ReceiveBeginPlay();
	void OnSuccess_CA7DD11641B925C28CE4CCA1C71CF85E();
	void OnFailure_CA7DD11641B925C28CE4CCA1C71CF85E();
	void OnSuccess_17C4EA7D4066C891CBFD7585716BD16C();
	void OnFailure_17C4EA7D4066C891CBFD7585716BD16C();
	void AddToZone(class FName Level, bool IsFromHub, bool IsAnExit, bool* DidFinish);
	void RemoveFromZone();
	void CheckZone(class FName Level, bool IsFromHub, bool IsAnExit, bool* DidFinish);
	void IsSingleplayer(bool* Singleplayer);
	void KickPlayer(class APlayerState* PlayerState);
	void CheckAchievements();
	void FinishGameAchievement();
	class AActor* ChoosePlayerStart(class AController* Player);
	void GetAdjustedTime(float* AdjustedTime);
	void SetPlayerColor(class ABPCharacter_Demo_C* PlayerState);
	void GetPlayerStarts();
	void SaveAll();
	class UClass* GetDefaultPawnClassForController(class AController* InController);
	void UnlockAchivement(class FName Achievement);
	void CheckMissionUnlock();
	void ResetMission();
	void Initiate_Game_Ending();
	void CheckMissionComplete(class FName Map, const bool IsExit_0, bool* Complete);
	void CancelMission();
	bool IsOnline();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MP_GameMode_C">();
	}
	static class AMP_GameMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMP_GameMode_C>();
	}
};
static_assert(alignof(AMP_GameMode_C) == 0x000008, "Wrong alignment on AMP_GameMode_C");
static_assert(sizeof(AMP_GameMode_C) == 0x000388, "Wrong size on AMP_GameMode_C");
static_assert(offsetof(AMP_GameMode_C, UberGraphFrame) == 0x000320, "Member 'AMP_GameMode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, FancyEntitySightingManager) == 0x000328, "Member 'AMP_GameMode_C::FancyEntitySightingManager' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, DefaultSceneRoot) == 0x000330, "Member 'AMP_GameMode_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, PlayerControllers) == 0x000338, "Member 'AMP_GameMode_C::PlayerControllers' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, PlayersInZone) == 0x000348, "Member 'AMP_GameMode_C::PlayersInZone' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, IsStarted) == 0x00034C, "Member 'AMP_GameMode_C::IsStarted' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, RandomStart) == 0x00034D, "Member 'AMP_GameMode_C::RandomStart' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, PlayerScale) == 0x000350, "Member 'AMP_GameMode_C::PlayerScale' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, ShouldSpawnSpectators) == 0x00035C, "Member 'AMP_GameMode_C::ShouldSpawnSpectators' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, IsExit) == 0x00035D, "Member 'AMP_GameMode_C::IsExit' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, StartTime) == 0x000360, "Member 'AMP_GameMode_C::StartTime' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, PlayerStarts) == 0x000368, "Member 'AMP_GameMode_C::PlayerStarts' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, LevelTime) == 0x000378, "Member 'AMP_GameMode_C::LevelTime' has a wrong offset!");
static_assert(offsetof(AMP_GameMode_C, NetworkCheckTimer) == 0x000380, "Member 'AMP_GameMode_C::NetworkCheckTimer' has a wrong offset!");

}

