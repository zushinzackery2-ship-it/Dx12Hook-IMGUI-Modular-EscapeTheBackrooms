#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenInputPlugin

#include "Basic.hpp"

#include "OpenInputPlugin_classes.hpp"
#include "OpenInputPlugin_parameters.hpp"


namespace SDK
{

// Function OpenInputPlugin.OpenInputFunctionLibrary.FillActionInfoFromRepContainer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBPOpenVRActionInfo&             ActionInfo                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBPSkeletalRepContainer&         TargetRepContainer                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UOpenInputFunctionLibrary::FillActionInfoFromRepContainer(class UObject* WorldContextObject, struct FBPOpenVRActionInfo& ActionInfo, struct FBPSkeletalRepContainer& TargetRepContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenInputFunctionLibrary", "FillActionInfoFromRepContainer");

	Params::OpenInputFunctionLibrary_FillActionInfoFromRepContainer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActionInfo = std::move(ActionInfo);
	Parms.TargetRepContainer = std::move(TargetRepContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ActionInfo = std::move(Parms.ActionInfo);
	TargetRepContainer = std::move(Parms.TargetRepContainer);
}


// Function OpenInputPlugin.OpenInputFunctionLibrary.FillRepContainerFromActionInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBPOpenVRActionInfo&             ActionInfo                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBPSkeletalRepContainer&         TargetRepContainer                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EVRSkeletalReplicationType              ReplicationType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOpenInputFunctionLibrary::FillRepContainerFromActionInfo(struct FBPOpenVRActionInfo& ActionInfo, struct FBPSkeletalRepContainer& TargetRepContainer, EVRSkeletalReplicationType ReplicationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenInputFunctionLibrary", "FillRepContainerFromActionInfo");

	Params::OpenInputFunctionLibrary_FillRepContainerFromActionInfo Parms{};

	Parms.ActionInfo = std::move(ActionInfo);
	Parms.TargetRepContainer = std::move(TargetRepContainer);
	Parms.ReplicationType = ReplicationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ActionInfo = std::move(Parms.ActionInfo);
	TargetRepContainer = std::move(Parms.TargetRepContainer);
}


// Function OpenInputPlugin.OpenInputFunctionLibrary.GetActionPose
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBPOpenVRActionInfo&             Action                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGetCompressedData                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGetGestureValues                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenInputFunctionLibrary::GetActionPose(struct FBPOpenVRActionInfo& Action, class UObject* WorldContextObject, bool bGetCompressedData, bool bGetGestureValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenInputFunctionLibrary", "GetActionPose");

	Params::OpenInputFunctionLibrary_GetActionPose Parms{};

	Parms.Action = std::move(Action);
	Parms.WorldContextObject = WorldContextObject;
	Parms.bGetCompressedData = bGetCompressedData;
	Parms.bGetGestureValues = bGetGestureValues;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Action = std::move(Parms.Action);

	return Parms.ReturnValue;
}


// Function OpenInputPlugin.OpenInputFunctionLibrary.GetHandCurlAndSplayValues
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EVRActionHand                           TargetHand                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBPOpenVRGesturePoseData&        CurlAndSplayValuesOut                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    OptionalCustomActionName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenInputFunctionLibrary::GetHandCurlAndSplayValues(EVRActionHand TargetHand, struct FBPOpenVRGesturePoseData& CurlAndSplayValuesOut, class UObject* WorldContextObject, const class FString& OptionalCustomActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenInputFunctionLibrary", "GetHandCurlAndSplayValues");

	Params::OpenInputFunctionLibrary_GetHandCurlAndSplayValues Parms{};

	Parms.TargetHand = TargetHand;
	Parms.CurlAndSplayValuesOut = std::move(CurlAndSplayValuesOut);
	Parms.WorldContextObject = WorldContextObject;
	Parms.OptionalCustomActionName = std::move(OptionalCustomActionName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	CurlAndSplayValuesOut = std::move(Parms.CurlAndSplayValuesOut);

	return Parms.ReturnValue;
}


// Function OpenInputPlugin.OpenInputFunctionLibrary.GetOpenVRBoneTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EVROpenInputBones                       BoneToGet                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBPOpenVRActionInfo&       HandSkeletalAction                                     (Parm, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UOpenInputFunctionLibrary::GetOpenVRBoneTransform(EVROpenInputBones BoneToGet, const struct FBPOpenVRActionInfo& HandSkeletalAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenInputFunctionLibrary", "GetOpenVRBoneTransform");

	Params::OpenInputFunctionLibrary_GetOpenVRBoneTransform Parms{};

	Parms.BoneToGet = BoneToGet;
	Parms.HandSkeletalAction = std::move(HandSkeletalAction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OpenInputPlugin.OpenInputFunctionLibrary.GetReferencePose
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBPOpenVRActionInfo&             BlankActionToFill                                      (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FBPOpenVRActionHandle&     ActionHandleToQuery                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVROpenInputReferencePose               PoseTypeToRetreive                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenInputFunctionLibrary::GetReferencePose(struct FBPOpenVRActionInfo& BlankActionToFill, const struct FBPOpenVRActionHandle& ActionHandleToQuery, class UObject* WorldContextObject, EVROpenInputReferencePose PoseTypeToRetreive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenInputFunctionLibrary", "GetReferencePose");

	Params::OpenInputFunctionLibrary_GetReferencePose Parms{};

	Parms.BlankActionToFill = std::move(BlankActionToFill);
	Parms.ActionHandleToQuery = std::move(ActionHandleToQuery);
	Parms.WorldContextObject = WorldContextObject;
	Parms.PoseTypeToRetreive = PoseTypeToRetreive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	BlankActionToFill = std::move(Parms.BlankActionToFill);

	return Parms.ReturnValue;
}


// Function OpenInputPlugin.OpenInputFunctionLibrary.GetSkeletalTrackingLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EVROpenInputSkeletalTrackingLevel*      SkeletalTrackingLevelOut                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVRActionHand                           HandToRetreive                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenInputFunctionLibrary::GetSkeletalTrackingLevel(EVROpenInputSkeletalTrackingLevel* SkeletalTrackingLevelOut, EVRActionHand HandToRetreive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenInputFunctionLibrary", "GetSkeletalTrackingLevel");

	Params::OpenInputFunctionLibrary_GetSkeletalTrackingLevel Parms{};

	Parms.HandToRetreive = HandToRetreive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SkeletalTrackingLevelOut != nullptr)
		*SkeletalTrackingLevelOut = Parms.SkeletalTrackingLevelOut;

	return Parms.ReturnValue;
}


// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.GetFingerCurlAndSplayData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EVRActionHand                           TargetHand                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBPOpenVRGesturePoseData*        OutFingerPoseData                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenInputSkeletalMeshComponent::GetFingerCurlAndSplayData(EVRActionHand TargetHand, struct FBPOpenVRGesturePoseData* OutFingerPoseData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenInputSkeletalMeshComponent", "GetFingerCurlAndSplayData");

	Params::OpenInputSkeletalMeshComponent_GetFingerCurlAndSplayData Parms{};

	Parms.TargetHand = TargetHand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFingerPoseData != nullptr)
		*OutFingerPoseData = std::move(Parms.OutFingerPoseData);

	return Parms.ReturnValue;
}


// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.K2_DetectCurrentPose
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBPOpenVRActionInfo*             SkeletalAction                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FOpenInputGesture*               GestureOut                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenInputSkeletalMeshComponent::K2_DetectCurrentPose(struct FBPOpenVRActionInfo* SkeletalAction, struct FOpenInputGesture* GestureOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenInputSkeletalMeshComponent", "K2_DetectCurrentPose");

	Params::OpenInputSkeletalMeshComponent_K2_DetectCurrentPose Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SkeletalAction != nullptr)
		*SkeletalAction = std::move(Parms.SkeletalAction);

	if (GestureOut != nullptr)
		*GestureOut = std::move(Parms.GestureOut);

	return Parms.ReturnValue;
}


// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.NewControllerProfileLoaded
// (Final, Native, Public)

void UOpenInputSkeletalMeshComponent::NewControllerProfileLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenInputSkeletalMeshComponent", "NewControllerProfileLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.OnRep_SkeletalTransformLeft
// (Native, Public)

void UOpenInputSkeletalMeshComponent::OnRep_SkeletalTransformLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenInputSkeletalMeshComponent", "OnRep_SkeletalTransformLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.OnRep_SkeletalTransformRight
// (Native, Public)

void UOpenInputSkeletalMeshComponent::OnRep_SkeletalTransformRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenInputSkeletalMeshComponent", "OnRep_SkeletalTransformRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.SaveCurrentPose
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             RecordingName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseFingerCurlOnly                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVRActionHand                           HandToSave                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOpenInputSkeletalMeshComponent::SaveCurrentPose(class FName RecordingName, bool bUseFingerCurlOnly, EVRActionHand HandToSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenInputSkeletalMeshComponent", "SaveCurrentPose");

	Params::OpenInputSkeletalMeshComponent_SaveCurrentPose Parms{};

	Parms.RecordingName = RecordingName;
	Parms.bUseFingerCurlOnly = bUseFingerCurlOnly;
	Parms.HandToSave = HandToSave;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.Server_SendSkeletalTransforms
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// const struct FBPSkeletalRepContainer&   SkeletalInfo                                           (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UOpenInputSkeletalMeshComponent::Server_SendSkeletalTransforms(const struct FBPSkeletalRepContainer& SkeletalInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenInputSkeletalMeshComponent", "Server_SendSkeletalTransforms");

	Params::OpenInputSkeletalMeshComponent_Server_SendSkeletalTransforms Parms{};

	Parms.SkeletalInfo = std::move(SkeletalInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OpenInputPlugin.OpenInputSkeletalMeshComponent.SetDetectGestures
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewDetectGestures                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOpenInputSkeletalMeshComponent::SetDetectGestures(bool bNewDetectGestures)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenInputSkeletalMeshComponent", "SetDetectGestures");

	Params::OpenInputSkeletalMeshComponent_SetDetectGestures Parms{};

	Parms.bNewDetectGestures = bNewDetectGestures;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OpenInputPlugin.OpenInputAnimInstance.InitializeCustomBoneMapping
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBPSkeletalMappingData&          SkeletalMappingData                                    (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UOpenInputAnimInstance::InitializeCustomBoneMapping(struct FBPSkeletalMappingData& SkeletalMappingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenInputAnimInstance", "InitializeCustomBoneMapping");

	Params::OpenInputAnimInstance_InitializeCustomBoneMapping Parms{};

	Parms.SkeletalMappingData = std::move(SkeletalMappingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SkeletalMappingData = std::move(Parms.SkeletalMappingData);
}

}

