#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_Swimming

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AC_Swimming.AC_Swimming_C.ExecuteUbergraph_AC_Swimming
// 0x01F8 (0x01F8 - 0x0000)
struct AC_Swimming_C_ExecuteUbergraph_AC_Swimming final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_DesiredRotation;                // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSwimming_ReturnValue;                   // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsInWater;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsUnderwater;                   // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue_1;        // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AEight_FFT_H_Ocean_Sim_C*               CallFunc_GetActorOfClass_ReturnValue;              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Underwater_C*                       CallFunc_GetActorOfClass_ReturnValue_1;            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAllActorsWithTag_OutActors;            // 0x00D8(0x0010)(ReferenceParm)
	class USoundBase*                             K2Node_CustomEvent_Sound;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_CustomEvent_PrevMovementMode;               // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_CustomEvent_NewMovementMode;                // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_PrevCustomMode;                 // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_NewCustomMode;                  // 0x00F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPCharacter_Demo_C*                    K2Node_DynamicCast_AsBPCharacter_Demo;             // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_123[0x5];                                      // 0x0123(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPCharacter_Demo_C*                    K2Node_DynamicCast_AsBPCharacter_Demo_1;           // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPCharacter_Demo_C*                    K2Node_DynamicCast_AsBPCharacter_Demo_2;           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Underwater_C*                       CallFunc_GetActorOfClass_ReturnValue_2;            // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0188(0x0010)(ReferenceParm)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_1;     // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetComponentByClass_ReturnValue;          // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C3[0x1];                                      // 0x01C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSwimSpeed_Speed;                       // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSwimSprintSpeed_Speed;                 // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x01DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x01DC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x01F0(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming) == 0x000008, "Wrong alignment on AC_Swimming_C_ExecuteUbergraph_AC_Swimming");
static_assert(sizeof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming) == 0x0001F8, "Wrong size on AC_Swimming_C_ExecuteUbergraph_AC_Swimming");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, EntryPoint) == 0x000000, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::EntryPoint' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_CustomEvent_DesiredRotation) == 0x000008, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_CustomEvent_DesiredRotation' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_IsValid_ReturnValue_2) == 0x00001A, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00001C, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BooleanAND_ReturnValue) == 0x000028, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Add_VectorVector_ReturnValue) == 0x00002C, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BooleanAND_ReturnValue_1) == 0x000038, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000040, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000054, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000060, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x000070, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000078, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_IsSwimming_ReturnValue) == 0x000079, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_IsSwimming_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00007C, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_CustomEvent_IsInWater) == 0x000088, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_CustomEvent_IsInWater' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BreakRotator_Roll) == 0x00008C, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BreakRotator_Pitch) == 0x000090, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BreakRotator_Yaw) == 0x000094, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_MakeRotator_ReturnValue) == 0x000098, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_CustomEvent_IsUnderwater) == 0x0000A4, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_CustomEvent_IsUnderwater' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_K2_SetActorRotation_ReturnValue_1) == 0x0000A5, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_K2_SetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetActorOfClass_ReturnValue) == 0x0000A8, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000B0, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetActorOfClass_ReturnValue_1) == 0x0000C0, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetActorOfClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BreakVector_X) == 0x0000C8, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BreakVector_Y) == 0x0000CC, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BreakVector_Z) == 0x0000D0, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetAllActorsWithTag_OutActors) == 0x0000D8, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetAllActorsWithTag_OutActors' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_CustomEvent_Sound) == 0x0000E8, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_CustomEvent_Sound' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_CustomEvent_PrevMovementMode) == 0x0000F0, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_CustomEvent_PrevMovementMode' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_CustomEvent_NewMovementMode) == 0x0000F1, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_CustomEvent_NewMovementMode' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_CustomEvent_PrevCustomMode) == 0x0000F2, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_CustomEvent_PrevCustomMode' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_CustomEvent_NewCustomMode) == 0x0000F3, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_CustomEvent_NewCustomMode' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x0000F8, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_SwitchEnum_CmpSuccess) == 0x000100, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000101, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetOwner_ReturnValue) == 0x000108, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_Event_DeltaSeconds) == 0x000110, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_DynamicCast_AsBPCharacter_Demo) == 0x000118, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_DynamicCast_AsBPCharacter_Demo' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_DynamicCast_bSuccess) == 0x000120, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, Temp_bool_Variable) == 0x000121, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Not_PreBool_ReturnValue) == 0x000122, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetOwner_ReturnValue_1) == 0x000128, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_DynamicCast_AsBPCharacter_Demo_1) == 0x000130, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_DynamicCast_AsBPCharacter_Demo_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_DynamicCast_bSuccess_1) == 0x000138, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000140, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetOwner_ReturnValue_2) == 0x000148, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_DynamicCast_AsBPCharacter_Demo_2) == 0x000150, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_DynamicCast_AsBPCharacter_Demo_2' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_DynamicCast_bSuccess_2) == 0x000158, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetActorOfClass_ReturnValue_2) == 0x000160, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetActorOfClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, Temp_int_Array_Index_Variable) == 0x000168, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Array_Get_Item) == 0x000170, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_IsValid_ReturnValue_3) == 0x000178, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Not_PreBool_ReturnValue_1) == 0x000179, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x00017C, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000188, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BreakVector_X_1) == 0x000198, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BreakVector_Y_1) == 0x00019C, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BreakVector_Z_1) == 0x0001A0, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Array_Length_ReturnValue_1) == 0x0001A4, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Less_FloatFloat_ReturnValue) == 0x0001A8, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001A9, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetPlayerCameraManager_ReturnValue_1) == 0x0001B0, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetPlayerCameraManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetComponentByClass_ReturnValue) == 0x0001B8, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Not_PreBool_ReturnValue_2) == 0x0001C0, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Not_PreBool_ReturnValue_3) == 0x0001C1, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_BooleanAND_ReturnValue_2) == 0x0001C2, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetSwimSpeed_Speed) == 0x0001C4, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetSwimSpeed_Speed' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_GetSwimSprintSpeed_Speed) == 0x0001C8, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_GetSwimSprintSpeed_Speed' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, Temp_int_Loop_Counter_Variable) == 0x0001CC, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Less_IntInt_ReturnValue) == 0x0001D0, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_Add_IntInt_ReturnValue) == 0x0001D4, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, Temp_bool_Has_Been_Initd_Variable) == 0x0001D8, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, Temp_bool_IsClosed_Variable) == 0x0001D9, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, Temp_bool_IsClosed_Variable_1) == 0x0001DA, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, Temp_bool_Has_Been_Initd_Variable_1) == 0x0001DB, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, K2Node_CreateDelegate_OutputDelegate) == 0x0001DC, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_ExecuteUbergraph_AC_Swimming, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0001F0, "Member 'AC_Swimming_C_ExecuteUbergraph_AC_Swimming::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct AC_Swimming_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Swimming_C_ReceiveTick) == 0x000004, "Wrong alignment on AC_Swimming_C_ReceiveTick");
static_assert(sizeof(AC_Swimming_C_ReceiveTick) == 0x000004, "Wrong size on AC_Swimming_C_ReceiveTick");
static_assert(offsetof(AC_Swimming_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'AC_Swimming_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.OnMovementModeChanged
// 0x0004 (0x0004 - 0x0000)
struct AC_Swimming_C_OnMovementModeChanged final
{
public:
	EMovementMode                                 PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 NewMovementMode;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Swimming_C_OnMovementModeChanged) == 0x000001, "Wrong alignment on AC_Swimming_C_OnMovementModeChanged");
static_assert(sizeof(AC_Swimming_C_OnMovementModeChanged) == 0x000004, "Wrong size on AC_Swimming_C_OnMovementModeChanged");
static_assert(offsetof(AC_Swimming_C_OnMovementModeChanged, PrevMovementMode) == 0x000000, "Member 'AC_Swimming_C_OnMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_OnMovementModeChanged, NewMovementMode) == 0x000001, "Member 'AC_Swimming_C_OnMovementModeChanged::NewMovementMode' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_OnMovementModeChanged, PrevCustomMode) == 0x000002, "Member 'AC_Swimming_C_OnMovementModeChanged::PrevCustomMode' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_OnMovementModeChanged, NewCustomMode) == 0x000003, "Member 'AC_Swimming_C_OnMovementModeChanged::NewCustomMode' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.Spawn sound
// 0x0008 (0x0008 - 0x0000)
struct AC_Swimming_C_Spawn_sound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Swimming_C_Spawn_sound) == 0x000008, "Wrong alignment on AC_Swimming_C_Spawn_sound");
static_assert(sizeof(AC_Swimming_C_Spawn_sound) == 0x000008, "Wrong size on AC_Swimming_C_Spawn_sound");
static_assert(offsetof(AC_Swimming_C_Spawn_sound, Sound) == 0x000000, "Member 'AC_Swimming_C_Spawn_sound::Sound' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.EventIsUnderwater
// 0x0001 (0x0001 - 0x0000)
struct AC_Swimming_C_EventIsUnderwater final
{
public:
	bool                                          IsUnderwater;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AC_Swimming_C_EventIsUnderwater) == 0x000001, "Wrong alignment on AC_Swimming_C_EventIsUnderwater");
static_assert(sizeof(AC_Swimming_C_EventIsUnderwater) == 0x000001, "Wrong size on AC_Swimming_C_EventIsUnderwater");
static_assert(offsetof(AC_Swimming_C_EventIsUnderwater, IsUnderwater) == 0x000000, "Member 'AC_Swimming_C_EventIsUnderwater::IsUnderwater' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.EventIsInWater
// 0x0001 (0x0001 - 0x0000)
struct AC_Swimming_C_EventIsInWater final
{
public:
	bool                                          IsInWater;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AC_Swimming_C_EventIsInWater) == 0x000001, "Wrong alignment on AC_Swimming_C_EventIsInWater");
static_assert(sizeof(AC_Swimming_C_EventIsInWater) == 0x000001, "Wrong size on AC_Swimming_C_EventIsInWater");
static_assert(offsetof(AC_Swimming_C_EventIsInWater, IsInWater) == 0x000000, "Member 'AC_Swimming_C_EventIsInWater::IsInWater' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.ReplicateRotationToServer
// 0x000C (0x000C - 0x0000)
struct AC_Swimming_C_ReplicateRotationToServer final
{
public:
	struct FRotator                               DesiredRotation;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AC_Swimming_C_ReplicateRotationToServer) == 0x000004, "Wrong alignment on AC_Swimming_C_ReplicateRotationToServer");
static_assert(sizeof(AC_Swimming_C_ReplicateRotationToServer) == 0x00000C, "Wrong size on AC_Swimming_C_ReplicateRotationToServer");
static_assert(offsetof(AC_Swimming_C_ReplicateRotationToServer, DesiredRotation) == 0x000000, "Member 'AC_Swimming_C_ReplicateRotationToServer::DesiredRotation' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.SetSmoothCharacterRotationOnStrafeMovement
// 0x0064 (0x0064 - 0x0000)
struct AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSwimming_ReturnValue;                   // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSwimming_ReturnValue_1;                 // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select_Default;                             // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement) == 0x000004, "Wrong alignment on AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement");
static_assert(sizeof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement) == 0x000064, "Wrong size on AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, Temp_bool_Variable) == 0x000000, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_BreakRotator_Roll) == 0x000004, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_BreakRotator_Pitch) == 0x000008, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_BreakRotator_Yaw) == 0x00000C, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_BreakRotator_Roll_1) == 0x000010, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_BreakRotator_Pitch_1) == 0x000014, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_BreakRotator_Yaw_1) == 0x000018, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_MakeRotator_ReturnValue) == 0x00001C, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_MakeRotator_ReturnValue_1) == 0x000028, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000034, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_IsSwimming_ReturnValue) == 0x000035, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_IsSwimming_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_GetControlRotation_ReturnValue) == 0x000038, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_IsLocallyControlled_ReturnValue) == 0x000044, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_IsSwimming_ReturnValue_1) == 0x000045, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_IsSwimming_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_Not_PreBool_ReturnValue) == 0x000046, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_BooleanAND_ReturnValue) == 0x000047, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, K2Node_Select_Default) == 0x000048, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000054, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement, CallFunc_RInterpTo_ReturnValue) == 0x000058, "Member 'AC_Swimming_C_SetSmoothCharacterRotationOnStrafeMovement::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.DiveMovementLogic
// 0x0038 (0x0038 - 0x0000)
struct AC_Swimming_C_DiveMovementLogic final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSwimming_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Swimming_C_DiveMovementLogic) == 0x000004, "Wrong alignment on AC_Swimming_C_DiveMovementLogic");
static_assert(sizeof(AC_Swimming_C_DiveMovementLogic) == 0x000038, "Wrong size on AC_Swimming_C_DiveMovementLogic");
static_assert(offsetof(AC_Swimming_C_DiveMovementLogic, ScaleValue) == 0x000000, "Member 'AC_Swimming_C_DiveMovementLogic::ScaleValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_DiveMovementLogic, CallFunc_GetControlRotation_ReturnValue) == 0x000004, "Member 'AC_Swimming_C_DiveMovementLogic::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_DiveMovementLogic, CallFunc_IsSwimming_ReturnValue) == 0x000010, "Member 'AC_Swimming_C_DiveMovementLogic::CallFunc_IsSwimming_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_DiveMovementLogic, CallFunc_BreakRotator_Roll) == 0x000014, "Member 'AC_Swimming_C_DiveMovementLogic::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_DiveMovementLogic, CallFunc_BreakRotator_Pitch) == 0x000018, "Member 'AC_Swimming_C_DiveMovementLogic::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_DiveMovementLogic, CallFunc_BreakRotator_Yaw) == 0x00001C, "Member 'AC_Swimming_C_DiveMovementLogic::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_DiveMovementLogic, CallFunc_MakeRotator_ReturnValue) == 0x000020, "Member 'AC_Swimming_C_DiveMovementLogic::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_DiveMovementLogic, CallFunc_GetUpVector_ReturnValue) == 0x00002C, "Member 'AC_Swimming_C_DiveMovementLogic::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.CustomDiveMovementLogic
// 0x001C (0x001C - 0x0000)
struct AC_Swimming_C_CustomDiveMovementLogic final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Swimming_C_CustomDiveMovementLogic) == 0x000004, "Wrong alignment on AC_Swimming_C_CustomDiveMovementLogic");
static_assert(sizeof(AC_Swimming_C_CustomDiveMovementLogic) == 0x00001C, "Wrong size on AC_Swimming_C_CustomDiveMovementLogic");
static_assert(offsetof(AC_Swimming_C_CustomDiveMovementLogic, ScaleValue) == 0x000000, "Member 'AC_Swimming_C_CustomDiveMovementLogic::ScaleValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_CustomDiveMovementLogic, CallFunc_GetControlRotation_ReturnValue) == 0x000004, "Member 'AC_Swimming_C_CustomDiveMovementLogic::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_CustomDiveMovementLogic, CallFunc_GetForwardVector_ReturnValue) == 0x000010, "Member 'AC_Swimming_C_CustomDiveMovementLogic::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.SwimUpMovementLogic
// 0x0030 (0x0030 - 0x0000)
struct AC_Swimming_C_SwimUpMovementLogic final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSwimming_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AC_Swimming_C_SwimUpMovementLogic) == 0x000004, "Wrong alignment on AC_Swimming_C_SwimUpMovementLogic");
static_assert(sizeof(AC_Swimming_C_SwimUpMovementLogic) == 0x000030, "Wrong size on AC_Swimming_C_SwimUpMovementLogic");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_BreakVector_X) == 0x00001C, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_BreakVector_Y) == 0x000020, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_BreakVector_Z) == 0x000024, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_Less_FloatFloat_ReturnValue) == 0x000028, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_IsSwimming_ReturnValue) == 0x000029, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_IsSwimming_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_BooleanAND_ReturnValue_1) == 0x00002B, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimUpMovementLogic, CallFunc_BooleanAND_ReturnValue_2) == 0x00002C, "Member 'AC_Swimming_C_SwimUpMovementLogic::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.GetSwimSpeed
// 0x0008 (0x0008 - 0x0000)
struct AC_Swimming_C_GetSwimSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Swimming_C_GetSwimSpeed) == 0x000004, "Wrong alignment on AC_Swimming_C_GetSwimSpeed");
static_assert(sizeof(AC_Swimming_C_GetSwimSpeed) == 0x000008, "Wrong size on AC_Swimming_C_GetSwimSpeed");
static_assert(offsetof(AC_Swimming_C_GetSwimSpeed, Speed) == 0x000000, "Member 'AC_Swimming_C_GetSwimSpeed::Speed' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_GetSwimSpeed, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'AC_Swimming_C_GetSwimSpeed::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.GetSwimSprintSpeed
// 0x0008 (0x0008 - 0x0000)
struct AC_Swimming_C_GetSwimSprintSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Swimming_C_GetSwimSprintSpeed) == 0x000004, "Wrong alignment on AC_Swimming_C_GetSwimSprintSpeed");
static_assert(sizeof(AC_Swimming_C_GetSwimSprintSpeed) == 0x000008, "Wrong size on AC_Swimming_C_GetSwimSprintSpeed");
static_assert(offsetof(AC_Swimming_C_GetSwimSprintSpeed, Speed) == 0x000000, "Member 'AC_Swimming_C_GetSwimSprintSpeed::Speed' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_GetSwimSprintSpeed, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'AC_Swimming_C_GetSwimSprintSpeed::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function AC_Swimming.AC_Swimming_C.SwimDownMovementLogic
// 0x0010 (0x0010 - 0x0000)
struct AC_Swimming_C_SwimDownMovementLogic final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSwimming_ReturnValue;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AC_Swimming_C_SwimDownMovementLogic) == 0x000004, "Wrong alignment on AC_Swimming_C_SwimDownMovementLogic");
static_assert(sizeof(AC_Swimming_C_SwimDownMovementLogic) == 0x000010, "Wrong size on AC_Swimming_C_SwimDownMovementLogic");
static_assert(offsetof(AC_Swimming_C_SwimDownMovementLogic, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'AC_Swimming_C_SwimDownMovementLogic::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimDownMovementLogic, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000C, "Member 'AC_Swimming_C_SwimDownMovementLogic::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimDownMovementLogic, CallFunc_IsSwimming_ReturnValue) == 0x00000D, "Member 'AC_Swimming_C_SwimDownMovementLogic::CallFunc_IsSwimming_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimDownMovementLogic, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'AC_Swimming_C_SwimDownMovementLogic::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Swimming_C_SwimDownMovementLogic, CallFunc_BooleanAND_ReturnValue_1) == 0x00000F, "Member 'AC_Swimming_C_SwimDownMovementLogic::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

}

