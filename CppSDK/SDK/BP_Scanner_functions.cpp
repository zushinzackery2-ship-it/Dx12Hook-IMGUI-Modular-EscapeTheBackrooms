#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Scanner

#include "Basic.hpp"

#include "BP_Scanner_classes.hpp"
#include "BP_Scanner_parameters.hpp"


namespace SDK
{

// Function BP_Scanner.BP_Scanner_C.ExecuteUbergraph_BP_Scanner
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::ExecuteUbergraph_BP_Scanner(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "ExecuteUbergraph_BP_Scanner");

	Params::BP_Scanner_C_ExecuteUbergraph_BP_Scanner Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_Scanner_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.SRV_Lidar
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// const struct FColor&                    Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::SRV_Lidar(const struct FHitResult& HitResult, const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SRV_Lidar");

	Params::BP_Scanner_C_SRV_Lidar Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.OC_Fire
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::OC_Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "OC_Fire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.Initialize
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.MC_Fire
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::MC_Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "MC_Fire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.BndEvt__BP_Scanner_LIDARComponent_K2Node_ComponentBoundEvent_2_ScannerUpdateSignature__DelegateSignature
// (BlueprintEvent)

void ABP_Scanner_C::BndEvt__BP_Scanner_LIDARComponent_K2Node_ComponentBoundEvent_2_ScannerUpdateSignature__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "BndEvt__BP_Scanner_LIDARComponent_K2Node_ComponentBoundEvent_2_ScannerUpdateSignature__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.BndEvt__BP_Scanner_LIDARComponent_K2Node_ComponentBoundEvent_0_ScannerTraceSignature__DelegateSignature
// (BlueprintEvent)

void ABP_Scanner_C::BndEvt__BP_Scanner_LIDARComponent_K2Node_ComponentBoundEvent_0_ScannerTraceSignature__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "BndEvt__BP_Scanner_LIDARComponent_K2Node_ComponentBoundEvent_0_ScannerTraceSignature__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.ResetSKCollisionUVBool
// (BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::ResetSKCollisionUVBool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "ResetSKCollisionUVBool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.SpawnScannerBeam
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   BeamStart                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   BeamEnd                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::SpawnScannerBeam(const struct FVector& BeamStart, const struct FVector& BeamEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SpawnScannerBeam");

	Params::BP_Scanner_C_SpawnScannerBeam Parms{};

	Parms.BeamStart = std::move(BeamStart);
	Parms.BeamEnd = std::move(BeamEnd);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.SetScanDistance
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewDistance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::SetScanDistance(float NewDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SetScanDistance");

	Params::BP_Scanner_C_SetScanDistance Parms{};

	Parms.NewDistance = NewDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.BndEvt__BP_Scanner_BP_ScannerComponent_K2Node_ComponentBoundEvent_1_ScannerWaveUpdateDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FTargetsStruct>&          OutTargets                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// const struct FTelemetryStruct&          OutTelemetry                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_Scanner_C::BndEvt__BP_Scanner_BP_ScannerComponent_K2Node_ComponentBoundEvent_1_ScannerWaveUpdateDelegate__DelegateSignature(TArray<struct FTargetsStruct>& OutTargets, const struct FTelemetryStruct& OutTelemetry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "BndEvt__BP_Scanner_BP_ScannerComponent_K2Node_ComponentBoundEvent_1_ScannerWaveUpdateDelegate__DelegateSignature");

	Params::BP_Scanner_C_BndEvt__BP_Scanner_BP_ScannerComponent_K2Node_ComponentBoundEvent_1_ScannerWaveUpdateDelegate__DelegateSignature Parms{};

	Parms.OutTargets = std::move(OutTargets);
	Parms.OutTelemetry = std::move(OutTelemetry);

	UObject::ProcessEvent(Func, &Parms);

	OutTargets = std::move(Parms.OutTargets);
}


// Function BP_Scanner.BP_Scanner_C.SetEnableMotionScanner
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Scanner_C::SetEnableMotionScanner(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SetEnableMotionScanner");

	Params::BP_Scanner_C_SetEnableMotionScanner Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.SetEnableWaveScan
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Scanner_C::SetEnableWaveScan(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SetEnableWaveScan");

	Params::BP_Scanner_C_SetEnableWaveScan Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.SetEnableLiDAR
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Scanner_C::SetEnableLiDAR(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SetEnableLiDAR");

	Params::BP_Scanner_C_SetEnableLiDAR Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "ReceiveTick");

	Params::BP_Scanner_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.SetStartEnableMotionScanner
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Activate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Scanner_C::SetStartEnableMotionScanner(bool Activate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SetStartEnableMotionScanner");

	Params::BP_Scanner_C_SetStartEnableMotionScanner Parms{};

	Parms.Activate = Activate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.SoundChangeDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float&                                  NewDistance                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::SoundChangeDistance(float& NewDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SoundChangeDistance");

	Params::BP_Scanner_C_SoundChangeDistance Parms{};

	Parms.NewDistance = NewDistance;

	UObject::ProcessEvent(Func, &Parms);

	NewDistance = Parms.NewDistance;
}


// Function BP_Scanner.BP_Scanner_C.OnRep_bIsMotionScannerEnable
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::OnRep_bIsMotionScannerEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "OnRep_bIsMotionScannerEnable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.OnRep_bIsWaveScannerEnbale
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::OnRep_bIsWaveScannerEnbale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "OnRep_bIsWaveScannerEnbale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.OnRep_bIsLiDAREnable
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::OnRep_bIsLiDAREnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "OnRep_bIsLiDAREnable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.SetNewPositionTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   SecondLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         ReturnPosition                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::SetNewPositionTarget(const struct FVector& SecondLocation, struct FVector* ReturnPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SetNewPositionTarget");

	Params::BP_Scanner_C_SetNewPositionTarget Parms{};

	Parms.SecondLocation = std::move(SecondLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnPosition != nullptr)
		*ReturnPosition = std::move(Parms.ReturnPosition);
}


// Function BP_Scanner.BP_Scanner_C.SetTargets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::SetTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SetTargets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.AddTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTargetsStruct&            TargetsStruct                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void ABP_Scanner_C::AddTarget(const struct FTargetsStruct& TargetsStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "AddTarget");

	Params::BP_Scanner_C_AddTarget Parms{};

	Parms.TargetsStruct = std::move(TargetsStruct);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.UpdateTargetSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InFloat                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Scanner_C::UpdateTargetSound(float InFloat, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "UpdateTargetSound");

	Params::BP_Scanner_C_UpdateTargetSound Parms{};

	Parms.InFloat = InFloat;
	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.UpdateMinDistance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_Scanner_C::UpdateMinDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "UpdateMinDistance");

	Params::BP_Scanner_C_UpdateMinDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Scanner.BP_Scanner_C.UpdateScanPercent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::UpdateScanPercent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "UpdateScanPercent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.SetTargetPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OneTarget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UMotionScannerComponent*          SetMotionScanner                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMeshComponent*             SetNpcMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::SetTargetPosition(bool OneTarget, class UMotionScannerComponent* SetMotionScanner, class UStaticMeshComponent* SetNpcMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SetTargetPosition");

	Params::BP_Scanner_C_SetTargetPosition Parms{};

	Parms.OneTarget = OneTarget;
	Parms.SetMotionScanner = SetMotionScanner;
	Parms.SetNpcMesh = SetNpcMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scanner.BP_Scanner_C.ScannerTraceCalc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         TraceStart                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         TraceEnd                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::ScannerTraceCalc(struct FVector* TraceStart, struct FVector* TraceEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "ScannerTraceCalc");

	Params::BP_Scanner_C_ScannerTraceCalc Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TraceStart != nullptr)
		*TraceStart = std::move(Parms.TraceStart);

	if (TraceEnd != nullptr)
		*TraceEnd = std::move(Parms.TraceEnd);
}


// Function BP_Scanner.BP_Scanner_C.FixUVStretching
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FaceIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 HitUVLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  FixedSize                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         FixedStretch                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::FixUVStretching(const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, int32 FaceIndex, const struct FVector2D& HitUVLocation, float* FixedSize, struct FVector* FixedStretch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "FixUVStretching");

	Params::BP_Scanner_C_FixUVStretching Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.HitComponent = HitComponent;
	Parms.FaceIndex = FaceIndex;
	Parms.HitUVLocation = std::move(HitUVLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (FixedSize != nullptr)
		*FixedSize = Parms.FixedSize;

	if (FixedStretch != nullptr)
		*FixedStretch = std::move(Parms.FixedStretch);
}


// Function BP_Scanner.BP_Scanner_C.InitializeMaterials
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::InitializeMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "InitializeMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.InitializeColors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::InitializeColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "InitializeColors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.LiDAR
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float&                                  Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::LiDAR(float& Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "LiDAR");

	Params::BP_Scanner_C_LiDAR Parms{};

	Parms.Delta = Delta;

	UObject::ProcessEvent(Func, &Parms);

	Delta = Parms.Delta;
}


// Function BP_Scanner.BP_Scanner_C.GetMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UMaterialInterface*               Material_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface**              Adjusted                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scanner_C::GetMaterial(class UMaterialInterface* Material_0, class UMaterialInterface** Adjusted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "GetMaterial");

	Params::BP_Scanner_C_GetMaterial Parms{};

	Parms.Material_0 = Material_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Adjusted != nullptr)
		*Adjusted = Parms.Adjusted;
}


// Function BP_Scanner.BP_Scanner_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Scanner_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.UseItem
// (BlueprintCallable, BlueprintEvent)

void ABP_Scanner_C::UseItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "UseItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scanner.BP_Scanner_C.SetMaterial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnabledFOV                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Scanner_C::SetMaterial(bool EnabledFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scanner_C", "SetMaterial");

	Params::BP_Scanner_C_SetMaterial Parms{};

	Parms.EnabledFOV = EnabledFOV;

	UObject::ProcessEvent(Func, &Parms);
}

}

