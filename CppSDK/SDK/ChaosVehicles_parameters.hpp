#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChaosVehicles

#include "Basic.hpp"

#include "ChaosVehicles_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ChaosVehicles.ChaosVehicleMovementComponent.DecreaseThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_DecreaseThrottleInput final
{
public:
	float                                         ThrottleDelta;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_DecreaseThrottleInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_DecreaseThrottleInput");
static_assert(sizeof(ChaosVehicleMovementComponent_DecreaseThrottleInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_DecreaseThrottleInput");
static_assert(offsetof(ChaosVehicleMovementComponent_DecreaseThrottleInput, ThrottleDelta) == 0x000000, "Member 'ChaosVehicleMovementComponent_DecreaseThrottleInput::ThrottleDelta' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.EnableSelfRighting
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_EnableSelfRighting final
{
public:
	bool                                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_EnableSelfRighting) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_EnableSelfRighting");
static_assert(sizeof(ChaosVehicleMovementComponent_EnableSelfRighting) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_EnableSelfRighting");
static_assert(offsetof(ChaosVehicleMovementComponent_EnableSelfRighting, InState) == 0x000000, "Member 'ChaosVehicleMovementComponent_EnableSelfRighting::InState' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.IncreaseThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_IncreaseThrottleInput final
{
public:
	float                                         ThrottleDelta;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_IncreaseThrottleInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_IncreaseThrottleInput");
static_assert(sizeof(ChaosVehicleMovementComponent_IncreaseThrottleInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_IncreaseThrottleInput");
static_assert(offsetof(ChaosVehicleMovementComponent_IncreaseThrottleInput, ThrottleDelta) == 0x000000, "Member 'ChaosVehicleMovementComponent_IncreaseThrottleInput::ThrottleDelta' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.ServerUpdateState
// 0x0020 (0x0020 - 0x0000)
struct ChaosVehicleMovementComponent_ServerUpdateState final
{
public:
	float                                         InSteeringInput;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InThrottleInput;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBrakeInput;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHandbrakeInput;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCurrentGear;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRollInput;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPitchInput;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYawInput;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_ServerUpdateState) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_ServerUpdateState");
static_assert(sizeof(ChaosVehicleMovementComponent_ServerUpdateState) == 0x000020, "Wrong size on ChaosVehicleMovementComponent_ServerUpdateState");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InSteeringInput) == 0x000000, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InSteeringInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InThrottleInput) == 0x000004, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InThrottleInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InBrakeInput) == 0x000008, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InBrakeInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InHandbrakeInput) == 0x00000C, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InHandbrakeInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InCurrentGear) == 0x000010, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InCurrentGear' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InRollInput) == 0x000014, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InRollInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InPitchInput) == 0x000018, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InPitchInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InYawInput) == 0x00001C, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InYawInput' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetBrakeInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetBrakeInput final
{
public:
	float                                         Brake;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetBrakeInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetBrakeInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetBrakeInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetBrakeInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetBrakeInput, Brake) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetBrakeInput::Brake' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetChangeDownInput
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetChangeDownInput final
{
public:
	bool                                          bNewGearDown;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetChangeDownInput) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetChangeDownInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetChangeDownInput) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetChangeDownInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetChangeDownInput, bNewGearDown) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetChangeDownInput::bNewGearDown' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetChangeUpInput
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetChangeUpInput final
{
public:
	bool                                          bNewGearUp;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetChangeUpInput) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetChangeUpInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetChangeUpInput) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetChangeUpInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetChangeUpInput, bNewGearUp) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetChangeUpInput::bNewGearUp' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetHandbrakeInput
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetHandbrakeInput final
{
public:
	bool                                          bNewHandbrake;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetHandbrakeInput) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetHandbrakeInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetHandbrakeInput) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetHandbrakeInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetHandbrakeInput, bNewHandbrake) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetHandbrakeInput::bNewHandbrake' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetPitchInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetPitchInput final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetPitchInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetPitchInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetPitchInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetPitchInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetPitchInput, Pitch) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetPitchInput::Pitch' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetRollInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetRollInput final
{
public:
	float                                         Roll;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetRollInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetRollInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetRollInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetRollInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetRollInput, Roll) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetRollInput::Roll' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetSteeringInput final
{
public:
	float                                         Steering;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetSteeringInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetSteeringInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetSteeringInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetSteeringInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetSteeringInput, Steering) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetSteeringInput::Steering' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetTargetGear
// 0x0008 (0x0008 - 0x0000)
struct ChaosVehicleMovementComponent_SetTargetGear final
{
public:
	int32                                         GearNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosVehicleMovementComponent_SetTargetGear) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetTargetGear");
static_assert(sizeof(ChaosVehicleMovementComponent_SetTargetGear) == 0x000008, "Wrong size on ChaosVehicleMovementComponent_SetTargetGear");
static_assert(offsetof(ChaosVehicleMovementComponent_SetTargetGear, GearNum) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetTargetGear::GearNum' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_SetTargetGear, bImmediate) == 0x000004, "Member 'ChaosVehicleMovementComponent_SetTargetGear::bImmediate' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetThrottleInput final
{
public:
	float                                         Throttle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetThrottleInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetThrottleInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetThrottleInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetThrottleInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetThrottleInput, Throttle) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetThrottleInput::Throttle' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetUseAutomaticGears
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetUseAutomaticGears final
{
public:
	bool                                          bUseAuto;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetUseAutomaticGears) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetUseAutomaticGears");
static_assert(sizeof(ChaosVehicleMovementComponent_SetUseAutomaticGears) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetUseAutomaticGears");
static_assert(offsetof(ChaosVehicleMovementComponent_SetUseAutomaticGears, bUseAuto) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetUseAutomaticGears::bUseAuto' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetYawInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetYawInput final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetYawInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetYawInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetYawInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetYawInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetYawInput, Yaw) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetYawInput::Yaw' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetCurrentGear
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetCurrentGear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetCurrentGear) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetCurrentGear");
static_assert(sizeof(ChaosVehicleMovementComponent_GetCurrentGear) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetCurrentGear");
static_assert(offsetof(ChaosVehicleMovementComponent_GetCurrentGear, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetCurrentGear::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetForwardSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetForwardSpeed) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetForwardSpeed");
static_assert(sizeof(ChaosVehicleMovementComponent_GetForwardSpeed) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetForwardSpeed");
static_assert(offsetof(ChaosVehicleMovementComponent_GetForwardSpeed, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetForwardSpeed::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetForwardSpeedMPH
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetForwardSpeedMPH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetForwardSpeedMPH) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetForwardSpeedMPH");
static_assert(sizeof(ChaosVehicleMovementComponent_GetForwardSpeedMPH) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetForwardSpeedMPH");
static_assert(offsetof(ChaosVehicleMovementComponent_GetForwardSpeedMPH, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetForwardSpeedMPH::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetTargetGear
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetTargetGear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetTargetGear) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetTargetGear");
static_assert(sizeof(ChaosVehicleMovementComponent_GetTargetGear) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetTargetGear");
static_assert(offsetof(ChaosVehicleMovementComponent_GetTargetGear, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetTargetGear::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetUseAutoGears
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_GetUseAutoGears final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetUseAutoGears) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_GetUseAutoGears");
static_assert(sizeof(ChaosVehicleMovementComponent_GetUseAutoGears) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_GetUseAutoGears");
static_assert(offsetof(ChaosVehicleMovementComponent_GetUseAutoGears, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetUseAutoGears::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetAxleType
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleWheel_GetAxleType final
{
public:
	EAxleType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetAxleType) == 0x000001, "Wrong alignment on ChaosVehicleWheel_GetAxleType");
static_assert(sizeof(ChaosVehicleWheel_GetAxleType) == 0x000001, "Wrong size on ChaosVehicleWheel_GetAxleType");
static_assert(offsetof(ChaosVehicleWheel_GetAxleType, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetAxleType::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetRotationAngle
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleWheel_GetRotationAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetRotationAngle) == 0x000004, "Wrong alignment on ChaosVehicleWheel_GetRotationAngle");
static_assert(sizeof(ChaosVehicleWheel_GetRotationAngle) == 0x000004, "Wrong size on ChaosVehicleWheel_GetRotationAngle");
static_assert(offsetof(ChaosVehicleWheel_GetRotationAngle, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetRotationAngle::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetSteerAngle
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleWheel_GetSteerAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetSteerAngle) == 0x000004, "Wrong alignment on ChaosVehicleWheel_GetSteerAngle");
static_assert(sizeof(ChaosVehicleWheel_GetSteerAngle) == 0x000004, "Wrong size on ChaosVehicleWheel_GetSteerAngle");
static_assert(offsetof(ChaosVehicleWheel_GetSteerAngle, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetSteerAngle::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetSuspensionOffset
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleWheel_GetSuspensionOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetSuspensionOffset) == 0x000004, "Wrong alignment on ChaosVehicleWheel_GetSuspensionOffset");
static_assert(sizeof(ChaosVehicleWheel_GetSuspensionOffset) == 0x000004, "Wrong size on ChaosVehicleWheel_GetSuspensionOffset");
static_assert(offsetof(ChaosVehicleWheel_GetSuspensionOffset, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetSuspensionOffset::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.IsInAir
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleWheel_IsInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_IsInAir) == 0x000001, "Wrong alignment on ChaosVehicleWheel_IsInAir");
static_assert(sizeof(ChaosVehicleWheel_IsInAir) == 0x000001, "Wrong size on ChaosVehicleWheel_IsInAir");
static_assert(offsetof(ChaosVehicleWheel_IsInAir, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_IsInAir::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.BreakWheelStatus
// 0x0080 (0x0080 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_BreakWheelStatus final
{
public:
	struct FWheelStatus                           Status;                                            // 0x0000(0x003C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInContact;                                        // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ContactPoint;                                      // 0x0040(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedSuspensionLength;                        // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringForce;                                       // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSlipping;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlipMagnitude;                                     // 0x0064(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkidding;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkidMagnitude;                                     // 0x006C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SkidNormal;                                        // 0x0070(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus) == 0x000008, "Wrong alignment on ChaosWheeledVehicleMovementComponent_BreakWheelStatus");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus) == 0x000080, "Wrong size on ChaosWheeledVehicleMovementComponent_BreakWheelStatus");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, Status) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::Status' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, bInContact) == 0x00003C, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::bInContact' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, ContactPoint) == 0x000040, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::ContactPoint' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, PhysMaterial) == 0x000050, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::PhysMaterial' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, NormalizedSuspensionLength) == 0x000058, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::NormalizedSuspensionLength' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, SpringForce) == 0x00005C, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::SpringForce' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, bIsSlipping) == 0x000060, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::bIsSlipping' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, SlipMagnitude) == 0x000064, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::SlipMagnitude' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, bIsSkidding) == 0x000068, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::bIsSkidding' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, SkidMagnitude) == 0x00006C, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::SkidMagnitude' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, SkidNormal) == 0x000070, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::SkidNormal' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.MakeWheelStatus
// 0x0078 (0x0078 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_MakeWheelStatus final
{
public:
	bool                                          bInContact;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ContactPoint;                                      // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedSuspensionLength;                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringForce;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSlipping;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlipMagnitude;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkidding;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkidMagnitude;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SkidNormal;                                        // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWheelStatus                           ReturnValue;                                       // 0x003C(0x003C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus) == 0x000008, "Wrong alignment on ChaosWheeledVehicleMovementComponent_MakeWheelStatus");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus) == 0x000078, "Wrong size on ChaosWheeledVehicleMovementComponent_MakeWheelStatus");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, bInContact) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::bInContact' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, ContactPoint) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::ContactPoint' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, PhysMaterial) == 0x000010, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::PhysMaterial' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, NormalizedSuspensionLength) == 0x000018, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::NormalizedSuspensionLength' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, SpringForce) == 0x00001C, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::SpringForce' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, bIsSlipping) == 0x000020, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::bIsSlipping' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, SlipMagnitude) == 0x000024, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::SlipMagnitude' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, bIsSkidding) == 0x000028, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::bIsSkidding' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, SkidMagnitude) == 0x00002C, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::SkidMagnitude' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, SkidNormal) == 0x000030, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::SkidNormal' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, ReturnValue) == 0x00003C, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.EnableMechanicalSim
// 0x0001 (0x0001 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_EnableMechanicalSim final
{
public:
	bool                                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_EnableMechanicalSim) == 0x000001, "Wrong alignment on ChaosWheeledVehicleMovementComponent_EnableMechanicalSim");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_EnableMechanicalSim) == 0x000001, "Wrong size on ChaosWheeledVehicleMovementComponent_EnableMechanicalSim");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_EnableMechanicalSim, InState) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_EnableMechanicalSim::InState' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.EnableSuspension
// 0x0001 (0x0001 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_EnableSuspension final
{
public:
	bool                                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_EnableSuspension) == 0x000001, "Wrong alignment on ChaosWheeledVehicleMovementComponent_EnableSuspension");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_EnableSuspension) == 0x000001, "Wrong size on ChaosWheeledVehicleMovementComponent_EnableSuspension");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_EnableSuspension, InState) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_EnableSuspension::InState' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.EnableWheelFriction
// 0x0001 (0x0001 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_EnableWheelFriction final
{
public:
	bool                                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_EnableWheelFriction) == 0x000001, "Wrong alignment on ChaosWheeledVehicleMovementComponent_EnableWheelFriction");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_EnableWheelFriction) == 0x000001, "Wrong size on ChaosWheeledVehicleMovementComponent_EnableWheelFriction");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_EnableWheelFriction, InState) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_EnableWheelFriction::InState' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.GetEngineMaxRotationSpeed
// 0x0004 (0x0004 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed) == 0x000004, "Wrong size on ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed, ReturnValue) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.GetEngineRotationSpeed
// 0x0004 (0x0004 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed) == 0x000004, "Wrong size on ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed, ReturnValue) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.GetNumWheels
// 0x0004 (0x0004 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_GetNumWheels final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_GetNumWheels) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_GetNumWheels");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_GetNumWheels) == 0x000004, "Wrong size on ChaosWheeledVehicleMovementComponent_GetNumWheels");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetNumWheels, ReturnValue) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_GetNumWheels::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.GetWheelState
// 0x0040 (0x0040 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_GetWheelState final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWheelStatus                           ReturnValue;                                       // 0x0004(0x003C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_GetWheelState) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_GetWheelState");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_GetWheelState) == 0x000040, "Wrong size on ChaosWheeledVehicleMovementComponent_GetWheelState");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetWheelState, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_GetWheelState::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetWheelState, ReturnValue) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_GetWheelState::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.VehicleAnimationInstance.GetVehicle
// 0x0008 (0x0008 - 0x0000)
struct VehicleAnimationInstance_GetVehicle final
{
public:
	class AWheeledVehiclePawn*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleAnimationInstance_GetVehicle) == 0x000008, "Wrong alignment on VehicleAnimationInstance_GetVehicle");
static_assert(sizeof(VehicleAnimationInstance_GetVehicle) == 0x000008, "Wrong size on VehicleAnimationInstance_GetVehicle");
static_assert(offsetof(VehicleAnimationInstance_GetVehicle, ReturnValue) == 0x000000, "Member 'VehicleAnimationInstance_GetVehicle::ReturnValue' has a wrong offset!");

}

