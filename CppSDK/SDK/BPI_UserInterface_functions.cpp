#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_UserInterface

#include "Basic.hpp"

#include "BPI_UserInterface_classes.hpp"
#include "BPI_UserInterface_parameters.hpp"


namespace SDK
{

// Function BPI_UserInterface.BPI_UserInterface_C.ToggleFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFocused                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_UserInterface_C::ToggleFocus(bool IsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_UserInterface_C", "ToggleFocus");

	Params::BPI_UserInterface_C_ToggleFocus Parms{};

	Parms.IsFocused = IsFocused;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_UserInterface.BPI_UserInterface_C.ToggleHover
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHovered                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_UserInterface_C::ToggleHover(bool IsHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_UserInterface_C", "ToggleHover");

	Params::BPI_UserInterface_C_ToggleHover Parms{};

	Parms.IsHovered = IsHovered;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_UserInterface.BPI_UserInterface_C.ToggleEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_UserInterface_C::ToggleEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_UserInterface_C", "ToggleEnabled");

	Params::BPI_UserInterface_C_ToggleEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

