#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPCharacter_Demo

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "FootstepActionsEnum_structs.hpp"
#include "Engine_structs.hpp"
#include "E_GlowstickColor_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HorrorEngineSettings_structs.hpp"
#include "E_CameraSetting_structs.hpp"
#include "Backrooms_structs.hpp"
#include "Backrooms_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPCharacter_Demo.BPCharacter_Demo_C
// 0x05F0 (0x0B10 - 0x0520)
class ABPCharacter_Demo_C final : public AFancyCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0520(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_AimAssistComponent_C*               BP_AimAssistComponent;                             // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ItemMesh;                                          // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVoipAudioComponent*                    UnderwaterAudio;                                   // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVoipAudioComponent*                    VoipAudio;                                         // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVoipAudioComponent*                    RadioAudio;                                        // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVoipManagerComponent*                  VoipManager;                                       // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Breathing_point;                                   // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LocalCard;                                         // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Nametag;                                           // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Legs;                                              // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnNoiseEmitterComponent*             PawnNoiseEmitter;                                  // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    FlashlightArm;                                     // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnSensingComponent*                  PawnSensing;                                       // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_3_CameraAlpha_D359B8424FCC0E9DEA2152AC8AC4DD3B; // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_3_Ringing_D359B8424FCC0E9DEA2152AC8AC4DD3B; // 0x0594(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_3_Vignette_D359B8424FCC0E9DEA2152AC8AC4DD3B; // 0x0598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_3_EyeOpen_D359B8424FCC0E9DEA2152AC8AC4DD3B; // 0x059C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_3__Direction_D359B8424FCC0E9DEA2152AC8AC4DD3B; // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1[0x7];                                      // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_3;                                        // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_8_Alpha_DB15FA3D4A9AE3B557E4B5B1F0F6478E; // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_8__Direction_DB15FA3D4A9AE3B557E4B5B1F0F6478E; // 0x05B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B5[0x3];                                      // 0x05B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_8;                                        // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_6_Alpha2_62A7627648056028525FB698DBF1EA3C; // 0x05C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_6_Alpha_62A7627648056028525FB698DBF1EA3C; // 0x05C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_6__Direction_62A7627648056028525FB698DBF1EA3C; // 0x05C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9[0x7];                                      // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_6;                                        // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Climb_Alpha_E0CFA5344DE67FA6AC76729151B1267F;      // 0x05D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Climb__Direction_E0CFA5344DE67FA6AC76729151B1267F; // 0x05DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DD[0x3];                                      // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Climb;                                             // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveToLadder_Alpha_183D3287481A20589013F7AA5BD36722; // 0x05E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MoveToLadder__Direction_183D3287481A20589013F7AA5BD36722; // 0x05EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5ED[0x3];                                      // 0x05ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MoveToLadder;                                      // 0x05F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_7_Alpha2_1CC57C5E48A7286B7D1AA6881A61D32E; // 0x05F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_7_Alpha_1CC57C5E48A7286B7D1AA6881A61D32E; // 0x05FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_7__Direction_1CC57C5E48A7286B7D1AA6881A61D32E; // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_7;                                        // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Plague_Ringing_40AECF8645A31E151684E48FF9C927C5;   // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Plague_Vignette_40AECF8645A31E151684E48FF9C927C5;  // 0x0614(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Plague_EyeOpen_40AECF8645A31E151684E48FF9C927C5;   // 0x0618(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Plague__Direction_40AECF8645A31E151684E48FF9C927C5; // 0x061C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61D[0x3];                                      // 0x061D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Plague;                                            // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Bob_Buoyancy_C74565444B6ED2300150BBA0C909B04A;     // 0x0628(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Bob__Direction_C74565444B6ED2300150BBA0C909B04A;   // 0x062C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62D[0x3];                                      // 0x062D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Bob;                                               // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoClipFall_Alpha_F1E50F3342F23ADFA8A23BA6A9BFFDB6; // 0x0638(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            NoClipFall__Direction_F1E50F3342F23ADFA8A23BA6A9BFFDB6; // 0x063C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63D[0x3];                                      // 0x063D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     NoClipFall;                                        // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_Fade3_19180EAC4BD70296B2F1DEB47E219483; // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_Fade2_19180EAC4BD70296B2F1DEB47E219483; // 0x064C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_Fade_19180EAC4BD70296B2F1DEB47E219483;  // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_EyeOpen_19180EAC4BD70296B2F1DEB47E219483; // 0x0654(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_5__Direction_19180EAC4BD70296B2F1DEB47E219483; // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_659[0x7];                                      // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_5;                                        // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_4_EyeOpen_20BF1E9A4227EABC75504A815F7E9013; // 0x0668(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_4__Direction_20BF1E9A4227EABC75504A815F7E9013; // 0x066C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66D[0x3];                                      // 0x066D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_4;                                        // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_Vignette_CA38DEFF4E786FAC5BE4A286FEC0ED8C; // 0x0678(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_EyeOpen_CA38DEFF4E786FAC5BE4A286FEC0ED8C; // 0x067C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_CA38DEFF4E786FAC5BE4A286FEC0ED8C; // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiquidPainEffects_Vignette_5817604E42528FA6E8B5BBA1AE0C0946; // 0x0690(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LiquidPainEffects_Bluriness_5817604E42528FA6E8B5BBA1AE0C0946; // 0x0694(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LiquidPainEffects__Direction_5817604E42528FA6E8B5BBA1AE0C0946; // 0x0698(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699[0x7];                                      // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LiquidPainEffects;                                 // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_Alpha_9194A2554724E66565442A99606505D1; // 0x06A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_9194A2554724E66565442A99606505D1; // 0x06AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AD[0x3];                                      // 0x06AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sanity_ChromaticAberration_D2366F7145761D954DA5E3AF1C29E6FE; // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sanity_Flare_D2366F7145761D954DA5E3AF1C29E6FE;     // 0x06BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Sanity__Direction_D2366F7145761D954DA5E3AF1C29E6FE; // 0x06C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C1[0x7];                                      // 0x06C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Sanity;                                            // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FearTimeline_Animation_09874B8E4CDABC74471DA18DDE3F4BF1; // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FearTimeline__Direction_09874B8E4CDABC74471DA18DDE3F4BF1; // 0x06D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D5[0x3];                                      // 0x06D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FearTimeline;                                      // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BalanceFallTimeline_Rotation_B88008094E1559D6D2498B81EDC83E10; // 0x06E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BalanceFallTimeline__Direction_B88008094E1559D6D2498B81EDC83E10; // 0x06E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E5[0x3];                                      // 0x06E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BalanceFallTimeline;                               // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BalanceTimeline_Rotation_A00783314A9B792244AF63BFF4BCC63A; // 0x06F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BalanceTimeline__Direction_A00783314A9B792244AF63BFF4BCC63A; // 0x06F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F5[0x3];                                      // 0x06F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BalanceTimeline;                                   // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Crouch2_Scale_84DBE3CB40EB8DCD6709CDA38F0F9644;    // 0x0700(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Crouch2_Z_84DBE3CB40EB8DCD6709CDA38F0F9644;        // 0x0704(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Crouch2__Direction_84DBE3CB40EB8DCD6709CDA38F0F9644; // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_709[0x7];                                      // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Crouch2;                                           // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Horizontal_Offset_Frequency_75C3403D4BC3CFC45C5EBBBD45191750; // 0x0718(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_ScreenHopFrequency_75C3403D4BC3CFC45C5EBBBD45191750; // 0x071C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_WarpBeltIntensity_75C3403D4BC3CFC45C5EBBBD45191750; // 0x0720(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_ColorTornadoIntensity_75C3403D4BC3CFC45C5EBBBD45191750; // 0x0724(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Signal_Distortion_Intensity_75C3403D4BC3CFC45C5EBBBD45191750; // 0x0728(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Tracking_Noise_Level_75C3403D4BC3CFC45C5EBBBD45191750; // 0x072C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Chromatic_Distance_75C3403D4BC3CFC45C5EBBBD45191750; // 0x0730(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_75C3403D4BC3CFC45C5EBBBD45191750; // 0x0734(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_735[0x3];                                      // 0x0735(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrightnessTimeline_Screen_Brightness_D6E81A0341FBFEAD972B919617750DAD; // 0x0740(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BrightnessTimeline__Direction_D6E81A0341FBFEAD972B919617750DAD; // 0x0744(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_745[0x3];                                      // 0x0745(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BrightnessTimeline;                                // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallTimeline_Roll_BAADBFCD450D5B6EFCED20A817513817; // 0x0750(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallTimeline_Z_BAADBFCD450D5B6EFCED20A817513817;   // 0x0754(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FallTimeline__Direction_BAADBFCD450D5B6EFCED20A817513817; // 0x0758(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_759[0x7];                                      // 0x0759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FallTimeline;                                      // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InsanityTimeline_Random_Horizontal_Offset_Strength_02BB79164A751B3E27114BA6D8F61BB1; // 0x0768(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InsanityTimeline_Screen_Hop_Intensity_02BB79164A751B3E27114BA6D8F61BB1; // 0x076C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InsanityTimeline_Random_Horizontal_Offset_Frequency_02BB79164A751B3E27114BA6D8F61BB1; // 0x0770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InsanityTimeline_ScreenHopFrequency_02BB79164A751B3E27114BA6D8F61BB1; // 0x0774(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InsanityTimeline_WarpBeltIntensity_02BB79164A751B3E27114BA6D8F61BB1; // 0x0778(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InsanityTimeline_ColorTornadoIntensity_02BB79164A751B3E27114BA6D8F61BB1; // 0x077C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InsanityTimeline_Signal_Distortion_Intensity_02BB79164A751B3E27114BA6D8F61BB1; // 0x0780(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InsanityTimeline_Tracking_Noise_Level_02BB79164A751B3E27114BA6D8F61BB1; // 0x0784(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InsanityTimeline_Chromatic_Distance_02BB79164A751B3E27114BA6D8F61BB1; // 0x0788(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            InsanityTimeline__Direction_02BB79164A751B3E27114BA6D8F61BB1; // 0x078C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78D[0x3];                                      // 0x078D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     InsanityTimeline;                                  // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            KeepLookingTimeline__Direction_FB05A2E74D6D30EC780AFAB334E0BBA6; // 0x0798(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_799[0x7];                                      // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     KeepLookingTimeline;                               // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnToActorTimeline_Smooth_EF6BC6224E4DC04E93E645995648410A; // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnToActorTimeline_Direct_EF6BC6224E4DC04E93E645995648410A; // 0x07AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TurnToActorTimeline__Direction_EF6BC6224E4DC04E93E645995648410A; // 0x07B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TurnToActorTimeline;                               // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            KeepLookingLocationTimeline__Direction_1ECA7B3F4E58B8832CFBB9ACFC1482B3; // 0x07C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C1[0x7];                                      // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     KeepLookingLocationTimeline;                       // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnToLocationTimeline_Smooth_F6DCA4994E9C428E02C3D09CD16816C9; // 0x07D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnToLocationTimeline_Direct_F6DCA4994E9C428E02C3D09CD16816C9; // 0x07D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TurnToLocationTimeline__Direction_F6DCA4994E9C428E02C3D09CD16816C9; // 0x07D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D9[0x7];                                      // 0x07D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TurnToLocationTimeline;                            // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaticTimeline_Random_Horizontal_Offset_Strength_B8D8B0924468125070F534B82FEED15A; // 0x07E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaticTimeline_Screen_Hop_Intensity_B8D8B0924468125070F534B82FEED15A; // 0x07EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaticTimeline_Random_Horizontal_Offset_Frequency_B8D8B0924468125070F534B82FEED15A; // 0x07F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaticTimeline_ScreenHopFrequency_B8D8B0924468125070F534B82FEED15A; // 0x07F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaticTimeline_WarpBeltIntensity_B8D8B0924468125070F534B82FEED15A; // 0x07F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaticTimeline_ColorTornadoIntensity_B8D8B0924468125070F534B82FEED15A; // 0x07FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaticTimeline_Signal_Distortion_Intensity_B8D8B0924468125070F534B82FEED15A; // 0x0800(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaticTimeline_Tracking_Noise_Level_B8D8B0924468125070F534B82FEED15A; // 0x0804(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaticTimeline_Chromatic_Distance_B8D8B0924468125070F534B82FEED15A; // 0x0808(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            StaticTimeline__Direction_B8D8B0924468125070F534B82FEED15A; // 0x080C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_80D[0x3];                                      // 0x080D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     StaticTimeline;                                    // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanRight_Offset_C47E33074D47E917512F4F8517EDDA78; // 0x0818(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanRight_Rotation_C47E33074D47E917512F4F8517EDDA78; // 0x081C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LeanRight__Direction_C47E33074D47E917512F4F8517EDDA78; // 0x0820(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_821[0x7];                                      // 0x0821(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LeanRight;                                         // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanLeft_Offset_17DE22D544C8BED35C8F5881C0002D9E;  // 0x0830(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanLeft_Rotation_17DE22D544C8BED35C8F5881C0002D9E; // 0x0834(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LeanLeft__Direction_17DE22D544C8BED35C8F5881C0002D9E; // 0x0838(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LeanLeft;                                          // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseSensitivity;                                  // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x084C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsSprinting;                                       // 0x084D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84E[0x2];                                      // 0x084E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Stamina;                                           // 0x0850(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxStamina;                                        // 0x0854(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBurnedOut;                                       // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldUseStamina;                                  // 0x0859(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_85A[0x6];                                      // 0x085A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               PP_VCR;                                            // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasSeenEntity;                                     // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_869[0x3];                                      // 0x0869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentFOV;                                        // 0x086C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameEnd_UI_2_C*                        GameEndUI;                                         // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastFootLocation;                                  // 0x0878(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_884[0x4];                                      // 0x0884(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHorrorEngineSettings                  GameSettings;                                      // 0x0888(0x00A0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepSize;                                          // 0x0928(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LookAtActorSequenceCounter;                        // 0x092C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PlayerCurrentRotation;                             // 0x0930(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Looking;                                           // 0x093C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFlashlightOn;                                    // 0x093D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_93E[0x2];                                      // 0x093E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Pitch;                                             // 0x0940(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanKill;                                           // 0x0944(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_945[0x3];                                      // 0x0945(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        StaticSound;                                       // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DidJumpscare;                                      // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanJumpscare;                                      // 0x0951(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPossessed;                                       // 0x0952(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          ShouldLongCrouch;                                  // 0x0953(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         StandingHeight;                                    // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrouchAmount;                                      // 0x0958(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVOIPActivated_;                                  // 0x095C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95D[0x3];                                      // 0x095D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkSpeed;                                         // 0x0960(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         SprintSpeed;                                       // 0x0964(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         StaminaToAdd;                                      // 0x0968(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldScaleCrouch;                                 // 0x096C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96D[0x3];                                      // 0x096D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LegsOffset;                                        // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlayVoiceSound;                              // 0x0974(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_CameraSetting                               VHSSetting;                                        // 0x0975(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertMouseY;                                      // 0x0976(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShowBody;                                          // 0x0977(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Color;                                             // 0x0978(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UInGame_UI_C*                           InGameUI;                                          // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FWeightedBlendable>             WeightedBlendables;                                // 0x0990(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsBalancing;                                       // 0x09A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBalancingRight;                                  // 0x09A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFallingBalance;                                  // 0x09A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A3[0x5];                                      // 0x09A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        HeartbeatSound;                                    // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WhisperSound;                                      // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                InspectUI;                                         // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Card_C*                             Card;                                              // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayFootsteps;                                     // 0x09C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsClimbing;                                        // 0x09C9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9CA[0x2];                                      // 0x09CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentEquipSlot;                                  // 0x09CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Item_C*                             CurrentItem_Rep;                                   // 0x09D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLiDAROn;                                         // 0x09D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsHoldingRope;                                     // 0x09D9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_9DA[0x6];                                      // 0x09DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        SanityWarnSound;                                   // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_Blinking;                                       // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      SanitySystem;                                      // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMotionScanner;                                   // 0x09F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          CanTalk;                                           // 0x09F9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsingPushToTalk;                                   // 0x09FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9FB[0x1];                                      // 0x09FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FOV;                                               // 0x09FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentHound;                                      // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SmoothRotation;                                    // 0x0A08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A09[0x7];                                      // 0x0A09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SwimmingArms;                                      // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SwimmingSpring;                                    // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlaySwimmingArms;                                  // 0x0A20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A21[0x7];                                      // 0x0A21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               PP_Helmet;                                         // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_Helmet_Blur;                                    // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasDivingHelmet;                                   // 0x0A38(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_A39[0x7];                                      // 0x0A39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DivingHelmet_C*                     DivingHelmet;                                      // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasWaterPhysics;                                   // 0x0A48(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_A49[0x3];                                      // 0x0A49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoClipStart;                                       // 0x0A4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InDivingCage;                                      // 0x0A50(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsClimbingLadder;                                  // 0x0A51(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUsingRadio;                                      // 0x0A52(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPushingToTalk;                                   // 0x0A53(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A54[0x4];                                      // 0x0A54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_VOIPInGame_C*                        W_VOIPHUDRef;                                      // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopbackVoice;                                     // 0x0A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAffectingWheat;                                  // 0x0A61(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          ShouldSink;                                        // 0x0A62(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayLandedSound;                                   // 0x0A63(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PA_Anims;                                          // 0x0A64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A65[0x3];                                      // 0x0A65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Pushable_C*                         CurrentPushableActor_0;                            // 0x0A68(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PA_CurrentLoc;                                     // 0x0A70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PA_TargetLoc;                                      // 0x0A7C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PA_CurrentRot;                                     // 0x0A88(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               PA_TargetRot;                                      // 0x0A94(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PA_NoObstaclesF;                                   // 0x0AA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PA_NoObstaclesR;                                   // 0x0AA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA2[0x6];                                      // 0x0AA2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        HydroSound;                                        // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasFallDamage;                                     // 0x0AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPushing;                                         // 0x0AB1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB2[0x2];                                      // 0x0AB2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlashlightCheckLength;                             // 0x0AB4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPush;                                           // 0x0AB8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB9[0x3];                                      // 0x0AB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentLadderLocation;                             // 0x0ABC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentLadderRotation;                             // 0x0AC8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD4[0x4];                                      // 0x0AD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Pool_Ladder_C*                      CurrentLadder;                                     // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTurn;                                           // 0x0AE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldRagdoll;                                     // 0x0AE1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShowCamera;                                        // 0x0AE2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          CanJumpElevator;                                   // 0x0AE3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUsingFlaregun;                                   // 0x0AE4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	E_GlowstickColor                              IsHoldingGlowstick;                                // 0x0AE5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE6[0x2];                                      // 0x0AE6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrouchWalkSpeed;                                   // 0x0AE8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Seconds;                                     // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseLookUpRate;                                    // 0x0AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseTurnRate;                                      // 0x0AF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTangled;                                         // 0x0AF8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AF9[0x3];                                      // 0x0AF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControllerSensitivity;                             // 0x0AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVOIPTalker*                            PlayerTalker;                                      // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ControllerFeedback;                                // 0x0B08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WantsToCrouchAfterLanding;                         // 0x0B09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUsingGamepad;                                    // 0x0B0A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BPCharacter_Demo(int32 EntryPoint);
	void OnLandedCrouchCheck();
	void ResetJumpOffset();
	void OffsetJump();
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_1(float AxisValue);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_0(float AxisValue);
	void OC_StartSwimming();
	void SRV_OrientMovement();
	void StopBob();
	void BobWater();
	void OrientMovement();
	void StartUnderwater();
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void HideSwimmingArms(const struct FVector& Loc);
	void SnapToLand();
	void OnQueryFinished(class UEnvQueryInstanceBlueprintWrapper* QueryInstance, EEnvQueryStatus QueryStatus);
	void SRV_Launch(float Input);
	void TogglePlayerLegs(bool IsHidden);
	void StopFlashlightCheck(bool ShouldCheck, class FName Tag);
	void StartFlashlightCheck(bool ShouldAdd, class FName Tag);
	void OnFall();
	void StopBalance();
	void OnBalance();
	void StartBalance(bool Direction, bool First);
	void ToggleBlur(bool ShouldBlur);
	void ShowInteractText(const class FText& Text);
	void ChangeCrosshairVisibility(bool IsVisible);
	void HideLegs(bool Visible);
	void CreateLegs();
	void SenseClient();
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void OnLanded(const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void BndEvt__BPCharacter_Demo_PawnSensing_K2Node_ComponentBoundEvent_0_SeePawnDelegate__DelegateSignature(class APawn* Pawn);
	void Burnout();
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181(float AxisValue);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue);
	void FinishKeySequence();
	void SetCrouchWalkSpeedServer(float Speed);
	void ClimbCaveLadder();
	void ToggleItem(class AActor* Actor);
	void GarageStepHeight();
	void ClimbLadder();
	void HideItem(bool IsVisible);
	void Climb94Rope();
	void MC_RopePosition(const struct FVector& AttachEnd, class AActor* Actor);
	void StopClimbRope();
	void ClimbRope(const struct FTransform& StartingTransform, const struct FTransform& TargetTransform);
	void SetIsClimbing(bool IsClimbing_0);
	void MC_ShowCard();
	void ToggleFlash(class AActor* Actor);
	void OnFlashlightEntity(class AActor* Entity);
	void HidePlayer(bool Hidden);
	void RopePitch(bool Activate);
	void ShowCard_Server();
	void SetSprintSpeedServer(float Speed);
	void OnPossess();
	void SetMinPitch();
	void ReceiveDestroyed();
	void KillServer(bool bResetInteractable);
	void KillClient();
	void SetWalkSpeedServer(float Speed);
	void SRV_ResetSanityWarning();
	void SRV_WarnSanity();
	void SRV_PassOut();
	void OC_PassOut();
	void MC_PassOut();
	void PlagueBoat();
	void RemovePlague();
	void MC_Slipped();
	void OC_FadeOut();
	void ResetPlague();
	void StopPlague();
	void StartPlague();
	void OC_UnderwaterMix();
	void OC_CaveExit();
	void OC_NoClip();
	void SRV_Drown();
	void OC_Dive();
	void SRV_Dive();
	void MC_NoClip();
	void OC_UpdateBuoyancy();
	void SRV_UpdateBuoyancy();
	void FadeHelmet();
	void AddHelmetEffects();
	void EquipHelmet();
	void ResetSanityWarning();
	void ResetWarning();
	void WarnSanity();
	void LiquidPain();
	void RemoveHeat();
	void AddHeat();
	void MC_Shocked();
	void ShockedClient();
	void ShockedServer();
	void PlayJumpScare(class ULevelSequence* Sequence, class AActor* Entity, const struct FMovieSceneObjectBindingID& EntityBinding, const struct FMovieSceneObjectBindingID& CameraBinding);
	void PlayCameraShake(class UClass* Shake, float Duration);
	void EndSanity();
	void StopFear();
	void Fear(const struct FHE_Fear& Fear_0);
	void StopAllMovement();
	void HE_LookAtActorSeq();
	void LookAtActor(const struct FHE_LookAtActor& LookAtActors);
	void HE_LookAtLocation_Seq();
	void LookAtLocation(const struct FHE_LookAtLocation& Settings);
	void StopInsanity();
	void PlayInsanity();
	void Fall();
	void PlayBrightness();
	void PlayStatic();
	void PlayItemMontage(class UAnimMontage* Montage, class UStaticMesh* ItemMesh_0, const struct FTransform& Offset);
	void ToggleItemVisible();
	void UpdateFOV();
	void ConsumeCurrent(bool Drop, bool ResetUsage);
	void CheckSpawnedItems();
	void MC_Drop(const struct FVector& Location);
	void MC_Pickup(const struct FVector& Location);
	void DropAll();
	void HideRightArm(bool Hide);
	void SpeedBoostClient();
	void StaminaBoost();
	void SpeedBoost();
	void HideLeftArm(bool Hide);
	void TryPickup();
	void UseItem_SERVER(class ABP_Item_C* Item);
	void DropItem_SERVER(class FName ItemType);
	void UnequipItem();
	void Equip();
	void PickUp_SERVER(class ADroppedItem* Item);
	void DestroyEquipItem_SERVER();
	void SpawnEquipItem_SERVER(class UClass* ItemClass);
	void DeleteVoice();
	void OC_SetupVoice();
	void SRV_ToggleRadio(bool Enabled);
	void BndEvt__BPCharacter_Demo_CarrySystem_K2Node_ComponentBoundEvent_1_OnCarryEvent__DelegateSignature(class UFancyCarrySystemCarryable* Carryable);
	void BndEvt__BPCharacter_Demo_CarrySystem_K2Node_ComponentBoundEvent_0_OnCarryEvent__DelegateSignature(class UFancyCarrySystemCarryable* Carryable);
	void SRV_BlockPushing(class ABP_Pushable_C* Pushable);
	void StopPushing();
	void ReceiveTick(float DeltaSeconds);
	void StopPushingActor_MC(class ABP_Pushable_C* PushableActor);
	void StopPushingActor_SERVER(class ABP_Pushable_C* PushableActor);
	void StartPushingActor_MC(class ABP_Pushable_C* PushableActor, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void StartPushingActor_SERVER(class ABP_Pushable_C* PushableActor, const struct FVector& B, const struct FRotator& NewRotation);
	void StopPushingActor();
	void StartPushingActor(class ABP_Pushable_C* PushableActor);
	void MoveToBottom();
	void StartClimbDown();
	void StartTransition(class ABP_Pool_Ladder_C* PoolLadder, float SpeedMultiplier);
	void MoveToTop();
	void StopClimbingLadder();
	void StartClimbingLadder(class ABP_Pool_Ladder_C* PoolLadder, float SpeedMultiplier);
	void StartClimbingBot_SERVER();
	void StartClimbingTop();
	void StartClimbing();
	void InpAxisKeyEvt_Gamepad_LeftY_K2Node_InputAxisKeyEvent_1(float AxisValue);
	void InpAxisKeyEvt_Gamepad_LeftX_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void InpActEvt_Crouch_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_LeanRight_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_LeanRight_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_LeanLeft_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_LeanLeft_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_7(const struct FKey& Key);
	void OnCompleted_9B0709674BA2A8EC63179B9F269BC874(class FName NotifyName);
	void OnBlendOut_9B0709674BA2A8EC63179B9F269BC874(class FName NotifyName);
	void OnInterrupted_9B0709674BA2A8EC63179B9F269BC874(class FName NotifyName);
	void OnNotifyBegin_9B0709674BA2A8EC63179B9F269BC874(class FName NotifyName);
	void OnNotifyEnd_9B0709674BA2A8EC63179B9F269BC874(class FName NotifyName);
	void OnCompleted_F14B8C27489433D0AC4E5981B3D35BB2(class FName NotifyName);
	void OnBlendOut_F14B8C27489433D0AC4E5981B3D35BB2(class FName NotifyName);
	void OnInterrupted_F14B8C27489433D0AC4E5981B3D35BB2(class FName NotifyName);
	void OnNotifyBegin_F14B8C27489433D0AC4E5981B3D35BB2(class FName NotifyName);
	void OnNotifyEnd_F14B8C27489433D0AC4E5981B3D35BB2(class FName NotifyName);
	void InpActEvt_ShowIDCard_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_10(const struct FKey& Key);
	void OnCompleted_18C90247430847ACB000EAA715356939(class FName NotifyName);
	void OnBlendOut_18C90247430847ACB000EAA715356939(class FName NotifyName);
	void OnInterrupted_18C90247430847ACB000EAA715356939(class FName NotifyName);
	void OnNotifyBegin_18C90247430847ACB000EAA715356939(class FName NotifyName);
	void OnNotifyEnd_18C90247430847ACB000EAA715356939(class FName NotifyName);
	void OnCompleted_CBC91CE2447BECCE0E9C54A0894758D6(class FName NotifyName);
	void OnBlendOut_CBC91CE2447BECCE0E9C54A0894758D6(class FName NotifyName);
	void OnInterrupted_CBC91CE2447BECCE0E9C54A0894758D6(class FName NotifyName);
	void OnNotifyBegin_CBC91CE2447BECCE0E9C54A0894758D6(class FName NotifyName);
	void OnNotifyEnd_CBC91CE2447BECCE0E9C54A0894758D6(class FName NotifyName);
	void OnCompleted_DB35E08445921C5BA12E20891BD497DB(class FName NotifyName);
	void OnBlendOut_DB35E08445921C5BA12E20891BD497DB(class FName NotifyName);
	void OnInterrupted_DB35E08445921C5BA12E20891BD497DB(class FName NotifyName);
	void OnNotifyBegin_DB35E08445921C5BA12E20891BD497DB(class FName NotifyName);
	void OnNotifyEnd_DB35E08445921C5BA12E20891BD497DB(class FName NotifyName);
	void OnCompleted_4D724B00488829DB3EB49DB666B0EC0D(class FName NotifyName);
	void OnBlendOut_4D724B00488829DB3EB49DB666B0EC0D(class FName NotifyName);
	void OnInterrupted_4D724B00488829DB3EB49DB666B0EC0D(class FName NotifyName);
	void OnNotifyBegin_4D724B00488829DB3EB49DB666B0EC0D(class FName NotifyName);
	void OnNotifyEnd_4D724B00488829DB3EB49DB666B0EC0D(class FName NotifyName);
	void OnCompleted_556A838A4469A7E2C6BDC68317F1227A(class FName NotifyName);
	void OnBlendOut_556A838A4469A7E2C6BDC68317F1227A(class FName NotifyName);
	void OnInterrupted_556A838A4469A7E2C6BDC68317F1227A(class FName NotifyName);
	void OnNotifyBegin_556A838A4469A7E2C6BDC68317F1227A(class FName NotifyName);
	void OnNotifyEnd_556A838A4469A7E2C6BDC68317F1227A(class FName NotifyName);
	void OnCompleted_D29E887443F8BB27A41C6A897CCFA477(class FName NotifyName);
	void OnBlendOut_D29E887443F8BB27A41C6A897CCFA477(class FName NotifyName);
	void OnInterrupted_D29E887443F8BB27A41C6A897CCFA477(class FName NotifyName);
	void OnNotifyBegin_D29E887443F8BB27A41C6A897CCFA477(class FName NotifyName);
	void OnNotifyEnd_D29E887443F8BB27A41C6A897CCFA477(class FName NotifyName);
	void InpActEvt_Use_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Inventory_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_ItemSlot3_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_ItemSlot2_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_ItemSlot1_K2Node_InputActionEvent_15(const struct FKey& Key);
	void OnCompleted_51A4DCE148BC0C00149B8794698E33F5(class FName NotifyName);
	void OnBlendOut_51A4DCE148BC0C00149B8794698E33F5(class FName NotifyName);
	void OnInterrupted_51A4DCE148BC0C00149B8794698E33F5(class FName NotifyName);
	void OnNotifyBegin_51A4DCE148BC0C00149B8794698E33F5(class FName NotifyName);
	void OnNotifyEnd_51A4DCE148BC0C00149B8794698E33F5(class FName NotifyName);
	void OnCompleted_70F3CD7E4920E00B15625A85BC07DB8D(class FName NotifyName);
	void OnBlendOut_70F3CD7E4920E00B15625A85BC07DB8D(class FName NotifyName);
	void OnInterrupted_70F3CD7E4920E00B15625A85BC07DB8D(class FName NotifyName);
	void OnNotifyBegin_70F3CD7E4920E00B15625A85BC07DB8D(class FName NotifyName);
	void OnNotifyEnd_70F3CD7E4920E00B15625A85BC07DB8D(class FName NotifyName);
	void OnCompleted_5F0718B741225A4F928EAFA37DEBB424(class FName NotifyName);
	void OnBlendOut_5F0718B741225A4F928EAFA37DEBB424(class FName NotifyName);
	void OnInterrupted_5F0718B741225A4F928EAFA37DEBB424(class FName NotifyName);
	void OnNotifyBegin_5F0718B741225A4F928EAFA37DEBB424(class FName NotifyName);
	void OnNotifyEnd_5F0718B741225A4F928EAFA37DEBB424(class FName NotifyName);
	void Bob__UpdateFunc();
	void Bob__FinishedFunc();
	void BalanceFallTimeline__UpdateFunc();
	void BalanceFallTimeline__FinishedFunc();
	void BalanceTimeline__UpdateFunc();
	void BalanceTimeline__FinishedFunc();
	void Crouch2__UpdateFunc();
	void Crouch2__FinishedFunc();
	void StaticTimeline__UpdateFunc();
	void StaticTimeline__FinishedFunc();
	void LeanRight__UpdateFunc();
	void LeanRight__FinishedFunc();
	void LeanLeft__UpdateFunc();
	void LeanLeft__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_3__Breath__EventFunc();
	void Timeline_3__CameraAttach__EventFunc();
	void Timeline_3__UpdateFunc();
	void Timeline_3__FinishedFunc();
	void Plague__Breath__EventFunc();
	void Plague__UpdateFunc();
	void Plague__FinishedFunc();
	void NoClipFall__UpdateFunc();
	void NoClipFall__FinishedFunc();
	void Timeline_5__Closed__EventFunc();
	void Timeline_5__UpdateFunc();
	void Timeline_5__FinishedFunc();
	void Timeline_4__Closed__EventFunc();
	void Timeline_4__UpdateFunc();
	void Timeline_4__FinishedFunc();
	void Timeline_2__Halfway__EventFunc();
	void Timeline_2__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void LiquidPainEffects__Kill__EventFunc();
	void LiquidPainEffects__UpdateFunc();
	void LiquidPainEffects__FinishedFunc();
	void Sanity__UpdateFunc();
	void Sanity__FinishedFunc();
	void FearTimeline__UpdateFunc();
	void FearTimeline__FinishedFunc();
	void KeepLookingTimeline__UpdateFunc();
	void KeepLookingTimeline__FinishedFunc();
	void TurnToActorTimeline__UpdateFunc();
	void TurnToActorTimeline__FinishedFunc();
	void KeepLookingLocationTimeline__UpdateFunc();
	void KeepLookingLocationTimeline__FinishedFunc();
	void TurnToLocationTimeline__UpdateFunc();
	void TurnToLocationTimeline__FinishedFunc();
	void InsanityTimeline__UpdateFunc();
	void InsanityTimeline__FinishedFunc();
	void FallTimeline__UpdateFunc();
	void FallTimeline__FinishedFunc();
	void BrightnessTimeline__UpdateFunc();
	void BrightnessTimeline__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void Timeline_8__UpdateFunc();
	void Timeline_8__FinishedFunc();
	void Timeline_6__UpdateFunc();
	void Timeline_6__FinishedFunc();
	void Climb__UpdateFunc();
	void Climb__FinishedFunc();
	void Timeline_7__UpdateFunc();
	void Timeline_7__FinishedFunc();
	void MoveToLadder__UpdateFunc();
	void MoveToLadder__FinishedFunc();
	void UserConstructionScript();
	void AddStamina();
	void RemoveStamina();
	void HasRoom(float Distance, bool* CanLean);
	void SetPostProcessing(float Chromatic_Distance, float Tracking_Noise_Level, float Signal_Distortion_Intensity, float Color_Tornado_Intensity, float Warp_Belt_Intensity, float Screen_Hop_Frequency, float Random_Horizontal_Offset_Frequency, float Screen_Hop_Intensity, float Random_Horizontal_Offset_Strength);
	void Toggle_Post_Processing(bool Activated);
	void ToggleFlashlight();
	void Headshake(EFootstepActionsEnum FootstepType);
	void StartSprint();
	void StopSprint(bool ShouldStop);
	void Set_Input(bool Enabled);
	void OnRep_IsFlashlightOn();
	void CheckStamina();
	void Create_Static_Sound();
	void OnRep_IsDead();
	void CanSprint(bool* CanSprint_0);
	void OnRep_IsPossessed();
	void ClearWidgets();
	void OnRep_WalkSpeed();
	void OnRep_SprintSpeed();
	void ClearScreen();
	void HideTime();
	void ShowTime();
	void GetBurnoutDuration(float* Delay);
	void CheckLegsOffset();
	void ToggleVHS();
	void ToggleBody(bool IsActivated);
	void OnRep_Color();
	void ToggleCrosshair(bool IsVisible);
	void ToggleInteractText(const class FText& Text);
	void Create_Whisper_Sound();
	void CheckFlashlight();
	void ToggleInventory(bool Visible);
	void CanAction(bool* Variable);
	void InvMove(int32 Index1, int32 Index2);
	void InvSwap(int32 Index1, int32 Index2);
	void InvRemove(int32 Index_0);
	void InvAdd(class ADroppedItem* DroppedItem);
	void InvFindFreeSlot(int32* Array_Index, bool* Found);
	void InvRemoveCurrent(bool ShouldDrop);
	void InvAddByName(class FName ItemName);
	void OnRep_IsLiDAROn();
	void OnRep_IsHoldingRope();
	void InvCheckItem();
	void InvItemCount(int32* ItemCount);
	void SetLiquidPain(float Bluriness, float Vignette);
	void OnRep_IsMotionScanner();
	void TogglePushToTalk(bool UsingPushToTalk_0);
	void ToggleFOV(int32 FOV_0);
	void OnRep_CurrentItem_Rep();
	void CheckForwardMovementInput(float Input, const struct FVector& Direction);
	void CheckJumpMovementInput();
	void CheckStopJumpMovementInput();
	void CheckCrouchMovementInput();
	void CheckStopCrouchMovementInput();
	void ArmSwimming(bool Swimming);
	void ShowSwimmingArms();
	void TeleportWater(TArray<struct FVector>& Locations);
	void OnRep_HasWaterPhysics();
	void OnRep_HasDivingHelmet();
	void OnRep_IsAffectingWheat();
	void OnRep_ShowCamera();
	bool CanLookAround();
	void OnRep_IsUsingFlaregun();
	void OnRep_IsHoldingGlowstick();
	void OnRep_CrouchWalkSpeed();
	void CheckGamepadPushableActorExit();
	bool CanOpenUI();
	void DestroySpawnedItems();
	void PlayRumble(class UForceFeedbackEffect* Rumble);
	void OnRep_ShouldUseStamina();
	void ClampMovement(float In, float* Clamped);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPCharacter_Demo_C">();
	}
	static class ABPCharacter_Demo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPCharacter_Demo_C>();
	}
};
static_assert(alignof(ABPCharacter_Demo_C) == 0x000010, "Wrong alignment on ABPCharacter_Demo_C");
static_assert(sizeof(ABPCharacter_Demo_C) == 0x000B10, "Wrong size on ABPCharacter_Demo_C");
static_assert(offsetof(ABPCharacter_Demo_C, UberGraphFrame) == 0x000520, "Member 'ABPCharacter_Demo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BP_AimAssistComponent) == 0x000528, "Member 'ABPCharacter_Demo_C::BP_AimAssistComponent' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ItemMesh) == 0x000530, "Member 'ABPCharacter_Demo_C::ItemMesh' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, UnderwaterAudio) == 0x000538, "Member 'ABPCharacter_Demo_C::UnderwaterAudio' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, VoipAudio) == 0x000540, "Member 'ABPCharacter_Demo_C::VoipAudio' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, RadioAudio) == 0x000548, "Member 'ABPCharacter_Demo_C::RadioAudio' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, VoipManager) == 0x000550, "Member 'ABPCharacter_Demo_C::VoipManager' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Breathing_point) == 0x000558, "Member 'ABPCharacter_Demo_C::Breathing_point' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LocalCard) == 0x000560, "Member 'ABPCharacter_Demo_C::LocalCard' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Nametag) == 0x000568, "Member 'ABPCharacter_Demo_C::Nametag' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Legs) == 0x000570, "Member 'ABPCharacter_Demo_C::Legs' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PawnNoiseEmitter) == 0x000578, "Member 'ABPCharacter_Demo_C::PawnNoiseEmitter' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, FlashlightArm) == 0x000580, "Member 'ABPCharacter_Demo_C::FlashlightArm' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PawnSensing) == 0x000588, "Member 'ABPCharacter_Demo_C::PawnSensing' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_3_CameraAlpha_D359B8424FCC0E9DEA2152AC8AC4DD3B) == 0x000590, "Member 'ABPCharacter_Demo_C::Timeline_3_CameraAlpha_D359B8424FCC0E9DEA2152AC8AC4DD3B' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_3_Ringing_D359B8424FCC0E9DEA2152AC8AC4DD3B) == 0x000594, "Member 'ABPCharacter_Demo_C::Timeline_3_Ringing_D359B8424FCC0E9DEA2152AC8AC4DD3B' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_3_Vignette_D359B8424FCC0E9DEA2152AC8AC4DD3B) == 0x000598, "Member 'ABPCharacter_Demo_C::Timeline_3_Vignette_D359B8424FCC0E9DEA2152AC8AC4DD3B' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_3_EyeOpen_D359B8424FCC0E9DEA2152AC8AC4DD3B) == 0x00059C, "Member 'ABPCharacter_Demo_C::Timeline_3_EyeOpen_D359B8424FCC0E9DEA2152AC8AC4DD3B' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_3__Direction_D359B8424FCC0E9DEA2152AC8AC4DD3B) == 0x0005A0, "Member 'ABPCharacter_Demo_C::Timeline_3__Direction_D359B8424FCC0E9DEA2152AC8AC4DD3B' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_3) == 0x0005A8, "Member 'ABPCharacter_Demo_C::Timeline_3' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_8_Alpha_DB15FA3D4A9AE3B557E4B5B1F0F6478E) == 0x0005B0, "Member 'ABPCharacter_Demo_C::Timeline_8_Alpha_DB15FA3D4A9AE3B557E4B5B1F0F6478E' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_8__Direction_DB15FA3D4A9AE3B557E4B5B1F0F6478E) == 0x0005B4, "Member 'ABPCharacter_Demo_C::Timeline_8__Direction_DB15FA3D4A9AE3B557E4B5B1F0F6478E' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_8) == 0x0005B8, "Member 'ABPCharacter_Demo_C::Timeline_8' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_6_Alpha2_62A7627648056028525FB698DBF1EA3C) == 0x0005C0, "Member 'ABPCharacter_Demo_C::Timeline_6_Alpha2_62A7627648056028525FB698DBF1EA3C' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_6_Alpha_62A7627648056028525FB698DBF1EA3C) == 0x0005C4, "Member 'ABPCharacter_Demo_C::Timeline_6_Alpha_62A7627648056028525FB698DBF1EA3C' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_6__Direction_62A7627648056028525FB698DBF1EA3C) == 0x0005C8, "Member 'ABPCharacter_Demo_C::Timeline_6__Direction_62A7627648056028525FB698DBF1EA3C' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_6) == 0x0005D0, "Member 'ABPCharacter_Demo_C::Timeline_6' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Climb_Alpha_E0CFA5344DE67FA6AC76729151B1267F) == 0x0005D8, "Member 'ABPCharacter_Demo_C::Climb_Alpha_E0CFA5344DE67FA6AC76729151B1267F' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Climb__Direction_E0CFA5344DE67FA6AC76729151B1267F) == 0x0005DC, "Member 'ABPCharacter_Demo_C::Climb__Direction_E0CFA5344DE67FA6AC76729151B1267F' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Climb) == 0x0005E0, "Member 'ABPCharacter_Demo_C::Climb' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, MoveToLadder_Alpha_183D3287481A20589013F7AA5BD36722) == 0x0005E8, "Member 'ABPCharacter_Demo_C::MoveToLadder_Alpha_183D3287481A20589013F7AA5BD36722' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, MoveToLadder__Direction_183D3287481A20589013F7AA5BD36722) == 0x0005EC, "Member 'ABPCharacter_Demo_C::MoveToLadder__Direction_183D3287481A20589013F7AA5BD36722' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, MoveToLadder) == 0x0005F0, "Member 'ABPCharacter_Demo_C::MoveToLadder' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_7_Alpha2_1CC57C5E48A7286B7D1AA6881A61D32E) == 0x0005F8, "Member 'ABPCharacter_Demo_C::Timeline_7_Alpha2_1CC57C5E48A7286B7D1AA6881A61D32E' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_7_Alpha_1CC57C5E48A7286B7D1AA6881A61D32E) == 0x0005FC, "Member 'ABPCharacter_Demo_C::Timeline_7_Alpha_1CC57C5E48A7286B7D1AA6881A61D32E' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_7__Direction_1CC57C5E48A7286B7D1AA6881A61D32E) == 0x000600, "Member 'ABPCharacter_Demo_C::Timeline_7__Direction_1CC57C5E48A7286B7D1AA6881A61D32E' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_7) == 0x000608, "Member 'ABPCharacter_Demo_C::Timeline_7' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Plague_Ringing_40AECF8645A31E151684E48FF9C927C5) == 0x000610, "Member 'ABPCharacter_Demo_C::Plague_Ringing_40AECF8645A31E151684E48FF9C927C5' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Plague_Vignette_40AECF8645A31E151684E48FF9C927C5) == 0x000614, "Member 'ABPCharacter_Demo_C::Plague_Vignette_40AECF8645A31E151684E48FF9C927C5' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Plague_EyeOpen_40AECF8645A31E151684E48FF9C927C5) == 0x000618, "Member 'ABPCharacter_Demo_C::Plague_EyeOpen_40AECF8645A31E151684E48FF9C927C5' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Plague__Direction_40AECF8645A31E151684E48FF9C927C5) == 0x00061C, "Member 'ABPCharacter_Demo_C::Plague__Direction_40AECF8645A31E151684E48FF9C927C5' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Plague) == 0x000620, "Member 'ABPCharacter_Demo_C::Plague' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Bob_Buoyancy_C74565444B6ED2300150BBA0C909B04A) == 0x000628, "Member 'ABPCharacter_Demo_C::Bob_Buoyancy_C74565444B6ED2300150BBA0C909B04A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Bob__Direction_C74565444B6ED2300150BBA0C909B04A) == 0x00062C, "Member 'ABPCharacter_Demo_C::Bob__Direction_C74565444B6ED2300150BBA0C909B04A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Bob) == 0x000630, "Member 'ABPCharacter_Demo_C::Bob' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, NoClipFall_Alpha_F1E50F3342F23ADFA8A23BA6A9BFFDB6) == 0x000638, "Member 'ABPCharacter_Demo_C::NoClipFall_Alpha_F1E50F3342F23ADFA8A23BA6A9BFFDB6' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, NoClipFall__Direction_F1E50F3342F23ADFA8A23BA6A9BFFDB6) == 0x00063C, "Member 'ABPCharacter_Demo_C::NoClipFall__Direction_F1E50F3342F23ADFA8A23BA6A9BFFDB6' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, NoClipFall) == 0x000640, "Member 'ABPCharacter_Demo_C::NoClipFall' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_5_Fade3_19180EAC4BD70296B2F1DEB47E219483) == 0x000648, "Member 'ABPCharacter_Demo_C::Timeline_5_Fade3_19180EAC4BD70296B2F1DEB47E219483' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_5_Fade2_19180EAC4BD70296B2F1DEB47E219483) == 0x00064C, "Member 'ABPCharacter_Demo_C::Timeline_5_Fade2_19180EAC4BD70296B2F1DEB47E219483' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_5_Fade_19180EAC4BD70296B2F1DEB47E219483) == 0x000650, "Member 'ABPCharacter_Demo_C::Timeline_5_Fade_19180EAC4BD70296B2F1DEB47E219483' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_5_EyeOpen_19180EAC4BD70296B2F1DEB47E219483) == 0x000654, "Member 'ABPCharacter_Demo_C::Timeline_5_EyeOpen_19180EAC4BD70296B2F1DEB47E219483' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_5__Direction_19180EAC4BD70296B2F1DEB47E219483) == 0x000658, "Member 'ABPCharacter_Demo_C::Timeline_5__Direction_19180EAC4BD70296B2F1DEB47E219483' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_5) == 0x000660, "Member 'ABPCharacter_Demo_C::Timeline_5' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_4_EyeOpen_20BF1E9A4227EABC75504A815F7E9013) == 0x000668, "Member 'ABPCharacter_Demo_C::Timeline_4_EyeOpen_20BF1E9A4227EABC75504A815F7E9013' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_4__Direction_20BF1E9A4227EABC75504A815F7E9013) == 0x00066C, "Member 'ABPCharacter_Demo_C::Timeline_4__Direction_20BF1E9A4227EABC75504A815F7E9013' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_4) == 0x000670, "Member 'ABPCharacter_Demo_C::Timeline_4' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_2_Vignette_CA38DEFF4E786FAC5BE4A286FEC0ED8C) == 0x000678, "Member 'ABPCharacter_Demo_C::Timeline_2_Vignette_CA38DEFF4E786FAC5BE4A286FEC0ED8C' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_2_EyeOpen_CA38DEFF4E786FAC5BE4A286FEC0ED8C) == 0x00067C, "Member 'ABPCharacter_Demo_C::Timeline_2_EyeOpen_CA38DEFF4E786FAC5BE4A286FEC0ED8C' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_2__Direction_CA38DEFF4E786FAC5BE4A286FEC0ED8C) == 0x000680, "Member 'ABPCharacter_Demo_C::Timeline_2__Direction_CA38DEFF4E786FAC5BE4A286FEC0ED8C' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_2) == 0x000688, "Member 'ABPCharacter_Demo_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LiquidPainEffects_Vignette_5817604E42528FA6E8B5BBA1AE0C0946) == 0x000690, "Member 'ABPCharacter_Demo_C::LiquidPainEffects_Vignette_5817604E42528FA6E8B5BBA1AE0C0946' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LiquidPainEffects_Bluriness_5817604E42528FA6E8B5BBA1AE0C0946) == 0x000694, "Member 'ABPCharacter_Demo_C::LiquidPainEffects_Bluriness_5817604E42528FA6E8B5BBA1AE0C0946' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LiquidPainEffects__Direction_5817604E42528FA6E8B5BBA1AE0C0946) == 0x000698, "Member 'ABPCharacter_Demo_C::LiquidPainEffects__Direction_5817604E42528FA6E8B5BBA1AE0C0946' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LiquidPainEffects) == 0x0006A0, "Member 'ABPCharacter_Demo_C::LiquidPainEffects' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_1_Alpha_9194A2554724E66565442A99606505D1) == 0x0006A8, "Member 'ABPCharacter_Demo_C::Timeline_1_Alpha_9194A2554724E66565442A99606505D1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_1__Direction_9194A2554724E66565442A99606505D1) == 0x0006AC, "Member 'ABPCharacter_Demo_C::Timeline_1__Direction_9194A2554724E66565442A99606505D1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_1) == 0x0006B0, "Member 'ABPCharacter_Demo_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Sanity_ChromaticAberration_D2366F7145761D954DA5E3AF1C29E6FE) == 0x0006B8, "Member 'ABPCharacter_Demo_C::Sanity_ChromaticAberration_D2366F7145761D954DA5E3AF1C29E6FE' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Sanity_Flare_D2366F7145761D954DA5E3AF1C29E6FE) == 0x0006BC, "Member 'ABPCharacter_Demo_C::Sanity_Flare_D2366F7145761D954DA5E3AF1C29E6FE' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Sanity__Direction_D2366F7145761D954DA5E3AF1C29E6FE) == 0x0006C0, "Member 'ABPCharacter_Demo_C::Sanity__Direction_D2366F7145761D954DA5E3AF1C29E6FE' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Sanity) == 0x0006C8, "Member 'ABPCharacter_Demo_C::Sanity' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, FearTimeline_Animation_09874B8E4CDABC74471DA18DDE3F4BF1) == 0x0006D0, "Member 'ABPCharacter_Demo_C::FearTimeline_Animation_09874B8E4CDABC74471DA18DDE3F4BF1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, FearTimeline__Direction_09874B8E4CDABC74471DA18DDE3F4BF1) == 0x0006D4, "Member 'ABPCharacter_Demo_C::FearTimeline__Direction_09874B8E4CDABC74471DA18DDE3F4BF1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, FearTimeline) == 0x0006D8, "Member 'ABPCharacter_Demo_C::FearTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BalanceFallTimeline_Rotation_B88008094E1559D6D2498B81EDC83E10) == 0x0006E0, "Member 'ABPCharacter_Demo_C::BalanceFallTimeline_Rotation_B88008094E1559D6D2498B81EDC83E10' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BalanceFallTimeline__Direction_B88008094E1559D6D2498B81EDC83E10) == 0x0006E4, "Member 'ABPCharacter_Demo_C::BalanceFallTimeline__Direction_B88008094E1559D6D2498B81EDC83E10' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BalanceFallTimeline) == 0x0006E8, "Member 'ABPCharacter_Demo_C::BalanceFallTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BalanceTimeline_Rotation_A00783314A9B792244AF63BFF4BCC63A) == 0x0006F0, "Member 'ABPCharacter_Demo_C::BalanceTimeline_Rotation_A00783314A9B792244AF63BFF4BCC63A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BalanceTimeline__Direction_A00783314A9B792244AF63BFF4BCC63A) == 0x0006F4, "Member 'ABPCharacter_Demo_C::BalanceTimeline__Direction_A00783314A9B792244AF63BFF4BCC63A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BalanceTimeline) == 0x0006F8, "Member 'ABPCharacter_Demo_C::BalanceTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Crouch2_Scale_84DBE3CB40EB8DCD6709CDA38F0F9644) == 0x000700, "Member 'ABPCharacter_Demo_C::Crouch2_Scale_84DBE3CB40EB8DCD6709CDA38F0F9644' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Crouch2_Z_84DBE3CB40EB8DCD6709CDA38F0F9644) == 0x000704, "Member 'ABPCharacter_Demo_C::Crouch2_Z_84DBE3CB40EB8DCD6709CDA38F0F9644' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Crouch2__Direction_84DBE3CB40EB8DCD6709CDA38F0F9644) == 0x000708, "Member 'ABPCharacter_Demo_C::Crouch2__Direction_84DBE3CB40EB8DCD6709CDA38F0F9644' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Crouch2) == 0x000710, "Member 'ABPCharacter_Demo_C::Crouch2' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_0_Horizontal_Offset_Frequency_75C3403D4BC3CFC45C5EBBBD45191750) == 0x000718, "Member 'ABPCharacter_Demo_C::Timeline_0_Horizontal_Offset_Frequency_75C3403D4BC3CFC45C5EBBBD45191750' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_0_ScreenHopFrequency_75C3403D4BC3CFC45C5EBBBD45191750) == 0x00071C, "Member 'ABPCharacter_Demo_C::Timeline_0_ScreenHopFrequency_75C3403D4BC3CFC45C5EBBBD45191750' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_0_WarpBeltIntensity_75C3403D4BC3CFC45C5EBBBD45191750) == 0x000720, "Member 'ABPCharacter_Demo_C::Timeline_0_WarpBeltIntensity_75C3403D4BC3CFC45C5EBBBD45191750' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_0_ColorTornadoIntensity_75C3403D4BC3CFC45C5EBBBD45191750) == 0x000724, "Member 'ABPCharacter_Demo_C::Timeline_0_ColorTornadoIntensity_75C3403D4BC3CFC45C5EBBBD45191750' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_0_Signal_Distortion_Intensity_75C3403D4BC3CFC45C5EBBBD45191750) == 0x000728, "Member 'ABPCharacter_Demo_C::Timeline_0_Signal_Distortion_Intensity_75C3403D4BC3CFC45C5EBBBD45191750' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_0_Tracking_Noise_Level_75C3403D4BC3CFC45C5EBBBD45191750) == 0x00072C, "Member 'ABPCharacter_Demo_C::Timeline_0_Tracking_Noise_Level_75C3403D4BC3CFC45C5EBBBD45191750' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_0_Chromatic_Distance_75C3403D4BC3CFC45C5EBBBD45191750) == 0x000730, "Member 'ABPCharacter_Demo_C::Timeline_0_Chromatic_Distance_75C3403D4BC3CFC45C5EBBBD45191750' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_0__Direction_75C3403D4BC3CFC45C5EBBBD45191750) == 0x000734, "Member 'ABPCharacter_Demo_C::Timeline_0__Direction_75C3403D4BC3CFC45C5EBBBD45191750' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Timeline_0) == 0x000738, "Member 'ABPCharacter_Demo_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BrightnessTimeline_Screen_Brightness_D6E81A0341FBFEAD972B919617750DAD) == 0x000740, "Member 'ABPCharacter_Demo_C::BrightnessTimeline_Screen_Brightness_D6E81A0341FBFEAD972B919617750DAD' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BrightnessTimeline__Direction_D6E81A0341FBFEAD972B919617750DAD) == 0x000744, "Member 'ABPCharacter_Demo_C::BrightnessTimeline__Direction_D6E81A0341FBFEAD972B919617750DAD' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BrightnessTimeline) == 0x000748, "Member 'ABPCharacter_Demo_C::BrightnessTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, FallTimeline_Roll_BAADBFCD450D5B6EFCED20A817513817) == 0x000750, "Member 'ABPCharacter_Demo_C::FallTimeline_Roll_BAADBFCD450D5B6EFCED20A817513817' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, FallTimeline_Z_BAADBFCD450D5B6EFCED20A817513817) == 0x000754, "Member 'ABPCharacter_Demo_C::FallTimeline_Z_BAADBFCD450D5B6EFCED20A817513817' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, FallTimeline__Direction_BAADBFCD450D5B6EFCED20A817513817) == 0x000758, "Member 'ABPCharacter_Demo_C::FallTimeline__Direction_BAADBFCD450D5B6EFCED20A817513817' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, FallTimeline) == 0x000760, "Member 'ABPCharacter_Demo_C::FallTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline_Random_Horizontal_Offset_Strength_02BB79164A751B3E27114BA6D8F61BB1) == 0x000768, "Member 'ABPCharacter_Demo_C::InsanityTimeline_Random_Horizontal_Offset_Strength_02BB79164A751B3E27114BA6D8F61BB1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline_Screen_Hop_Intensity_02BB79164A751B3E27114BA6D8F61BB1) == 0x00076C, "Member 'ABPCharacter_Demo_C::InsanityTimeline_Screen_Hop_Intensity_02BB79164A751B3E27114BA6D8F61BB1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline_Random_Horizontal_Offset_Frequency_02BB79164A751B3E27114BA6D8F61BB1) == 0x000770, "Member 'ABPCharacter_Demo_C::InsanityTimeline_Random_Horizontal_Offset_Frequency_02BB79164A751B3E27114BA6D8F61BB1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline_ScreenHopFrequency_02BB79164A751B3E27114BA6D8F61BB1) == 0x000774, "Member 'ABPCharacter_Demo_C::InsanityTimeline_ScreenHopFrequency_02BB79164A751B3E27114BA6D8F61BB1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline_WarpBeltIntensity_02BB79164A751B3E27114BA6D8F61BB1) == 0x000778, "Member 'ABPCharacter_Demo_C::InsanityTimeline_WarpBeltIntensity_02BB79164A751B3E27114BA6D8F61BB1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline_ColorTornadoIntensity_02BB79164A751B3E27114BA6D8F61BB1) == 0x00077C, "Member 'ABPCharacter_Demo_C::InsanityTimeline_ColorTornadoIntensity_02BB79164A751B3E27114BA6D8F61BB1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline_Signal_Distortion_Intensity_02BB79164A751B3E27114BA6D8F61BB1) == 0x000780, "Member 'ABPCharacter_Demo_C::InsanityTimeline_Signal_Distortion_Intensity_02BB79164A751B3E27114BA6D8F61BB1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline_Tracking_Noise_Level_02BB79164A751B3E27114BA6D8F61BB1) == 0x000784, "Member 'ABPCharacter_Demo_C::InsanityTimeline_Tracking_Noise_Level_02BB79164A751B3E27114BA6D8F61BB1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline_Chromatic_Distance_02BB79164A751B3E27114BA6D8F61BB1) == 0x000788, "Member 'ABPCharacter_Demo_C::InsanityTimeline_Chromatic_Distance_02BB79164A751B3E27114BA6D8F61BB1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline__Direction_02BB79164A751B3E27114BA6D8F61BB1) == 0x00078C, "Member 'ABPCharacter_Demo_C::InsanityTimeline__Direction_02BB79164A751B3E27114BA6D8F61BB1' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InsanityTimeline) == 0x000790, "Member 'ABPCharacter_Demo_C::InsanityTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, KeepLookingTimeline__Direction_FB05A2E74D6D30EC780AFAB334E0BBA6) == 0x000798, "Member 'ABPCharacter_Demo_C::KeepLookingTimeline__Direction_FB05A2E74D6D30EC780AFAB334E0BBA6' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, KeepLookingTimeline) == 0x0007A0, "Member 'ABPCharacter_Demo_C::KeepLookingTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, TurnToActorTimeline_Smooth_EF6BC6224E4DC04E93E645995648410A) == 0x0007A8, "Member 'ABPCharacter_Demo_C::TurnToActorTimeline_Smooth_EF6BC6224E4DC04E93E645995648410A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, TurnToActorTimeline_Direct_EF6BC6224E4DC04E93E645995648410A) == 0x0007AC, "Member 'ABPCharacter_Demo_C::TurnToActorTimeline_Direct_EF6BC6224E4DC04E93E645995648410A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, TurnToActorTimeline__Direction_EF6BC6224E4DC04E93E645995648410A) == 0x0007B0, "Member 'ABPCharacter_Demo_C::TurnToActorTimeline__Direction_EF6BC6224E4DC04E93E645995648410A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, TurnToActorTimeline) == 0x0007B8, "Member 'ABPCharacter_Demo_C::TurnToActorTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, KeepLookingLocationTimeline__Direction_1ECA7B3F4E58B8832CFBB9ACFC1482B3) == 0x0007C0, "Member 'ABPCharacter_Demo_C::KeepLookingLocationTimeline__Direction_1ECA7B3F4E58B8832CFBB9ACFC1482B3' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, KeepLookingLocationTimeline) == 0x0007C8, "Member 'ABPCharacter_Demo_C::KeepLookingLocationTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, TurnToLocationTimeline_Smooth_F6DCA4994E9C428E02C3D09CD16816C9) == 0x0007D0, "Member 'ABPCharacter_Demo_C::TurnToLocationTimeline_Smooth_F6DCA4994E9C428E02C3D09CD16816C9' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, TurnToLocationTimeline_Direct_F6DCA4994E9C428E02C3D09CD16816C9) == 0x0007D4, "Member 'ABPCharacter_Demo_C::TurnToLocationTimeline_Direct_F6DCA4994E9C428E02C3D09CD16816C9' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, TurnToLocationTimeline__Direction_F6DCA4994E9C428E02C3D09CD16816C9) == 0x0007D8, "Member 'ABPCharacter_Demo_C::TurnToLocationTimeline__Direction_F6DCA4994E9C428E02C3D09CD16816C9' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, TurnToLocationTimeline) == 0x0007E0, "Member 'ABPCharacter_Demo_C::TurnToLocationTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline_Random_Horizontal_Offset_Strength_B8D8B0924468125070F534B82FEED15A) == 0x0007E8, "Member 'ABPCharacter_Demo_C::StaticTimeline_Random_Horizontal_Offset_Strength_B8D8B0924468125070F534B82FEED15A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline_Screen_Hop_Intensity_B8D8B0924468125070F534B82FEED15A) == 0x0007EC, "Member 'ABPCharacter_Demo_C::StaticTimeline_Screen_Hop_Intensity_B8D8B0924468125070F534B82FEED15A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline_Random_Horizontal_Offset_Frequency_B8D8B0924468125070F534B82FEED15A) == 0x0007F0, "Member 'ABPCharacter_Demo_C::StaticTimeline_Random_Horizontal_Offset_Frequency_B8D8B0924468125070F534B82FEED15A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline_ScreenHopFrequency_B8D8B0924468125070F534B82FEED15A) == 0x0007F4, "Member 'ABPCharacter_Demo_C::StaticTimeline_ScreenHopFrequency_B8D8B0924468125070F534B82FEED15A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline_WarpBeltIntensity_B8D8B0924468125070F534B82FEED15A) == 0x0007F8, "Member 'ABPCharacter_Demo_C::StaticTimeline_WarpBeltIntensity_B8D8B0924468125070F534B82FEED15A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline_ColorTornadoIntensity_B8D8B0924468125070F534B82FEED15A) == 0x0007FC, "Member 'ABPCharacter_Demo_C::StaticTimeline_ColorTornadoIntensity_B8D8B0924468125070F534B82FEED15A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline_Signal_Distortion_Intensity_B8D8B0924468125070F534B82FEED15A) == 0x000800, "Member 'ABPCharacter_Demo_C::StaticTimeline_Signal_Distortion_Intensity_B8D8B0924468125070F534B82FEED15A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline_Tracking_Noise_Level_B8D8B0924468125070F534B82FEED15A) == 0x000804, "Member 'ABPCharacter_Demo_C::StaticTimeline_Tracking_Noise_Level_B8D8B0924468125070F534B82FEED15A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline_Chromatic_Distance_B8D8B0924468125070F534B82FEED15A) == 0x000808, "Member 'ABPCharacter_Demo_C::StaticTimeline_Chromatic_Distance_B8D8B0924468125070F534B82FEED15A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline__Direction_B8D8B0924468125070F534B82FEED15A) == 0x00080C, "Member 'ABPCharacter_Demo_C::StaticTimeline__Direction_B8D8B0924468125070F534B82FEED15A' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticTimeline) == 0x000810, "Member 'ABPCharacter_Demo_C::StaticTimeline' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LeanRight_Offset_C47E33074D47E917512F4F8517EDDA78) == 0x000818, "Member 'ABPCharacter_Demo_C::LeanRight_Offset_C47E33074D47E917512F4F8517EDDA78' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LeanRight_Rotation_C47E33074D47E917512F4F8517EDDA78) == 0x00081C, "Member 'ABPCharacter_Demo_C::LeanRight_Rotation_C47E33074D47E917512F4F8517EDDA78' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LeanRight__Direction_C47E33074D47E917512F4F8517EDDA78) == 0x000820, "Member 'ABPCharacter_Demo_C::LeanRight__Direction_C47E33074D47E917512F4F8517EDDA78' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LeanRight) == 0x000828, "Member 'ABPCharacter_Demo_C::LeanRight' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LeanLeft_Offset_17DE22D544C8BED35C8F5881C0002D9E) == 0x000830, "Member 'ABPCharacter_Demo_C::LeanLeft_Offset_17DE22D544C8BED35C8F5881C0002D9E' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LeanLeft_Rotation_17DE22D544C8BED35C8F5881C0002D9E) == 0x000834, "Member 'ABPCharacter_Demo_C::LeanLeft_Rotation_17DE22D544C8BED35C8F5881C0002D9E' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LeanLeft__Direction_17DE22D544C8BED35C8F5881C0002D9E) == 0x000838, "Member 'ABPCharacter_Demo_C::LeanLeft__Direction_17DE22D544C8BED35C8F5881C0002D9E' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LeanLeft) == 0x000840, "Member 'ABPCharacter_Demo_C::LeanLeft' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, MouseSensitivity) == 0x000848, "Member 'ABPCharacter_Demo_C::MouseSensitivity' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsDead) == 0x00084C, "Member 'ABPCharacter_Demo_C::IsDead' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsSprinting) == 0x00084D, "Member 'ABPCharacter_Demo_C::IsSprinting' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Stamina) == 0x000850, "Member 'ABPCharacter_Demo_C::Stamina' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, MaxStamina) == 0x000854, "Member 'ABPCharacter_Demo_C::MaxStamina' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsBurnedOut) == 0x000858, "Member 'ABPCharacter_Demo_C::IsBurnedOut' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ShouldUseStamina) == 0x000859, "Member 'ABPCharacter_Demo_C::ShouldUseStamina' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PP_VCR) == 0x000860, "Member 'ABPCharacter_Demo_C::PP_VCR' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, HasSeenEntity) == 0x000868, "Member 'ABPCharacter_Demo_C::HasSeenEntity' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CurrentFOV) == 0x00086C, "Member 'ABPCharacter_Demo_C::CurrentFOV' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, GameEndUI) == 0x000870, "Member 'ABPCharacter_Demo_C::GameEndUI' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LastFootLocation) == 0x000878, "Member 'ABPCharacter_Demo_C::LastFootLocation' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, GameSettings) == 0x000888, "Member 'ABPCharacter_Demo_C::GameSettings' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StepSize) == 0x000928, "Member 'ABPCharacter_Demo_C::StepSize' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LookAtActorSequenceCounter) == 0x00092C, "Member 'ABPCharacter_Demo_C::LookAtActorSequenceCounter' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PlayerCurrentRotation) == 0x000930, "Member 'ABPCharacter_Demo_C::PlayerCurrentRotation' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Looking) == 0x00093C, "Member 'ABPCharacter_Demo_C::Looking' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsFlashlightOn) == 0x00093D, "Member 'ABPCharacter_Demo_C::IsFlashlightOn' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Pitch) == 0x000940, "Member 'ABPCharacter_Demo_C::Pitch' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CanKill) == 0x000944, "Member 'ABPCharacter_Demo_C::CanKill' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaticSound) == 0x000948, "Member 'ABPCharacter_Demo_C::StaticSound' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, DidJumpscare) == 0x000950, "Member 'ABPCharacter_Demo_C::DidJumpscare' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CanJumpscare) == 0x000951, "Member 'ABPCharacter_Demo_C::CanJumpscare' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsPossessed) == 0x000952, "Member 'ABPCharacter_Demo_C::IsPossessed' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ShouldLongCrouch) == 0x000953, "Member 'ABPCharacter_Demo_C::ShouldLongCrouch' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StandingHeight) == 0x000954, "Member 'ABPCharacter_Demo_C::StandingHeight' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CrouchAmount) == 0x000958, "Member 'ABPCharacter_Demo_C::CrouchAmount' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsVOIPActivated_) == 0x00095C, "Member 'ABPCharacter_Demo_C::IsVOIPActivated_' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, WalkSpeed) == 0x000960, "Member 'ABPCharacter_Demo_C::WalkSpeed' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, SprintSpeed) == 0x000964, "Member 'ABPCharacter_Demo_C::SprintSpeed' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, StaminaToAdd) == 0x000968, "Member 'ABPCharacter_Demo_C::StaminaToAdd' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ShouldScaleCrouch) == 0x00096C, "Member 'ABPCharacter_Demo_C::ShouldScaleCrouch' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LegsOffset) == 0x000970, "Member 'ABPCharacter_Demo_C::LegsOffset' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ShouldPlayVoiceSound) == 0x000974, "Member 'ABPCharacter_Demo_C::ShouldPlayVoiceSound' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, VHSSetting) == 0x000975, "Member 'ABPCharacter_Demo_C::VHSSetting' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InvertMouseY) == 0x000976, "Member 'ABPCharacter_Demo_C::InvertMouseY' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ShowBody) == 0x000977, "Member 'ABPCharacter_Demo_C::ShowBody' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Color) == 0x000978, "Member 'ABPCharacter_Demo_C::Color' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InGameUI) == 0x000988, "Member 'ABPCharacter_Demo_C::InGameUI' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, WeightedBlendables) == 0x000990, "Member 'ABPCharacter_Demo_C::WeightedBlendables' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsBalancing) == 0x0009A0, "Member 'ABPCharacter_Demo_C::IsBalancing' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsBalancingRight) == 0x0009A1, "Member 'ABPCharacter_Demo_C::IsBalancingRight' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsFallingBalance) == 0x0009A2, "Member 'ABPCharacter_Demo_C::IsFallingBalance' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, HeartbeatSound) == 0x0009A8, "Member 'ABPCharacter_Demo_C::HeartbeatSound' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, WhisperSound) == 0x0009B0, "Member 'ABPCharacter_Demo_C::WhisperSound' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InspectUI) == 0x0009B8, "Member 'ABPCharacter_Demo_C::InspectUI' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Card) == 0x0009C0, "Member 'ABPCharacter_Demo_C::Card' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PlayFootsteps) == 0x0009C8, "Member 'ABPCharacter_Demo_C::PlayFootsteps' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsClimbing) == 0x0009C9, "Member 'ABPCharacter_Demo_C::IsClimbing' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CurrentEquipSlot) == 0x0009CC, "Member 'ABPCharacter_Demo_C::CurrentEquipSlot' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CurrentItem_Rep) == 0x0009D0, "Member 'ABPCharacter_Demo_C::CurrentItem_Rep' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsLiDAROn) == 0x0009D8, "Member 'ABPCharacter_Demo_C::IsLiDAROn' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsHoldingRope) == 0x0009D9, "Member 'ABPCharacter_Demo_C::IsHoldingRope' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, SanityWarnSound) == 0x0009E0, "Member 'ABPCharacter_Demo_C::SanityWarnSound' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PP_Blinking) == 0x0009E8, "Member 'ABPCharacter_Demo_C::PP_Blinking' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, SanitySystem) == 0x0009F0, "Member 'ABPCharacter_Demo_C::SanitySystem' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsMotionScanner) == 0x0009F8, "Member 'ABPCharacter_Demo_C::IsMotionScanner' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CanTalk) == 0x0009F9, "Member 'ABPCharacter_Demo_C::CanTalk' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, UsingPushToTalk) == 0x0009FA, "Member 'ABPCharacter_Demo_C::UsingPushToTalk' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, FOV) == 0x0009FC, "Member 'ABPCharacter_Demo_C::FOV' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CurrentHound) == 0x000A00, "Member 'ABPCharacter_Demo_C::CurrentHound' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, SmoothRotation) == 0x000A08, "Member 'ABPCharacter_Demo_C::SmoothRotation' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, SwimmingArms) == 0x000A10, "Member 'ABPCharacter_Demo_C::SwimmingArms' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, SwimmingSpring) == 0x000A18, "Member 'ABPCharacter_Demo_C::SwimmingSpring' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PlaySwimmingArms) == 0x000A20, "Member 'ABPCharacter_Demo_C::PlaySwimmingArms' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PP_Helmet) == 0x000A28, "Member 'ABPCharacter_Demo_C::PP_Helmet' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PP_Helmet_Blur) == 0x000A30, "Member 'ABPCharacter_Demo_C::PP_Helmet_Blur' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, HasDivingHelmet) == 0x000A38, "Member 'ABPCharacter_Demo_C::HasDivingHelmet' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, DivingHelmet) == 0x000A40, "Member 'ABPCharacter_Demo_C::DivingHelmet' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, HasWaterPhysics) == 0x000A48, "Member 'ABPCharacter_Demo_C::HasWaterPhysics' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, NoClipStart) == 0x000A4C, "Member 'ABPCharacter_Demo_C::NoClipStart' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, InDivingCage) == 0x000A50, "Member 'ABPCharacter_Demo_C::InDivingCage' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsClimbingLadder) == 0x000A51, "Member 'ABPCharacter_Demo_C::IsClimbingLadder' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsUsingRadio) == 0x000A52, "Member 'ABPCharacter_Demo_C::IsUsingRadio' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsPushingToTalk) == 0x000A53, "Member 'ABPCharacter_Demo_C::IsPushingToTalk' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, W_VOIPHUDRef) == 0x000A58, "Member 'ABPCharacter_Demo_C::W_VOIPHUDRef' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, LoopbackVoice) == 0x000A60, "Member 'ABPCharacter_Demo_C::LoopbackVoice' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsAffectingWheat) == 0x000A61, "Member 'ABPCharacter_Demo_C::IsAffectingWheat' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ShouldSink) == 0x000A62, "Member 'ABPCharacter_Demo_C::ShouldSink' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PlayLandedSound) == 0x000A63, "Member 'ABPCharacter_Demo_C::PlayLandedSound' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PA_Anims) == 0x000A64, "Member 'ABPCharacter_Demo_C::PA_Anims' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CurrentPushableActor_0) == 0x000A68, "Member 'ABPCharacter_Demo_C::CurrentPushableActor_0' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PA_CurrentLoc) == 0x000A70, "Member 'ABPCharacter_Demo_C::PA_CurrentLoc' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PA_TargetLoc) == 0x000A7C, "Member 'ABPCharacter_Demo_C::PA_TargetLoc' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PA_CurrentRot) == 0x000A88, "Member 'ABPCharacter_Demo_C::PA_CurrentRot' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PA_TargetRot) == 0x000A94, "Member 'ABPCharacter_Demo_C::PA_TargetRot' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PA_NoObstaclesF) == 0x000AA0, "Member 'ABPCharacter_Demo_C::PA_NoObstaclesF' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PA_NoObstaclesR) == 0x000AA1, "Member 'ABPCharacter_Demo_C::PA_NoObstaclesR' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, HydroSound) == 0x000AA8, "Member 'ABPCharacter_Demo_C::HydroSound' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, HasFallDamage) == 0x000AB0, "Member 'ABPCharacter_Demo_C::HasFallDamage' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsPushing) == 0x000AB1, "Member 'ABPCharacter_Demo_C::IsPushing' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, FlashlightCheckLength) == 0x000AB4, "Member 'ABPCharacter_Demo_C::FlashlightCheckLength' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CanPush) == 0x000AB8, "Member 'ABPCharacter_Demo_C::CanPush' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CurrentLadderLocation) == 0x000ABC, "Member 'ABPCharacter_Demo_C::CurrentLadderLocation' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CurrentLadderRotation) == 0x000AC8, "Member 'ABPCharacter_Demo_C::CurrentLadderRotation' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CurrentLadder) == 0x000AD8, "Member 'ABPCharacter_Demo_C::CurrentLadder' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CanTurn) == 0x000AE0, "Member 'ABPCharacter_Demo_C::CanTurn' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ShouldRagdoll) == 0x000AE1, "Member 'ABPCharacter_Demo_C::ShouldRagdoll' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ShowCamera) == 0x000AE2, "Member 'ABPCharacter_Demo_C::ShowCamera' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CanJumpElevator) == 0x000AE3, "Member 'ABPCharacter_Demo_C::CanJumpElevator' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsUsingFlaregun) == 0x000AE4, "Member 'ABPCharacter_Demo_C::IsUsingFlaregun' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsHoldingGlowstick) == 0x000AE5, "Member 'ABPCharacter_Demo_C::IsHoldingGlowstick' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, CrouchWalkSpeed) == 0x000AE8, "Member 'ABPCharacter_Demo_C::CrouchWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, Delta_Seconds) == 0x000AEC, "Member 'ABPCharacter_Demo_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BaseLookUpRate) == 0x000AF0, "Member 'ABPCharacter_Demo_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, BaseTurnRate) == 0x000AF4, "Member 'ABPCharacter_Demo_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsTangled) == 0x000AF8, "Member 'ABPCharacter_Demo_C::IsTangled' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ControllerSensitivity) == 0x000AFC, "Member 'ABPCharacter_Demo_C::ControllerSensitivity' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, PlayerTalker) == 0x000B00, "Member 'ABPCharacter_Demo_C::PlayerTalker' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, ControllerFeedback) == 0x000B08, "Member 'ABPCharacter_Demo_C::ControllerFeedback' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, WantsToCrouchAfterLanding) == 0x000B09, "Member 'ABPCharacter_Demo_C::WantsToCrouchAfterLanding' has a wrong offset!");
static_assert(offsetof(ABPCharacter_Demo_C, IsUsingGamepad) == 0x000B0A, "Member 'ABPCharacter_Demo_C::IsUsingGamepad' has a wrong offset!");

}

