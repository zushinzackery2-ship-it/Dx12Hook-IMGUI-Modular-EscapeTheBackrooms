#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MP_PlayerController

#include "Basic.hpp"

#include "MP_PlayerController_classes.hpp"
#include "MP_PlayerController_parameters.hpp"


namespace SDK
{

// Function MP_PlayerController.MP_PlayerController_C.ExecuteUbergraph_MP_PlayerController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_PlayerController_C::ExecuteUbergraph_MP_PlayerController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "ExecuteUbergraph_MP_PlayerController");

	Params::MP_PlayerController_C_ExecuteUbergraph_MP_PlayerController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMP_PlayerController_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.ClientHUDInit
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void AMP_PlayerController_C::ClientHUDInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "ClientHUDInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.OC_CompleteMission
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FMissionStructure&         Mission                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Failed                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerController_C::OC_CompleteMission(const struct FMissionStructure& Mission, bool Failed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OC_CompleteMission");

	Params::MP_PlayerController_C_OC_CompleteMission Parms{};

	Parms.Mission = std::move(Mission);
	Parms.Failed = Failed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.CaveHint
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::CaveHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "CaveHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.VR_Subtitle
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHE_SubtitleSeq&           Subtitle                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_PlayerController_C::VR_Subtitle(const struct FHE_SubtitleSeq& Subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "VR_Subtitle");

	Params::MP_PlayerController_C_VR_Subtitle Parms{};

	Parms.Subtitle = std::move(Subtitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.OnPlayerTravel
// (Event, Protected, BlueprintEvent)

void AMP_PlayerController_C::OnPlayerTravel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OnPlayerTravel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.ValveHint
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::ValveHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "ValveHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.ShowEndCutscene
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::ShowEndCutscene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "ShowEndCutscene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.ShowCameraFade
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::ShowCameraFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "ShowCameraFade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_PlayerController_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "ReceiveEndPlay");

	Params::MP_PlayerController_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.ScoreboardDelay
// (BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::ScoreboardDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "ScoreboardDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.OC_KickedFromLobby
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::OC_KickedFromLobby()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OC_KickedFromLobby");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.SetSpawnRotation
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerController_C::SetSpawnRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "SetSpawnRotation");

	Params::MP_PlayerController_C_SetSpawnRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.HE_Subtitle
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHE_SubtitleSeq&           Subtitle                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_PlayerController_C::HE_Subtitle(const struct FHE_SubtitleSeq& Subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "HE_Subtitle");

	Params::MP_PlayerController_C_HE_Subtitle Parms{};

	Parms.Subtitle = std::move(Subtitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.ShowLoadingScreen
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::ShowLoadingScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "ShowLoadingScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.UpdateScoreboard
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::UpdateScoreboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "UpdateScoreboard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.ToggleScoreboard
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pressed                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerController_C::ToggleScoreboard(bool Pressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "ToggleScoreboard");

	Params::MP_PlayerController_C_ToggleScoreboard Parms{};

	Parms.Pressed = Pressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.OC_RemoveKillScreen
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::OC_RemoveKillScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OC_RemoveKillScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.OC_SetSpectating
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Spectating                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMP_PlayerController_C::OC_SetSpectating(const class FString& Spectating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OC_SetSpectating");

	Params::MP_PlayerController_C_OC_SetSpectating Parms{};

	Parms.Spectating = std::move(Spectating);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.StartSpectating
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::StartSpectating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "StartSpectating");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.Unlock HUB
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::Unlock_HUB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "Unlock HUB");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.PlayNoiseAtLocation
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::PlayNoiseAtLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "PlayNoiseAtLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.OC_SetupVoice
// (BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::OC_SetupVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OC_SetupVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.BndEvt__VoipManager_K2Node_ComponentBoundEvent_1_VoiceGenerated__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<uint8>&                    VoiceData                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const float                             MicLevel                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_PlayerController_C::BndEvt__VoipManager_K2Node_ComponentBoundEvent_1_VoiceGenerated__DelegateSignature(const TArray<uint8>& VoiceData, const float MicLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "BndEvt__VoipManager_K2Node_ComponentBoundEvent_1_VoiceGenerated__DelegateSignature");

	Params::MP_PlayerController_C_BndEvt__VoipManager_K2Node_ComponentBoundEvent_1_VoiceGenerated__DelegateSignature Parms{};

	Parms.VoiceData = std::move(VoiceData);
	Parms.MicLevel = MicLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.SRV_SendVoiceData
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<uint8>&                    CompressedVoiceData                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bUseRadio                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsUnderwater                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerController_C::SRV_SendVoiceData(const TArray<uint8>& CompressedVoiceData, bool bUseRadio, bool IsUnderwater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "SRV_SendVoiceData");

	Params::MP_PlayerController_C_SRV_SendVoiceData Parms{};

	Parms.CompressedVoiceData = std::move(CompressedVoiceData);
	Parms.bUseRadio = bUseRadio;
	Parms.IsUnderwater = IsUnderwater;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.BndEvt__MP_PlayerController_VoipManager_K2Node_ComponentBoundEvent_2_PlayerStartTalking__DelegateSignature
// (BlueprintEvent)

void AMP_PlayerController_C::BndEvt__MP_PlayerController_VoipManager_K2Node_ComponentBoundEvent_2_PlayerStartTalking__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "BndEvt__MP_PlayerController_VoipManager_K2Node_ComponentBoundEvent_2_PlayerStartTalking__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.BndEvt__MP_PlayerController_VoipManager_K2Node_ComponentBoundEvent_0_PlayerStopTalking__DelegateSignature
// (BlueprintEvent)

void AMP_PlayerController_C::BndEvt__MP_PlayerController_VoipManager_K2Node_ComponentBoundEvent_0_PlayerStopTalking__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "BndEvt__MP_PlayerController_VoipManager_K2Node_ComponentBoundEvent_0_PlayerStopTalking__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.Client_RecieveVoiceData
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPCharacter_Demo_C*              Player_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TArray<uint8>&                    Voice                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bUseRadio                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsUnderwater                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerController_C::Client_RecieveVoiceData(class ABPCharacter_Demo_C* Player_0, const TArray<uint8>& Voice, bool bUseRadio, bool IsUnderwater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "Client_RecieveVoiceData");

	Params::MP_PlayerController_C_Client_RecieveVoiceData Parms{};

	Parms.Player_0 = Player_0;
	Parms.Voice = std::move(Voice);
	Parms.bUseRadio = bUseRadio;
	Parms.IsUnderwater = IsUnderwater;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.UpdatePushToTalk
// (BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::UpdatePushToTalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "UpdatePushToTalk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.DeleteVoice
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::DeleteVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "DeleteVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.InpActEvt_PlayerList_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_PlayerController_C::InpActEvt_PlayerList_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "InpActEvt_PlayerList_K2Node_InputActionEvent_0");

	Params::MP_PlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.InpActEvt_PlayerList_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_PlayerController_C::InpActEvt_PlayerList_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "InpActEvt_PlayerList_K2Node_InputActionEvent_1");

	Params::MP_PlayerController_C_InpActEvt_PlayerList_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.OnSuccess_BF5727364B76E93ECB1A5EB5C2750E7E
// (BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::OnSuccess_BF5727364B76E93ECB1A5EB5C2750E7E()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OnSuccess_BF5727364B76E93ECB1A5EB5C2750E7E");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.OnFailure_BF5727364B76E93ECB1A5EB5C2750E7E
// (BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::OnFailure_BF5727364B76E93ECB1A5EB5C2750E7E()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OnFailure_BF5727364B76E93ECB1A5EB5C2750E7E");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.InpActEvt_Chat_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_PlayerController_C::InpActEvt_Chat_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "InpActEvt_Chat_K2Node_InputActionEvent_2");

	Params::MP_PlayerController_C_InpActEvt_Chat_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.OnSuccess_C095D11342852DAE8D2D159151BDAA40
// (BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::OnSuccess_C095D11342852DAE8D2D159151BDAA40()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OnSuccess_C095D11342852DAE8D2D159151BDAA40");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.OnFailure_C095D11342852DAE8D2D159151BDAA40
// (BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::OnFailure_C095D11342852DAE8D2D159151BDAA40()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OnFailure_C095D11342852DAE8D2D159151BDAA40");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.InpActEvt_Settings_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_PlayerController_C::InpActEvt_Settings_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "InpActEvt_Settings_K2Node_InputActionEvent_3");

	Params::MP_PlayerController_C_InpActEvt_Settings_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.InpActEvt_Talk_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_PlayerController_C::InpActEvt_Talk_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "InpActEvt_Talk_K2Node_InputActionEvent_4");

	Params::MP_PlayerController_C_InpActEvt_Talk_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.InpActEvt_Talk_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_PlayerController_C::InpActEvt_Talk_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "InpActEvt_Talk_K2Node_InputActionEvent_5");

	Params::MP_PlayerController_C_InpActEvt_Talk_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.OpenVRSettings
// (Public, BlueprintCallable, BlueprintEvent)

void AMP_PlayerController_C::OpenVRSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "OpenVRSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerController.MP_PlayerController_C.TogglePushToTalk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Activated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerController_C::TogglePushToTalk(bool Activated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "TogglePushToTalk");

	Params::MP_PlayerController_C_TogglePushToTalk Parms{};

	Parms.Activated = Activated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerController.MP_PlayerController_C.GetCanTalk
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   CanTalk                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerController_C::GetCanTalk(bool* CanTalk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "GetCanTalk");

	Params::MP_PlayerController_C_GetCanTalk Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanTalk != nullptr)
		*CanTalk = Parms.CanTalk;
}


// Function MP_PlayerController.MP_PlayerController_C.GetUsingRadio
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   UsingRadio                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerController_C::GetUsingRadio(bool* UsingRadio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "GetUsingRadio");

	Params::MP_PlayerController_C_GetUsingRadio Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UsingRadio != nullptr)
		*UsingRadio = Parms.UsingRadio;
}


// Function MP_PlayerController.MP_PlayerController_C.GetUsingPushToTalk
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   UsingPushToTalk                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerController_C::GetUsingPushToTalk(bool* UsingPushToTalk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "GetUsingPushToTalk");

	Params::MP_PlayerController_C_GetUsingPushToTalk Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UsingPushToTalk != nullptr)
		*UsingPushToTalk = Parms.UsingPushToTalk;
}


// Function MP_PlayerController.MP_PlayerController_C.AddMissionStructUIData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FMissionStructure&         MissionStructureIn                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Failed                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FMissionStructure*               MissionStructureOut                                    (Parm, OutParm)

void AMP_PlayerController_C::AddMissionStructUIData(const struct FMissionStructure& MissionStructureIn, bool Failed, struct FMissionStructure* MissionStructureOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "AddMissionStructUIData");

	Params::MP_PlayerController_C_AddMissionStructUIData Parms{};

	Parms.MissionStructureIn = std::move(MissionStructureIn);
	Parms.Failed = Failed;

	UObject::ProcessEvent(Func, &Parms);

	if (MissionStructureOut != nullptr)
		*MissionStructureOut = std::move(Parms.MissionStructureOut);
}


// Function MP_PlayerController.MP_PlayerController_C.SaveMissionProgress
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FMissionStructure&         MissionStructure                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AMP_PlayerController_C::SaveMissionProgress(const struct FMissionStructure& MissionStructure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerController_C", "SaveMissionProgress");

	Params::MP_PlayerController_C_SaveMissionProgress Parms{};

	Parms.MissionStructure = std::move(MissionStructure);

	UObject::ProcessEvent(Func, &Parms);
}

}

