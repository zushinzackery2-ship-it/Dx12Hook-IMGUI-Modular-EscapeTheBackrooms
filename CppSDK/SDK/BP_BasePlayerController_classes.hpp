#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BasePlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Backrooms_structs.hpp"
#include "Backrooms_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BasePlayerController.BP_BasePlayerController_C
// 0x0008 (0x0588 - 0x0580)
class ABP_BasePlayerController_C : public AFancyPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0580(0x0008)(ZeroConstructor, Transient, DuplicateTransient)

public:
	void ExecuteUbergraph_BP_BasePlayerController(int32 EntryPoint);
	void ServerRemoveRemoteVoiceForPlayer(class APlayerState* TargetPlayerState);
	void ServerInitializeRemotePlayerVoice(class APlayerState* TargetPlayerState);
	void UpdatePlayersOnBlockList(const TArray<struct FBPUniqueNetId>& PlayerBlockList);
	void InitializeAllRemoteTalkers();
	void RemoveRemotePlayerVoice(class APlayerState* PlayerState_0);
	void InitializeRemotePlayerVoice(class APlayerState* NewPlayerState);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void EndActivity(const class FString& ActivityName, EActivityCompletionStatus Status);
	void StartActivity(const class FString& ActivityName);
	void PrintLevelTimes();
	void OnActiveUserChanged(bool bIsSameUser);
	void ClientHUDInit();
	void FadeOutOnBegin();
	void BindOnControllerDisconnect();
	void OnControllerDisconnected(EEstablishUserReason reason);
	void UnlockMission(class FName LevelName);
	void VoteToSkipVideo();
	void UnlockAchievement(class FName AchievementName);
	void OnSuccess_25FE2EED481770906869D8BE77840F55(const TArray<struct FBPUniqueNetId>& Results);
	void OnFailure_25FE2EED481770906869D8BE77840F55(const TArray<struct FBPUniqueNetId>& Results);
	void OnSuccess_7A38069049F41D425743B08026BC0075(const TArray<struct FBPUniqueNetId>& Results);
	void OnFailure_7A38069049F41D425743B08026BC0075(const TArray<struct FBPUniqueNetId>& Results);
	void InpActEvt_SkipVideo_K2Node_InputActionEvent_0(const struct FKey& Key);
	void GetPlayerControllerFromPlayerState(class APlayerState* PlayerState_0, class ABP_BasePlayerController_C** PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BasePlayerController_C">();
	}
	static class ABP_BasePlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BasePlayerController_C>();
	}
};
static_assert(alignof(ABP_BasePlayerController_C) == 0x000008, "Wrong alignment on ABP_BasePlayerController_C");
static_assert(sizeof(ABP_BasePlayerController_C) == 0x000588, "Wrong size on ABP_BasePlayerController_C");
static_assert(offsetof(ABP_BasePlayerController_C, UberGraphFrame) == 0x000580, "Member 'ABP_BasePlayerController_C::UberGraphFrame' has a wrong offset!");

}

