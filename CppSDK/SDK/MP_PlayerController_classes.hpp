#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MP_PlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_BasePlayerController_classes.hpp"
#include "Backrooms_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MP_PlayerController.MP_PlayerController_C
// 0x0048 (0x05D0 - 0x0588)
class AMP_PlayerController_C final : public ABP_BasePlayerController_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_MP_PlayerController_C;              // 0x0588(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVoipManagerComponent*                  VoipManager;                                       // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChatComponent_C*                       Chat_Component;                                    // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UScoreboard_UI_C*                       ScoreboardUI_Ref;                                  // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_SettingsPanel_Theme2_C*             SettingsUI_Ref;                                    // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USubtitleTextWB_C*                      SubtitleUI_Ref;                                    // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpectator_UI_C*                        SpectatorUI_Ref;                                   // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_VOIPInGame_C*                        W_VOIPHUDRef;                                      // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPushingToTalk;                                   // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_MP_PlayerController(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ClientHUDInit();
	void OC_CompleteMission(const struct FMissionStructure& Mission, bool Failed);
	void CaveHint();
	void VR_Subtitle(const struct FHE_SubtitleSeq& Subtitle);
	void OnPlayerTravel();
	void ValveHint();
	void ShowEndCutscene();
	void ShowCameraFade();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ScoreboardDelay();
	void OC_KickedFromLobby();
	void SetSpawnRotation(const struct FRotator& Rotation);
	void HE_Subtitle(const struct FHE_SubtitleSeq& Subtitle);
	void ShowLoadingScreen();
	void UpdateScoreboard();
	void ToggleScoreboard(bool Pressed);
	void OC_RemoveKillScreen();
	void OC_SetSpectating(const class FString& Spectating);
	void StartSpectating();
	void Unlock_HUB();
	void PlayNoiseAtLocation();
	void OC_SetupVoice();
	void BndEvt__VoipManager_K2Node_ComponentBoundEvent_1_VoiceGenerated__DelegateSignature(const TArray<uint8>& VoiceData, const float MicLevel);
	void SRV_SendVoiceData(const TArray<uint8>& CompressedVoiceData, bool bUseRadio, bool IsUnderwater);
	void BndEvt__MP_PlayerController_VoipManager_K2Node_ComponentBoundEvent_2_PlayerStartTalking__DelegateSignature();
	void BndEvt__MP_PlayerController_VoipManager_K2Node_ComponentBoundEvent_0_PlayerStopTalking__DelegateSignature();
	void Client_RecieveVoiceData(class ABPCharacter_Demo_C* Player_0, const TArray<uint8>& Voice, bool bUseRadio, bool IsUnderwater);
	void UpdatePushToTalk();
	void DeleteVoice();
	void InpActEvt_PlayerList_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_PlayerList_K2Node_InputActionEvent_1(const struct FKey& Key);
	void OnSuccess_BF5727364B76E93ECB1A5EB5C2750E7E();
	void OnFailure_BF5727364B76E93ECB1A5EB5C2750E7E();
	void InpActEvt_Chat_K2Node_InputActionEvent_2(const struct FKey& Key);
	void OnSuccess_C095D11342852DAE8D2D159151BDAA40();
	void OnFailure_C095D11342852DAE8D2D159151BDAA40();
	void InpActEvt_Settings_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Talk_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Talk_K2Node_InputActionEvent_5(const struct FKey& Key);
	void OpenVRSettings();
	void TogglePushToTalk(bool Activated);
	void GetCanTalk(bool* CanTalk);
	void GetUsingRadio(bool* UsingRadio);
	void GetUsingPushToTalk(bool* UsingPushToTalk);
	void AddMissionStructUIData(const struct FMissionStructure& MissionStructureIn, bool Failed, struct FMissionStructure* MissionStructureOut);
	void SaveMissionProgress(const struct FMissionStructure& MissionStructure);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MP_PlayerController_C">();
	}
	static class AMP_PlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMP_PlayerController_C>();
	}
};
static_assert(alignof(AMP_PlayerController_C) == 0x000008, "Wrong alignment on AMP_PlayerController_C");
static_assert(sizeof(AMP_PlayerController_C) == 0x0005D0, "Wrong size on AMP_PlayerController_C");
static_assert(offsetof(AMP_PlayerController_C, UberGraphFrame_MP_PlayerController_C) == 0x000588, "Member 'AMP_PlayerController_C::UberGraphFrame_MP_PlayerController_C' has a wrong offset!");
static_assert(offsetof(AMP_PlayerController_C, VoipManager) == 0x000590, "Member 'AMP_PlayerController_C::VoipManager' has a wrong offset!");
static_assert(offsetof(AMP_PlayerController_C, Chat_Component) == 0x000598, "Member 'AMP_PlayerController_C::Chat_Component' has a wrong offset!");
static_assert(offsetof(AMP_PlayerController_C, ScoreboardUI_Ref) == 0x0005A0, "Member 'AMP_PlayerController_C::ScoreboardUI_Ref' has a wrong offset!");
static_assert(offsetof(AMP_PlayerController_C, SettingsUI_Ref) == 0x0005A8, "Member 'AMP_PlayerController_C::SettingsUI_Ref' has a wrong offset!");
static_assert(offsetof(AMP_PlayerController_C, SubtitleUI_Ref) == 0x0005B0, "Member 'AMP_PlayerController_C::SubtitleUI_Ref' has a wrong offset!");
static_assert(offsetof(AMP_PlayerController_C, SpectatorUI_Ref) == 0x0005B8, "Member 'AMP_PlayerController_C::SpectatorUI_Ref' has a wrong offset!");
static_assert(offsetof(AMP_PlayerController_C, W_VOIPHUDRef) == 0x0005C0, "Member 'AMP_PlayerController_C::W_VOIPHUDRef' has a wrong offset!");
static_assert(offsetof(AMP_PlayerController_C, IsPushingToTalk) == 0x0005C8, "Member 'AMP_PlayerController_C::IsPushingToTalk' has a wrong offset!");

}

