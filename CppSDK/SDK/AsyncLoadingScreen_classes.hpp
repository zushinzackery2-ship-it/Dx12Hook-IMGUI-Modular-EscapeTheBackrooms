#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AsyncLoadingScreen

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "AsyncLoadingScreen_structs.hpp"


namespace SDK
{

// Class AsyncLoadingScreen.AsyncLoadingScreenLibrary
// 0x0000 (0x0028 - 0x0028)
class UAsyncLoadingScreenLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetIsEnableLoadingScreen();
	static void SetDisplayBackgroundIndex(int32 BackgroundIndex);
	static void SetDisplayMovieIndex(int32 MovieIndex);
	static void SetDisplayTipTextIndex(int32 TipTextIndex);
	static void SetEnableLoadingScreen(bool bIsEnableLoadingScreen);
	static void StopLoadingScreen();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncLoadingScreenLibrary">();
	}
	static class UAsyncLoadingScreenLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncLoadingScreenLibrary>();
	}
};
static_assert(alignof(UAsyncLoadingScreenLibrary) == 0x000008, "Wrong alignment on UAsyncLoadingScreenLibrary");
static_assert(sizeof(UAsyncLoadingScreenLibrary) == 0x000028, "Wrong size on UAsyncLoadingScreenLibrary");

// Class AsyncLoadingScreen.LoadingScreenSettings
// 0x0CC8 (0x0D00 - 0x0038)
class ULoadingScreenSettings final : public UDeveloperSettings
{
public:
	struct FALoadingScreenSettings                StartupLoadingScreen;                              // 0x0038(0x0430)(Edit, Config, NativeAccessSpecifierPublic)
	struct FALoadingScreenSettings                DefaultLoadingScreen;                              // 0x0468(0x0430)(Edit, Config, NativeAccessSpecifierPublic)
	struct FClassicLayoutSettings                 Classic;                                           // 0x0898(0x00A8)(Edit, Config, NativeAccessSpecifierPublic)
	struct FCenterLayoutSettings                  Center;                                            // 0x0940(0x00A0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FLetterboxLayoutSettings               Letterbox;                                         // 0x09E0(0x0138)(Edit, Config, NativeAccessSpecifierPublic)
	struct FSidebarLayoutSettings                 Sidebar;                                           // 0x0B18(0x00B0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FDualSidebarLayoutSettings             DualSidebar;                                       // 0x0BC8(0x0138)(Edit, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingScreenSettings">();
	}
	static class ULoadingScreenSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenSettings>();
	}
};
static_assert(alignof(ULoadingScreenSettings) == 0x000008, "Wrong alignment on ULoadingScreenSettings");
static_assert(sizeof(ULoadingScreenSettings) == 0x000D00, "Wrong size on ULoadingScreenSettings");
static_assert(offsetof(ULoadingScreenSettings, StartupLoadingScreen) == 0x000038, "Member 'ULoadingScreenSettings::StartupLoadingScreen' has a wrong offset!");
static_assert(offsetof(ULoadingScreenSettings, DefaultLoadingScreen) == 0x000468, "Member 'ULoadingScreenSettings::DefaultLoadingScreen' has a wrong offset!");
static_assert(offsetof(ULoadingScreenSettings, Classic) == 0x000898, "Member 'ULoadingScreenSettings::Classic' has a wrong offset!");
static_assert(offsetof(ULoadingScreenSettings, Center) == 0x000940, "Member 'ULoadingScreenSettings::Center' has a wrong offset!");
static_assert(offsetof(ULoadingScreenSettings, Letterbox) == 0x0009E0, "Member 'ULoadingScreenSettings::Letterbox' has a wrong offset!");
static_assert(offsetof(ULoadingScreenSettings, Sidebar) == 0x000B18, "Member 'ULoadingScreenSettings::Sidebar' has a wrong offset!");
static_assert(offsetof(ULoadingScreenSettings, DualSidebar) == 0x000BC8, "Member 'ULoadingScreenSettings::DualSidebar' has a wrong offset!");

}

