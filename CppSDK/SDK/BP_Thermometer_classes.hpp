#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Thermometer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Item_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Thermometer.BP_Thermometer_C
// 0x0020 (0x0278 - 0x0258)
class ABP_Thermometer_C final : public ABP_Item_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Thermometer_C;                   // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Scene1;                                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Thermometer_Display_C*              NumberDisplay;                                     // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temperature;                                       // 0x0270(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingFOV;                                        // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Thermometer(int32 EntryPoint);
	void ReceiveDestroyed();
	void OnRep_Temperature();
	void Has_Spawned_Display(bool* HasSpawned);
	void ReceiveBeginPlay();
	void SetMaterial(bool EnabledFOV);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Thermometer_C">();
	}
	static class ABP_Thermometer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Thermometer_C>();
	}
};
static_assert(alignof(ABP_Thermometer_C) == 0x000008, "Wrong alignment on ABP_Thermometer_C");
static_assert(sizeof(ABP_Thermometer_C) == 0x000278, "Wrong size on ABP_Thermometer_C");
static_assert(offsetof(ABP_Thermometer_C, UberGraphFrame_BP_Thermometer_C) == 0x000258, "Member 'ABP_Thermometer_C::UberGraphFrame_BP_Thermometer_C' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_C, Scene1) == 0x000260, "Member 'ABP_Thermometer_C::Scene1' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_C, NumberDisplay) == 0x000268, "Member 'ABP_Thermometer_C::NumberDisplay' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_C, Temperature) == 0x000270, "Member 'ABP_Thermometer_C::Temperature' has a wrong offset!");
static_assert(offsetof(ABP_Thermometer_C, IsUsingFOV) == 0x000274, "Member 'ABP_Thermometer_C::IsUsingFOV' has a wrong offset!");

}

