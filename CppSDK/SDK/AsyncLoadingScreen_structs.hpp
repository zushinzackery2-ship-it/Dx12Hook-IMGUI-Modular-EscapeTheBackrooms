#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AsyncLoadingScreen

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "MoviePlayer_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AsyncLoadingScreen.ELoadingWidgetType
// NumValues: 0x0003
enum class ELoadingWidgetType : uint8
{
	LWT_Horizontal                           = 0,
	LWT_Vertical                             = 1,
	LWT_MAX                                  = 2,
};

// Enum AsyncLoadingScreen.ELoadingIconType
// NumValues: 0x0004
enum class ELoadingIconType : uint8
{
	LIT_Throbber                             = 0,
	LIT_CircularThrobber                     = 1,
	LIT_ImageSequence                        = 2,
	LIT_MAX                                  = 3,
};

// Enum AsyncLoadingScreen.EAsyncLoadingScreenLayout
// NumValues: 0x0006
enum class EAsyncLoadingScreenLayout : uint8
{
	ALSL_Classic                             = 0,
	ALSL_Center                              = 1,
	ALSL_Letterbox                           = 2,
	ALSL_Sidebar                             = 3,
	ALSL_DualSidebar                         = 4,
	ALSL_MAX                                 = 5,
};

// ScriptStruct AsyncLoadingScreen.DualSidebarLayoutSettings
// 0x0138 (0x0138 - 0x0000)
struct FDualSidebarLayoutSettings final
{
public:
	bool                                          bIsLoadingWidgetAtRight;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            LeftVerticalAlignment;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            RightVerticalAlignment;                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            LeftBorderVerticalAlignment;                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            RightBorderVerticalAlignment;                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                LeftBorderPadding;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                RightBorderPadding;                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LeftBorderBackground;                              // 0x0028(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            RightBorderBackground;                             // 0x00B0(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDualSidebarLayoutSettings) == 0x000008, "Wrong alignment on FDualSidebarLayoutSettings");
static_assert(sizeof(FDualSidebarLayoutSettings) == 0x000138, "Wrong size on FDualSidebarLayoutSettings");
static_assert(offsetof(FDualSidebarLayoutSettings, bIsLoadingWidgetAtRight) == 0x000000, "Member 'FDualSidebarLayoutSettings::bIsLoadingWidgetAtRight' has a wrong offset!");
static_assert(offsetof(FDualSidebarLayoutSettings, LeftVerticalAlignment) == 0x000001, "Member 'FDualSidebarLayoutSettings::LeftVerticalAlignment' has a wrong offset!");
static_assert(offsetof(FDualSidebarLayoutSettings, RightVerticalAlignment) == 0x000002, "Member 'FDualSidebarLayoutSettings::RightVerticalAlignment' has a wrong offset!");
static_assert(offsetof(FDualSidebarLayoutSettings, LeftBorderVerticalAlignment) == 0x000003, "Member 'FDualSidebarLayoutSettings::LeftBorderVerticalAlignment' has a wrong offset!");
static_assert(offsetof(FDualSidebarLayoutSettings, RightBorderVerticalAlignment) == 0x000004, "Member 'FDualSidebarLayoutSettings::RightBorderVerticalAlignment' has a wrong offset!");
static_assert(offsetof(FDualSidebarLayoutSettings, LeftBorderPadding) == 0x000008, "Member 'FDualSidebarLayoutSettings::LeftBorderPadding' has a wrong offset!");
static_assert(offsetof(FDualSidebarLayoutSettings, RightBorderPadding) == 0x000018, "Member 'FDualSidebarLayoutSettings::RightBorderPadding' has a wrong offset!");
static_assert(offsetof(FDualSidebarLayoutSettings, LeftBorderBackground) == 0x000028, "Member 'FDualSidebarLayoutSettings::LeftBorderBackground' has a wrong offset!");
static_assert(offsetof(FDualSidebarLayoutSettings, RightBorderBackground) == 0x0000B0, "Member 'FDualSidebarLayoutSettings::RightBorderBackground' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.WidgetAlignment
// 0x0002 (0x0002 - 0x0000)
struct FWidgetAlignment final
{
public:
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetAlignment) == 0x000001, "Wrong alignment on FWidgetAlignment");
static_assert(sizeof(FWidgetAlignment) == 0x000002, "Wrong size on FWidgetAlignment");
static_assert(offsetof(FWidgetAlignment, HorizontalAlignment) == 0x000000, "Member 'FWidgetAlignment::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FWidgetAlignment, VerticalAlignment) == 0x000001, "Member 'FWidgetAlignment::VerticalAlignment' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.SidebarLayoutSettings
// 0x00B0 (0x00B0 - 0x0000)
struct FSidebarLayoutSettings final
{
public:
	bool                                          bIsWidgetAtRight;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoadingWidgetAtTop;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Space;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetAlignment                       LoadingWidgetAlignment;                            // 0x0009(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWidgetAlignment                       TipAlignment;                                      // 0x000B(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EVerticalAlignment                            BorderVerticalAlignment;                           // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BorderHorizontalOffset;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                BorderPadding;                                     // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BorderBackground;                                  // 0x0028(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSidebarLayoutSettings) == 0x000008, "Wrong alignment on FSidebarLayoutSettings");
static_assert(sizeof(FSidebarLayoutSettings) == 0x0000B0, "Wrong size on FSidebarLayoutSettings");
static_assert(offsetof(FSidebarLayoutSettings, bIsWidgetAtRight) == 0x000000, "Member 'FSidebarLayoutSettings::bIsWidgetAtRight' has a wrong offset!");
static_assert(offsetof(FSidebarLayoutSettings, bIsLoadingWidgetAtTop) == 0x000001, "Member 'FSidebarLayoutSettings::bIsLoadingWidgetAtTop' has a wrong offset!");
static_assert(offsetof(FSidebarLayoutSettings, Space) == 0x000004, "Member 'FSidebarLayoutSettings::Space' has a wrong offset!");
static_assert(offsetof(FSidebarLayoutSettings, VerticalAlignment) == 0x000008, "Member 'FSidebarLayoutSettings::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(FSidebarLayoutSettings, LoadingWidgetAlignment) == 0x000009, "Member 'FSidebarLayoutSettings::LoadingWidgetAlignment' has a wrong offset!");
static_assert(offsetof(FSidebarLayoutSettings, TipAlignment) == 0x00000B, "Member 'FSidebarLayoutSettings::TipAlignment' has a wrong offset!");
static_assert(offsetof(FSidebarLayoutSettings, BorderVerticalAlignment) == 0x00000D, "Member 'FSidebarLayoutSettings::BorderVerticalAlignment' has a wrong offset!");
static_assert(offsetof(FSidebarLayoutSettings, BorderHorizontalOffset) == 0x000010, "Member 'FSidebarLayoutSettings::BorderHorizontalOffset' has a wrong offset!");
static_assert(offsetof(FSidebarLayoutSettings, BorderPadding) == 0x000014, "Member 'FSidebarLayoutSettings::BorderPadding' has a wrong offset!");
static_assert(offsetof(FSidebarLayoutSettings, BorderBackground) == 0x000028, "Member 'FSidebarLayoutSettings::BorderBackground' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.LetterboxLayoutSettings
// 0x0138 (0x0138 - 0x0000)
struct FLetterboxLayoutSettings final
{
public:
	bool                                          bIsLoadingWidgetAtTop;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetAlignment                       TipAlignment;                                      // 0x0001(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWidgetAlignment                       LoadingWidgetAlignment;                            // 0x0003(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          TopBorderHorizontalAlignment;                      // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          BottomBorderHorizontalAlignment;                   // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                TopBorderPadding;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                BottomBorderPadding;                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            TopBorderBackground;                               // 0x0028(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BottomBorderBackground;                            // 0x00B0(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLetterboxLayoutSettings) == 0x000008, "Wrong alignment on FLetterboxLayoutSettings");
static_assert(sizeof(FLetterboxLayoutSettings) == 0x000138, "Wrong size on FLetterboxLayoutSettings");
static_assert(offsetof(FLetterboxLayoutSettings, bIsLoadingWidgetAtTop) == 0x000000, "Member 'FLetterboxLayoutSettings::bIsLoadingWidgetAtTop' has a wrong offset!");
static_assert(offsetof(FLetterboxLayoutSettings, TipAlignment) == 0x000001, "Member 'FLetterboxLayoutSettings::TipAlignment' has a wrong offset!");
static_assert(offsetof(FLetterboxLayoutSettings, LoadingWidgetAlignment) == 0x000003, "Member 'FLetterboxLayoutSettings::LoadingWidgetAlignment' has a wrong offset!");
static_assert(offsetof(FLetterboxLayoutSettings, TopBorderHorizontalAlignment) == 0x000005, "Member 'FLetterboxLayoutSettings::TopBorderHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FLetterboxLayoutSettings, BottomBorderHorizontalAlignment) == 0x000006, "Member 'FLetterboxLayoutSettings::BottomBorderHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FLetterboxLayoutSettings, TopBorderPadding) == 0x000008, "Member 'FLetterboxLayoutSettings::TopBorderPadding' has a wrong offset!");
static_assert(offsetof(FLetterboxLayoutSettings, BottomBorderPadding) == 0x000018, "Member 'FLetterboxLayoutSettings::BottomBorderPadding' has a wrong offset!");
static_assert(offsetof(FLetterboxLayoutSettings, TopBorderBackground) == 0x000028, "Member 'FLetterboxLayoutSettings::TopBorderBackground' has a wrong offset!");
static_assert(offsetof(FLetterboxLayoutSettings, BottomBorderBackground) == 0x0000B0, "Member 'FLetterboxLayoutSettings::BottomBorderBackground' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.CenterLayoutSettings
// 0x00A0 (0x00A0 - 0x0000)
struct FCenterLayoutSettings final
{
public:
	bool                                          bIsTipAtBottom;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetAlignment                       TipAlignment;                                      // 0x0001(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          BorderHorizontalAlignment;                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BorderVerticalOffset;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                BorderPadding;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BorderBackground;                                  // 0x0018(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCenterLayoutSettings) == 0x000008, "Wrong alignment on FCenterLayoutSettings");
static_assert(sizeof(FCenterLayoutSettings) == 0x0000A0, "Wrong size on FCenterLayoutSettings");
static_assert(offsetof(FCenterLayoutSettings, bIsTipAtBottom) == 0x000000, "Member 'FCenterLayoutSettings::bIsTipAtBottom' has a wrong offset!");
static_assert(offsetof(FCenterLayoutSettings, TipAlignment) == 0x000001, "Member 'FCenterLayoutSettings::TipAlignment' has a wrong offset!");
static_assert(offsetof(FCenterLayoutSettings, BorderHorizontalAlignment) == 0x000003, "Member 'FCenterLayoutSettings::BorderHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FCenterLayoutSettings, BorderVerticalOffset) == 0x000004, "Member 'FCenterLayoutSettings::BorderVerticalOffset' has a wrong offset!");
static_assert(offsetof(FCenterLayoutSettings, BorderPadding) == 0x000008, "Member 'FCenterLayoutSettings::BorderPadding' has a wrong offset!");
static_assert(offsetof(FCenterLayoutSettings, BorderBackground) == 0x000018, "Member 'FCenterLayoutSettings::BorderBackground' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.ClassicLayoutSettings
// 0x00A8 (0x00A8 - 0x0000)
struct FClassicLayoutSettings final
{
public:
	bool                                          bIsWidgetAtBottom;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoadingWidgetAtLeft;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Space;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetAlignment                       TipAlignment;                                      // 0x0008(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          BorderHorizontalAlignment;                         // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                BorderPadding;                                     // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BorderBackground;                                  // 0x0020(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClassicLayoutSettings) == 0x000008, "Wrong alignment on FClassicLayoutSettings");
static_assert(sizeof(FClassicLayoutSettings) == 0x0000A8, "Wrong size on FClassicLayoutSettings");
static_assert(offsetof(FClassicLayoutSettings, bIsWidgetAtBottom) == 0x000000, "Member 'FClassicLayoutSettings::bIsWidgetAtBottom' has a wrong offset!");
static_assert(offsetof(FClassicLayoutSettings, bIsLoadingWidgetAtLeft) == 0x000001, "Member 'FClassicLayoutSettings::bIsLoadingWidgetAtLeft' has a wrong offset!");
static_assert(offsetof(FClassicLayoutSettings, Space) == 0x000004, "Member 'FClassicLayoutSettings::Space' has a wrong offset!");
static_assert(offsetof(FClassicLayoutSettings, TipAlignment) == 0x000008, "Member 'FClassicLayoutSettings::TipAlignment' has a wrong offset!");
static_assert(offsetof(FClassicLayoutSettings, BorderHorizontalAlignment) == 0x00000A, "Member 'FClassicLayoutSettings::BorderHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FClassicLayoutSettings, BorderPadding) == 0x00000C, "Member 'FClassicLayoutSettings::BorderPadding' has a wrong offset!");
static_assert(offsetof(FClassicLayoutSettings, BorderBackground) == 0x000020, "Member 'FClassicLayoutSettings::BorderBackground' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.TextAppearance
// 0x00A0 (0x00A0 - 0x0000)
struct FTextAppearance final
{
public:
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0000(0x0028)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0028(0x0058)(Edit, BlueprintVisible, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTextAppearance) == 0x000008, "Wrong alignment on FTextAppearance");
static_assert(sizeof(FTextAppearance) == 0x0000A0, "Wrong size on FTextAppearance");
static_assert(offsetof(FTextAppearance, ColorAndOpacity) == 0x000000, "Member 'FTextAppearance::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTextAppearance, Font) == 0x000028, "Member 'FTextAppearance::Font' has a wrong offset!");
static_assert(offsetof(FTextAppearance, ShadowOffset) == 0x000080, "Member 'FTextAppearance::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FTextAppearance, ShadowColorAndOpacity) == 0x000088, "Member 'FTextAppearance::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTextAppearance, Justification) == 0x000098, "Member 'FTextAppearance::Justification' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.LoadingCompleteTextSettings
// 0x00D8 (0x00D8 - 0x0000)
struct FLoadingCompleteTextSettings final
{
public:
	class FText                                   LoadingCompleteText;                               // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextAppearance                        Appearance;                                        // 0x0018(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FWidgetAlignment                       Alignment;                                         // 0x00B8(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x00BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFadeInOutAnim;                                    // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationSpeed;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadingCompleteTextSettings) == 0x000008, "Wrong alignment on FLoadingCompleteTextSettings");
static_assert(sizeof(FLoadingCompleteTextSettings) == 0x0000D8, "Wrong size on FLoadingCompleteTextSettings");
static_assert(offsetof(FLoadingCompleteTextSettings, LoadingCompleteText) == 0x000000, "Member 'FLoadingCompleteTextSettings::LoadingCompleteText' has a wrong offset!");
static_assert(offsetof(FLoadingCompleteTextSettings, Appearance) == 0x000018, "Member 'FLoadingCompleteTextSettings::Appearance' has a wrong offset!");
static_assert(offsetof(FLoadingCompleteTextSettings, Alignment) == 0x0000B8, "Member 'FLoadingCompleteTextSettings::Alignment' has a wrong offset!");
static_assert(offsetof(FLoadingCompleteTextSettings, Padding) == 0x0000BC, "Member 'FLoadingCompleteTextSettings::Padding' has a wrong offset!");
static_assert(offsetof(FLoadingCompleteTextSettings, bFadeInOutAnim) == 0x0000CC, "Member 'FLoadingCompleteTextSettings::bFadeInOutAnim' has a wrong offset!");
static_assert(offsetof(FLoadingCompleteTextSettings, AnimationSpeed) == 0x0000D0, "Member 'FLoadingCompleteTextSettings::AnimationSpeed' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.BackgroundSettings
// 0x0038 (0x0038 - 0x0000)
struct FBackgroundSettings final
{
public:
	TArray<struct FSoftObjectPath>                Images;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EStretch                                      ImageStretch;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDisplayBackgroundManually;                     // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBackgroundSettings) == 0x000008, "Wrong alignment on FBackgroundSettings");
static_assert(sizeof(FBackgroundSettings) == 0x000038, "Wrong size on FBackgroundSettings");
static_assert(offsetof(FBackgroundSettings, Images) == 0x000000, "Member 'FBackgroundSettings::Images' has a wrong offset!");
static_assert(offsetof(FBackgroundSettings, ImageStretch) == 0x000010, "Member 'FBackgroundSettings::ImageStretch' has a wrong offset!");
static_assert(offsetof(FBackgroundSettings, Padding) == 0x000014, "Member 'FBackgroundSettings::Padding' has a wrong offset!");
static_assert(offsetof(FBackgroundSettings, BackgroundColor) == 0x000024, "Member 'FBackgroundSettings::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FBackgroundSettings, bSetDisplayBackgroundManually) == 0x000034, "Member 'FBackgroundSettings::bSetDisplayBackgroundManually' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.TipSettings
// 0x00B8 (0x00B8 - 0x0000)
struct FTipSettings final
{
public:
	TArray<class FText>                           TipText;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTextAppearance                        Appearance;                                        // 0x0010(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         TipWrapAt;                                         // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDisplayTipTextManually;                        // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTipSettings) == 0x000008, "Wrong alignment on FTipSettings");
static_assert(sizeof(FTipSettings) == 0x0000B8, "Wrong size on FTipSettings");
static_assert(offsetof(FTipSettings, TipText) == 0x000000, "Member 'FTipSettings::TipText' has a wrong offset!");
static_assert(offsetof(FTipSettings, Appearance) == 0x000010, "Member 'FTipSettings::Appearance' has a wrong offset!");
static_assert(offsetof(FTipSettings, TipWrapAt) == 0x0000B0, "Member 'FTipSettings::TipWrapAt' has a wrong offset!");
static_assert(offsetof(FTipSettings, bSetDisplayTipTextManually) == 0x0000B4, "Member 'FTipSettings::bSetDisplayTipTextManually' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.CircularThrobberSettings
// 0x0098 (0x0098 - 0x0000)
struct FCircularThrobberSettings final
{
public:
	int32                                         NumberOfPieces;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Image;                                             // 0x0010(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCircularThrobberSettings) == 0x000008, "Wrong alignment on FCircularThrobberSettings");
static_assert(sizeof(FCircularThrobberSettings) == 0x000098, "Wrong size on FCircularThrobberSettings");
static_assert(offsetof(FCircularThrobberSettings, NumberOfPieces) == 0x000000, "Member 'FCircularThrobberSettings::NumberOfPieces' has a wrong offset!");
static_assert(offsetof(FCircularThrobberSettings, Period) == 0x000004, "Member 'FCircularThrobberSettings::Period' has a wrong offset!");
static_assert(offsetof(FCircularThrobberSettings, Radius) == 0x000008, "Member 'FCircularThrobberSettings::Radius' has a wrong offset!");
static_assert(offsetof(FCircularThrobberSettings, Image) == 0x000010, "Member 'FCircularThrobberSettings::Image' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.ThrobberSettings
// 0x0090 (0x0090 - 0x0000)
struct FThrobberSettings final
{
public:
	int32                                         NumberOfPieces;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateHorizontally;                              // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateVertically;                                // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateOpacity;                                   // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Image;                                             // 0x0008(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThrobberSettings) == 0x000008, "Wrong alignment on FThrobberSettings");
static_assert(sizeof(FThrobberSettings) == 0x000090, "Wrong size on FThrobberSettings");
static_assert(offsetof(FThrobberSettings, NumberOfPieces) == 0x000000, "Member 'FThrobberSettings::NumberOfPieces' has a wrong offset!");
static_assert(offsetof(FThrobberSettings, bAnimateHorizontally) == 0x000004, "Member 'FThrobberSettings::bAnimateHorizontally' has a wrong offset!");
static_assert(offsetof(FThrobberSettings, bAnimateVertically) == 0x000005, "Member 'FThrobberSettings::bAnimateVertically' has a wrong offset!");
static_assert(offsetof(FThrobberSettings, bAnimateOpacity) == 0x000006, "Member 'FThrobberSettings::bAnimateOpacity' has a wrong offset!");
static_assert(offsetof(FThrobberSettings, Image) == 0x000008, "Member 'FThrobberSettings::Image' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.ImageSequenceSettings
// 0x0020 (0x0020 - 0x0000)
struct FImageSequenceSettings final
{
public:
	TArray<class UTexture2D*>                     Images;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Scale;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayReverse;                                      // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImageSequenceSettings) == 0x000008, "Wrong alignment on FImageSequenceSettings");
static_assert(sizeof(FImageSequenceSettings) == 0x000020, "Wrong size on FImageSequenceSettings");
static_assert(offsetof(FImageSequenceSettings, Images) == 0x000000, "Member 'FImageSequenceSettings::Images' has a wrong offset!");
static_assert(offsetof(FImageSequenceSettings, Scale) == 0x000010, "Member 'FImageSequenceSettings::Scale' has a wrong offset!");
static_assert(offsetof(FImageSequenceSettings, Interval) == 0x000018, "Member 'FImageSequenceSettings::Interval' has a wrong offset!");
static_assert(offsetof(FImageSequenceSettings, bPlayReverse) == 0x00001C, "Member 'FImageSequenceSettings::bPlayReverse' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.LoadingWidgetSettings
// 0x0238 (0x0238 - 0x0000)
struct FLoadingWidgetSettings final
{
public:
	ELoadingIconType                              LoadingIconType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadingWidgetType                            LoadingWidgetType;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TransformTranslation;                              // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformScale;                                    // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformPivot;                                    // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LoadingText;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bLoadingTextRightPosition;                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadingTextTopPosition;                           // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextAppearance                        Appearance;                                        // 0x0040(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FThrobberSettings                      ThrobberSettings;                                  // 0x00E0(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCircularThrobberSettings              CircularThrobberSettings;                          // 0x0170(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FImageSequenceSettings                 ImageSequenceSettings;                             // 0x0208(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FWidgetAlignment                       TextAlignment;                                     // 0x0228(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWidgetAlignment                       LoadingIconAlignment;                              // 0x022A(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Space;                                             // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLoadingWidgetWhenCompletes;                   // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadingWidgetSettings) == 0x000008, "Wrong alignment on FLoadingWidgetSettings");
static_assert(sizeof(FLoadingWidgetSettings) == 0x000238, "Wrong size on FLoadingWidgetSettings");
static_assert(offsetof(FLoadingWidgetSettings, LoadingIconType) == 0x000000, "Member 'FLoadingWidgetSettings::LoadingIconType' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, LoadingWidgetType) == 0x000001, "Member 'FLoadingWidgetSettings::LoadingWidgetType' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, TransformTranslation) == 0x000004, "Member 'FLoadingWidgetSettings::TransformTranslation' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, TransformScale) == 0x00000C, "Member 'FLoadingWidgetSettings::TransformScale' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, TransformPivot) == 0x000014, "Member 'FLoadingWidgetSettings::TransformPivot' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, LoadingText) == 0x000020, "Member 'FLoadingWidgetSettings::LoadingText' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, bLoadingTextRightPosition) == 0x000038, "Member 'FLoadingWidgetSettings::bLoadingTextRightPosition' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, bLoadingTextTopPosition) == 0x000039, "Member 'FLoadingWidgetSettings::bLoadingTextTopPosition' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, Appearance) == 0x000040, "Member 'FLoadingWidgetSettings::Appearance' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, ThrobberSettings) == 0x0000E0, "Member 'FLoadingWidgetSettings::ThrobberSettings' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, CircularThrobberSettings) == 0x000170, "Member 'FLoadingWidgetSettings::CircularThrobberSettings' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, ImageSequenceSettings) == 0x000208, "Member 'FLoadingWidgetSettings::ImageSequenceSettings' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, TextAlignment) == 0x000228, "Member 'FLoadingWidgetSettings::TextAlignment' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, LoadingIconAlignment) == 0x00022A, "Member 'FLoadingWidgetSettings::LoadingIconAlignment' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, Space) == 0x00022C, "Member 'FLoadingWidgetSettings::Space' has a wrong offset!");
static_assert(offsetof(FLoadingWidgetSettings, bHideLoadingWidgetWhenCompletes) == 0x000230, "Member 'FLoadingWidgetSettings::bHideLoadingWidgetWhenCompletes' has a wrong offset!");

// ScriptStruct AsyncLoadingScreen.ALoadingScreenSettings
// 0x0430 (0x0430 - 0x0000)
struct FALoadingScreenSettings final
{
public:
	float                                         MinimumLoadingScreenDisplayTime;                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCompleteWhenLoadingCompletes;                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoviesAreSkippable;                               // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitForManualStop;                                // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInEarlyStartup;                              // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEngineTick;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoviePlaybackType                            PlaybackType;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MoviePaths;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShuffle;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDisplayMovieIndexManually;                     // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowWidgetOverlay;                                // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLoadingCompleteText;                          // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLoadingCompleteTextSettings           LoadingCompleteTextSettings;                       // 0x0028(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBackgroundSettings                    Background;                                        // 0x0100(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTipSettings                           TipWidget;                                         // 0x0138(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLoadingWidgetSettings                 LoadingWidget;                                     // 0x01F0(0x0238)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAsyncLoadingScreenLayout                     Layout;                                            // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FALoadingScreenSettings) == 0x000008, "Wrong alignment on FALoadingScreenSettings");
static_assert(sizeof(FALoadingScreenSettings) == 0x000430, "Wrong size on FALoadingScreenSettings");
static_assert(offsetof(FALoadingScreenSettings, MinimumLoadingScreenDisplayTime) == 0x000000, "Member 'FALoadingScreenSettings::MinimumLoadingScreenDisplayTime' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, bAutoCompleteWhenLoadingCompletes) == 0x000004, "Member 'FALoadingScreenSettings::bAutoCompleteWhenLoadingCompletes' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, bMoviesAreSkippable) == 0x000005, "Member 'FALoadingScreenSettings::bMoviesAreSkippable' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, bWaitForManualStop) == 0x000006, "Member 'FALoadingScreenSettings::bWaitForManualStop' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, bAllowInEarlyStartup) == 0x000007, "Member 'FALoadingScreenSettings::bAllowInEarlyStartup' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, bAllowEngineTick) == 0x000008, "Member 'FALoadingScreenSettings::bAllowEngineTick' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, PlaybackType) == 0x000009, "Member 'FALoadingScreenSettings::PlaybackType' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, MoviePaths) == 0x000010, "Member 'FALoadingScreenSettings::MoviePaths' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, bShuffle) == 0x000020, "Member 'FALoadingScreenSettings::bShuffle' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, bSetDisplayMovieIndexManually) == 0x000021, "Member 'FALoadingScreenSettings::bSetDisplayMovieIndexManually' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, bShowWidgetOverlay) == 0x000022, "Member 'FALoadingScreenSettings::bShowWidgetOverlay' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, bShowLoadingCompleteText) == 0x000023, "Member 'FALoadingScreenSettings::bShowLoadingCompleteText' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, LoadingCompleteTextSettings) == 0x000028, "Member 'FALoadingScreenSettings::LoadingCompleteTextSettings' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, Background) == 0x000100, "Member 'FALoadingScreenSettings::Background' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, TipWidget) == 0x000138, "Member 'FALoadingScreenSettings::TipWidget' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, LoadingWidget) == 0x0001F0, "Member 'FALoadingScreenSettings::LoadingWidget' has a wrong offset!");
static_assert(offsetof(FALoadingScreenSettings, Layout) == 0x000428, "Member 'FALoadingScreenSettings::Layout' has a wrong offset!");

}

