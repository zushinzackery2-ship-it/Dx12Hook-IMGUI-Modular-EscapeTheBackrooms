#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XShip

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "XShip_structs.hpp"


namespace SDK::Params
{

// Function XShip.XShipComponent.GetShipBoundsRadius
// 0x0004 (0x0004 - 0x0000)
struct XShipComponent_GetShipBoundsRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XShipComponent_GetShipBoundsRadius) == 0x000004, "Wrong alignment on XShipComponent_GetShipBoundsRadius");
static_assert(sizeof(XShipComponent_GetShipBoundsRadius) == 0x000004, "Wrong size on XShipComponent_GetShipBoundsRadius");
static_assert(offsetof(XShipComponent_GetShipBoundsRadius, ReturnValue) == 0x000000, "Member 'XShipComponent_GetShipBoundsRadius::ReturnValue' has a wrong offset!");

// Function XShip.XShipComponent.GetXShipPawn
// 0x0008 (0x0008 - 0x0000)
struct XShipComponent_GetXShipPawn final
{
public:
	class AXShipPawn*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XShipComponent_GetXShipPawn) == 0x000008, "Wrong alignment on XShipComponent_GetXShipPawn");
static_assert(sizeof(XShipComponent_GetXShipPawn) == 0x000008, "Wrong size on XShipComponent_GetXShipPawn");
static_assert(offsetof(XShipComponent_GetXShipPawn, ReturnValue) == 0x000000, "Member 'XShipComponent_GetXShipPawn::ReturnValue' has a wrong offset!");

// Function XShip.XShipComponent.IsEngineInWater
// 0x0001 (0x0001 - 0x0000)
struct XShipComponent_IsEngineInWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XShipComponent_IsEngineInWater) == 0x000001, "Wrong alignment on XShipComponent_IsEngineInWater");
static_assert(sizeof(XShipComponent_IsEngineInWater) == 0x000001, "Wrong size on XShipComponent_IsEngineInWater");
static_assert(offsetof(XShipComponent_IsEngineInWater, ReturnValue) == 0x000000, "Member 'XShipComponent_IsEngineInWater::ReturnValue' has a wrong offset!");

// Function XShip.XShipComponent.Server_PassMovementInfo
// 0x0030 (0x0030 - 0x0000)
struct XShipComponent_Server_PassMovementInfo final
{
public:
	struct FRepXShipMovement                      NewRepXShipMovement;                               // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XShipComponent_Server_PassMovementInfo) == 0x000004, "Wrong alignment on XShipComponent_Server_PassMovementInfo");
static_assert(sizeof(XShipComponent_Server_PassMovementInfo) == 0x000030, "Wrong size on XShipComponent_Server_PassMovementInfo");
static_assert(offsetof(XShipComponent_Server_PassMovementInfo, NewRepXShipMovement) == 0x000000, "Member 'XShipComponent_Server_PassMovementInfo::NewRepXShipMovement' has a wrong offset!");

// Function XShip.XShipPawn.AddRotationInput
// 0x0004 (0x0004 - 0x0000)
struct XShipPawn_AddRotationInput final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XShipPawn_AddRotationInput) == 0x000004, "Wrong alignment on XShipPawn_AddRotationInput");
static_assert(sizeof(XShipPawn_AddRotationInput) == 0x000004, "Wrong size on XShipPawn_AddRotationInput");
static_assert(offsetof(XShipPawn_AddRotationInput, ScaleValue) == 0x000000, "Member 'XShipPawn_AddRotationInput::ScaleValue' has a wrong offset!");

// Function XShip.XShipPawn.GetWaterDensity
// 0x000C (0x000C - 0x0000)
struct XShipPawn_GetWaterDensity final
{
public:
	struct FVector2D                              InLocation;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XShipPawn_GetWaterDensity) == 0x000004, "Wrong alignment on XShipPawn_GetWaterDensity");
static_assert(sizeof(XShipPawn_GetWaterDensity) == 0x00000C, "Wrong size on XShipPawn_GetWaterDensity");
static_assert(offsetof(XShipPawn_GetWaterDensity, InLocation) == 0x000000, "Member 'XShipPawn_GetWaterDensity::InLocation' has a wrong offset!");
static_assert(offsetof(XShipPawn_GetWaterDensity, ReturnValue) == 0x000008, "Member 'XShipPawn_GetWaterDensity::ReturnValue' has a wrong offset!");

// Function XShip.XShipPawn.GetWaterNormal
// 0x0014 (0x0014 - 0x0000)
struct XShipPawn_GetWaterNormal final
{
public:
	struct FVector2D                              InLocation;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XShipPawn_GetWaterNormal) == 0x000004, "Wrong alignment on XShipPawn_GetWaterNormal");
static_assert(sizeof(XShipPawn_GetWaterNormal) == 0x000014, "Wrong size on XShipPawn_GetWaterNormal");
static_assert(offsetof(XShipPawn_GetWaterNormal, InLocation) == 0x000000, "Member 'XShipPawn_GetWaterNormal::InLocation' has a wrong offset!");
static_assert(offsetof(XShipPawn_GetWaterNormal, ReturnValue) == 0x000008, "Member 'XShipPawn_GetWaterNormal::ReturnValue' has a wrong offset!");

// Function XShip.XShipPawn.GetWaterWorldZ
// 0x000C (0x000C - 0x0000)
struct XShipPawn_GetWaterWorldZ final
{
public:
	struct FVector2D                              InLocation;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XShipPawn_GetWaterWorldZ) == 0x000004, "Wrong alignment on XShipPawn_GetWaterWorldZ");
static_assert(sizeof(XShipPawn_GetWaterWorldZ) == 0x00000C, "Wrong size on XShipPawn_GetWaterWorldZ");
static_assert(offsetof(XShipPawn_GetWaterWorldZ, InLocation) == 0x000000, "Member 'XShipPawn_GetWaterWorldZ::InLocation' has a wrong offset!");
static_assert(offsetof(XShipPawn_GetWaterWorldZ, ReturnValue) == 0x000008, "Member 'XShipPawn_GetWaterWorldZ::ReturnValue' has a wrong offset!");

// Function XShip.XShipPawn.GetXShipComponent
// 0x0008 (0x0008 - 0x0000)
struct XShipPawn_GetXShipComponent final
{
public:
	class UXShipComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XShipPawn_GetXShipComponent) == 0x000008, "Wrong alignment on XShipPawn_GetXShipComponent");
static_assert(sizeof(XShipPawn_GetXShipComponent) == 0x000008, "Wrong size on XShipPawn_GetXShipComponent");
static_assert(offsetof(XShipPawn_GetXShipComponent, ReturnValue) == 0x000000, "Member 'XShipPawn_GetXShipComponent::ReturnValue' has a wrong offset!");

}

