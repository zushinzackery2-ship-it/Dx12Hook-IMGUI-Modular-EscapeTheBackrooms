#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Base_GM

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Base_GM.Base_GM_C
// 0x0020 (0x0328 - 0x0308)
class ABase_GM_C : public AGameMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ALobby_PlayerController_Nebula_C*> PlayerControllers;                               // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_Base_GM(int32 EntryPoint);
	void K2_OnLogout(class AController* ExitingController);
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void ServerTravel_ToGameplayMap(class FName Map);
	void Handle_PlayerConnection(class APlayerController* NewPlayer);
	void Handle_Player_Disconnection(class AController* Player);
	void KickPlayer(int32 PlayerId);
	void GetPlayerControllerFromPlayerState(class APlayerState* PlayerState, class ABP_BasePlayerController_C** PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Base_GM_C">();
	}
	static class ABase_GM_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABase_GM_C>();
	}
};
static_assert(alignof(ABase_GM_C) == 0x000008, "Wrong alignment on ABase_GM_C");
static_assert(sizeof(ABase_GM_C) == 0x000328, "Wrong size on ABase_GM_C");
static_assert(offsetof(ABase_GM_C, UberGraphFrame) == 0x000308, "Member 'ABase_GM_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABase_GM_C, DefaultSceneRoot) == 0x000310, "Member 'ABase_GM_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABase_GM_C, PlayerControllers) == 0x000318, "Member 'ABase_GM_C::PlayerControllers' has a wrong offset!");

}

