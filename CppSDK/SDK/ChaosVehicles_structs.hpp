#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChaosVehicles

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum ChaosVehicles.EVehicleThrustType
// NumValues: 0x0005
enum class EVehicleThrustType : uint8
{
	Fixed                                    = 0,
	Wing                                     = 1,
	Rudder                                   = 2,
	Elevator                                 = 3,
	EVehicleThrustType_MAX                   = 4,
};

// Enum ChaosVehicles.EVehicleAerofoilType
// NumValues: 0x0005
enum class EVehicleAerofoilType : uint8
{
	Fixed                                    = 0,
	Wing                                     = 1,
	Rudder                                   = 2,
	Elevator                                 = 3,
	EVehicleAerofoilType_MAX                 = 4,
};

// Enum ChaosVehicles.EAxleType
// NumValues: 0x0004
enum class EAxleType : uint8
{
	Undefined                                = 0,
	Front                                    = 1,
	Rear                                     = 2,
	EAxleType_MAX                            = 3,
};

// Enum ChaosVehicles.ESweepType
// NumValues: 0x0003
enum class ESweepType : uint8
{
	SimpleSweep                              = 0,
	ComplexSweep                             = 1,
	ESweepType_MAX                           = 2,
};

// Enum ChaosVehicles.ESweepShape
// NumValues: 0x0004
enum class ESweepShape : uint8
{
	Raycast                                  = 0,
	Spherecast                               = 1,
	Shapecast                                = 2,
	ESweepShape_MAX                          = 3,
};

// Enum ChaosVehicles.ESteeringType
// NumValues: 0x0004
enum class ESteeringType : uint8
{
	SingleAngle                              = 0,
	AngleRatio                               = 1,
	Ackermann                                = 2,
	ESteeringType_MAX                        = 3,
};

// Enum ChaosVehicles.EVehicleDifferential
// NumValues: 0x0004
enum class EVehicleDifferential : uint8
{
	AllWheelDrive                            = 0,
	FrontWheelDrive                          = 1,
	RearWheelDrive                           = 2,
	EVehicleDifferential_MAX                 = 3,
};

// ScriptStruct ChaosVehicles.AnimNode_WheelController
// 0x0018 (0x00E0 - 0x00C8)
struct FAnimNode_WheelController final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_C8[0x18];                                      // 0x00C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_WheelController) == 0x000008, "Wrong alignment on FAnimNode_WheelController");
static_assert(sizeof(FAnimNode_WheelController) == 0x0000E0, "Wrong size on FAnimNode_WheelController");

// ScriptStruct ChaosVehicles.VehicleThrustConfig
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FVehicleThrustConfig final
{
public:
	EVehicleThrustType                            ThrustType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ThrustAxis;                                        // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxThrustForce;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxControlAngle;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x44];                                      // 0x002C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleThrustConfig) == 0x000008, "Wrong alignment on FVehicleThrustConfig");
static_assert(sizeof(FVehicleThrustConfig) == 0x000070, "Wrong size on FVehicleThrustConfig");
static_assert(offsetof(FVehicleThrustConfig, ThrustType) == 0x000000, "Member 'FVehicleThrustConfig::ThrustType' has a wrong offset!");
static_assert(offsetof(FVehicleThrustConfig, BoneName) == 0x000004, "Member 'FVehicleThrustConfig::BoneName' has a wrong offset!");
static_assert(offsetof(FVehicleThrustConfig, Offset) == 0x00000C, "Member 'FVehicleThrustConfig::Offset' has a wrong offset!");
static_assert(offsetof(FVehicleThrustConfig, ThrustAxis) == 0x000018, "Member 'FVehicleThrustConfig::ThrustAxis' has a wrong offset!");
static_assert(offsetof(FVehicleThrustConfig, MaxThrustForce) == 0x000024, "Member 'FVehicleThrustConfig::MaxThrustForce' has a wrong offset!");
static_assert(offsetof(FVehicleThrustConfig, MaxControlAngle) == 0x000028, "Member 'FVehicleThrustConfig::MaxControlAngle' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleAerofoilConfig
// 0x0078 (0x0078 - 0x0000)
struct FVehicleAerofoilConfig final
{
public:
	EVehicleAerofoilType                          AerofoilType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpAxis;                                            // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Area;                                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camber;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxControlAngle;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StallAngle;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftMultiplier;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragMultiplier;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x3C];                                      // 0x003C(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleAerofoilConfig) == 0x000004, "Wrong alignment on FVehicleAerofoilConfig");
static_assert(sizeof(FVehicleAerofoilConfig) == 0x000078, "Wrong size on FVehicleAerofoilConfig");
static_assert(offsetof(FVehicleAerofoilConfig, AerofoilType) == 0x000000, "Member 'FVehicleAerofoilConfig::AerofoilType' has a wrong offset!");
static_assert(offsetof(FVehicleAerofoilConfig, BoneName) == 0x000004, "Member 'FVehicleAerofoilConfig::BoneName' has a wrong offset!");
static_assert(offsetof(FVehicleAerofoilConfig, Offset) == 0x00000C, "Member 'FVehicleAerofoilConfig::Offset' has a wrong offset!");
static_assert(offsetof(FVehicleAerofoilConfig, UpAxis) == 0x000018, "Member 'FVehicleAerofoilConfig::UpAxis' has a wrong offset!");
static_assert(offsetof(FVehicleAerofoilConfig, Area) == 0x000024, "Member 'FVehicleAerofoilConfig::Area' has a wrong offset!");
static_assert(offsetof(FVehicleAerofoilConfig, Camber) == 0x000028, "Member 'FVehicleAerofoilConfig::Camber' has a wrong offset!");
static_assert(offsetof(FVehicleAerofoilConfig, MaxControlAngle) == 0x00002C, "Member 'FVehicleAerofoilConfig::MaxControlAngle' has a wrong offset!");
static_assert(offsetof(FVehicleAerofoilConfig, StallAngle) == 0x000030, "Member 'FVehicleAerofoilConfig::StallAngle' has a wrong offset!");
static_assert(offsetof(FVehicleAerofoilConfig, LiftMultiplier) == 0x000034, "Member 'FVehicleAerofoilConfig::LiftMultiplier' has a wrong offset!");
static_assert(offsetof(FVehicleAerofoilConfig, DragMultiplier) == 0x000038, "Member 'FVehicleAerofoilConfig::DragMultiplier' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleInputRateConfig
// 0x0008 (0x0008 - 0x0000)
struct FVehicleInputRateConfig final
{
public:
	float                                         RiseRate;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallRate;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleInputRateConfig) == 0x000004, "Wrong alignment on FVehicleInputRateConfig");
static_assert(sizeof(FVehicleInputRateConfig) == 0x000008, "Wrong size on FVehicleInputRateConfig");
static_assert(offsetof(FVehicleInputRateConfig, RiseRate) == 0x000000, "Member 'FVehicleInputRateConfig::RiseRate' has a wrong offset!");
static_assert(offsetof(FVehicleInputRateConfig, FallRate) == 0x000004, "Member 'FVehicleInputRateConfig::FallRate' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleStabilizeControlConfig
// 0x000C (0x000C - 0x0000)
struct FVehicleStabilizeControlConfig final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AltitudeHoldZ;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionHoldXY;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleStabilizeControlConfig) == 0x000004, "Wrong alignment on FVehicleStabilizeControlConfig");
static_assert(sizeof(FVehicleStabilizeControlConfig) == 0x00000C, "Wrong size on FVehicleStabilizeControlConfig");
static_assert(offsetof(FVehicleStabilizeControlConfig, Enabled) == 0x000000, "Member 'FVehicleStabilizeControlConfig::Enabled' has a wrong offset!");
static_assert(offsetof(FVehicleStabilizeControlConfig, AltitudeHoldZ) == 0x000004, "Member 'FVehicleStabilizeControlConfig::AltitudeHoldZ' has a wrong offset!");
static_assert(offsetof(FVehicleStabilizeControlConfig, PositionHoldXY) == 0x000008, "Member 'FVehicleStabilizeControlConfig::PositionHoldXY' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleTargetRotationControlConfig
// 0x002C (0x002C - 0x0000)
struct FVehicleTargetRotationControlConfig final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRollVsSpeedEnabled;                               // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RollControlScaling;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollMaxAngle;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchControlScaling;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMaxAngle;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationStiffness;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDamping;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAccel;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCentreRollStrength;                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCentrePitchStrength;                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCentreYawStrength;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleTargetRotationControlConfig) == 0x000004, "Wrong alignment on FVehicleTargetRotationControlConfig");
static_assert(sizeof(FVehicleTargetRotationControlConfig) == 0x00002C, "Wrong size on FVehicleTargetRotationControlConfig");
static_assert(offsetof(FVehicleTargetRotationControlConfig, Enabled) == 0x000000, "Member 'FVehicleTargetRotationControlConfig::Enabled' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, bRollVsSpeedEnabled) == 0x000001, "Member 'FVehicleTargetRotationControlConfig::bRollVsSpeedEnabled' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, RollControlScaling) == 0x000004, "Member 'FVehicleTargetRotationControlConfig::RollControlScaling' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, RollMaxAngle) == 0x000008, "Member 'FVehicleTargetRotationControlConfig::RollMaxAngle' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, PitchControlScaling) == 0x00000C, "Member 'FVehicleTargetRotationControlConfig::PitchControlScaling' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, PitchMaxAngle) == 0x000010, "Member 'FVehicleTargetRotationControlConfig::PitchMaxAngle' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, RotationStiffness) == 0x000014, "Member 'FVehicleTargetRotationControlConfig::RotationStiffness' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, RotationDamping) == 0x000018, "Member 'FVehicleTargetRotationControlConfig::RotationDamping' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, MaxAccel) == 0x00001C, "Member 'FVehicleTargetRotationControlConfig::MaxAccel' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, AutoCentreRollStrength) == 0x000020, "Member 'FVehicleTargetRotationControlConfig::AutoCentreRollStrength' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, AutoCentrePitchStrength) == 0x000024, "Member 'FVehicleTargetRotationControlConfig::AutoCentrePitchStrength' has a wrong offset!");
static_assert(offsetof(FVehicleTargetRotationControlConfig, AutoCentreYawStrength) == 0x000028, "Member 'FVehicleTargetRotationControlConfig::AutoCentreYawStrength' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleTorqueControlConfig
// 0x0020 (0x0020 - 0x0000)
struct FVehicleTorqueControlConfig final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YawTorqueScaling;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawFromSteering;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawFromRollTorqueScaling;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchTorqueScaling;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollTorqueScaling;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollFromSteering;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDamping;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleTorqueControlConfig) == 0x000004, "Wrong alignment on FVehicleTorqueControlConfig");
static_assert(sizeof(FVehicleTorqueControlConfig) == 0x000020, "Wrong size on FVehicleTorqueControlConfig");
static_assert(offsetof(FVehicleTorqueControlConfig, Enabled) == 0x000000, "Member 'FVehicleTorqueControlConfig::Enabled' has a wrong offset!");
static_assert(offsetof(FVehicleTorqueControlConfig, YawTorqueScaling) == 0x000004, "Member 'FVehicleTorqueControlConfig::YawTorqueScaling' has a wrong offset!");
static_assert(offsetof(FVehicleTorqueControlConfig, YawFromSteering) == 0x000008, "Member 'FVehicleTorqueControlConfig::YawFromSteering' has a wrong offset!");
static_assert(offsetof(FVehicleTorqueControlConfig, YawFromRollTorqueScaling) == 0x00000C, "Member 'FVehicleTorqueControlConfig::YawFromRollTorqueScaling' has a wrong offset!");
static_assert(offsetof(FVehicleTorqueControlConfig, PitchTorqueScaling) == 0x000010, "Member 'FVehicleTorqueControlConfig::PitchTorqueScaling' has a wrong offset!");
static_assert(offsetof(FVehicleTorqueControlConfig, RollTorqueScaling) == 0x000014, "Member 'FVehicleTorqueControlConfig::RollTorqueScaling' has a wrong offset!");
static_assert(offsetof(FVehicleTorqueControlConfig, RollFromSteering) == 0x000018, "Member 'FVehicleTorqueControlConfig::RollFromSteering' has a wrong offset!");
static_assert(offsetof(FVehicleTorqueControlConfig, RotationDamping) == 0x00001C, "Member 'FVehicleTorqueControlConfig::RotationDamping' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleReplicatedState
// 0x0028 (0x0028 - 0x0000)
struct FVehicleReplicatedState final
{
public:
	float                                         SteeringInput;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrottleInput;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakeInput;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchInput;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollInput;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawInput;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeInput;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetGear;                                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrottleUp;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrottleDown;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleReplicatedState) == 0x000004, "Wrong alignment on FVehicleReplicatedState");
static_assert(sizeof(FVehicleReplicatedState) == 0x000028, "Wrong size on FVehicleReplicatedState");
static_assert(offsetof(FVehicleReplicatedState, SteeringInput) == 0x000000, "Member 'FVehicleReplicatedState::SteeringInput' has a wrong offset!");
static_assert(offsetof(FVehicleReplicatedState, ThrottleInput) == 0x000004, "Member 'FVehicleReplicatedState::ThrottleInput' has a wrong offset!");
static_assert(offsetof(FVehicleReplicatedState, BrakeInput) == 0x000008, "Member 'FVehicleReplicatedState::BrakeInput' has a wrong offset!");
static_assert(offsetof(FVehicleReplicatedState, PitchInput) == 0x00000C, "Member 'FVehicleReplicatedState::PitchInput' has a wrong offset!");
static_assert(offsetof(FVehicleReplicatedState, RollInput) == 0x000010, "Member 'FVehicleReplicatedState::RollInput' has a wrong offset!");
static_assert(offsetof(FVehicleReplicatedState, YawInput) == 0x000014, "Member 'FVehicleReplicatedState::YawInput' has a wrong offset!");
static_assert(offsetof(FVehicleReplicatedState, HandbrakeInput) == 0x000018, "Member 'FVehicleReplicatedState::HandbrakeInput' has a wrong offset!");
static_assert(offsetof(FVehicleReplicatedState, TargetGear) == 0x00001C, "Member 'FVehicleReplicatedState::TargetGear' has a wrong offset!");
static_assert(offsetof(FVehicleReplicatedState, ThrottleUp) == 0x000020, "Member 'FVehicleReplicatedState::ThrottleUp' has a wrong offset!");
static_assert(offsetof(FVehicleReplicatedState, ThrottleDown) == 0x000024, "Member 'FVehicleReplicatedState::ThrottleDown' has a wrong offset!");

// ScriptStruct ChaosVehicles.ChaosWheelSetup
// 0x0020 (0x0020 - 0x0000)
struct FChaosWheelSetup final
{
public:
	TSubclassOf<class UChaosVehicleWheel>         WheelClass;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AdditionalOffset;                                  // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChaosWheelSetup) == 0x000008, "Wrong alignment on FChaosWheelSetup");
static_assert(sizeof(FChaosWheelSetup) == 0x000020, "Wrong size on FChaosWheelSetup");
static_assert(offsetof(FChaosWheelSetup, WheelClass) == 0x000000, "Member 'FChaosWheelSetup::WheelClass' has a wrong offset!");
static_assert(offsetof(FChaosWheelSetup, BoneName) == 0x000008, "Member 'FChaosWheelSetup::BoneName' has a wrong offset!");
static_assert(offsetof(FChaosWheelSetup, AdditionalOffset) == 0x000010, "Member 'FChaosWheelSetup::AdditionalOffset' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleSteeringConfig
// 0x00B8 (0x00B8 - 0x0000)
struct FVehicleSteeringConfig final
{
public:
	ESteeringType                                 SteeringType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngleRatio;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     SteeringCurve;                                     // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x28];                                      // 0x0090(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleSteeringConfig) == 0x000008, "Wrong alignment on FVehicleSteeringConfig");
static_assert(sizeof(FVehicleSteeringConfig) == 0x0000B8, "Wrong size on FVehicleSteeringConfig");
static_assert(offsetof(FVehicleSteeringConfig, SteeringType) == 0x000000, "Member 'FVehicleSteeringConfig::SteeringType' has a wrong offset!");
static_assert(offsetof(FVehicleSteeringConfig, AngleRatio) == 0x000004, "Member 'FVehicleSteeringConfig::AngleRatio' has a wrong offset!");
static_assert(offsetof(FVehicleSteeringConfig, SteeringCurve) == 0x000008, "Member 'FVehicleSteeringConfig::SteeringCurve' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleTransmissionConfig
// 0x0070 (0x0070 - 0x0000)
struct FVehicleTransmissionConfig final
{
public:
	bool                                          bUseAutomaticGears;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAutoReverse;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinalRatio;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ForwardGearRatios;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<float>                                 ReverseGearRatios;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         ChangeUpRPM;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeDownRPM;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearChangeTime;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmissionEfficiency;                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x38];                                      // 0x0038(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleTransmissionConfig) == 0x000008, "Wrong alignment on FVehicleTransmissionConfig");
static_assert(sizeof(FVehicleTransmissionConfig) == 0x000070, "Wrong size on FVehicleTransmissionConfig");
static_assert(offsetof(FVehicleTransmissionConfig, bUseAutomaticGears) == 0x000000, "Member 'FVehicleTransmissionConfig::bUseAutomaticGears' has a wrong offset!");
static_assert(offsetof(FVehicleTransmissionConfig, bUseAutoReverse) == 0x000001, "Member 'FVehicleTransmissionConfig::bUseAutoReverse' has a wrong offset!");
static_assert(offsetof(FVehicleTransmissionConfig, FinalRatio) == 0x000004, "Member 'FVehicleTransmissionConfig::FinalRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTransmissionConfig, ForwardGearRatios) == 0x000008, "Member 'FVehicleTransmissionConfig::ForwardGearRatios' has a wrong offset!");
static_assert(offsetof(FVehicleTransmissionConfig, ReverseGearRatios) == 0x000018, "Member 'FVehicleTransmissionConfig::ReverseGearRatios' has a wrong offset!");
static_assert(offsetof(FVehicleTransmissionConfig, ChangeUpRPM) == 0x000028, "Member 'FVehicleTransmissionConfig::ChangeUpRPM' has a wrong offset!");
static_assert(offsetof(FVehicleTransmissionConfig, ChangeDownRPM) == 0x00002C, "Member 'FVehicleTransmissionConfig::ChangeDownRPM' has a wrong offset!");
static_assert(offsetof(FVehicleTransmissionConfig, GearChangeTime) == 0x000030, "Member 'FVehicleTransmissionConfig::GearChangeTime' has a wrong offset!");
static_assert(offsetof(FVehicleTransmissionConfig, TransmissionEfficiency) == 0x000034, "Member 'FVehicleTransmissionConfig::TransmissionEfficiency' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleEngineConfig
// 0x00C8 (0x00C8 - 0x0000)
struct FVehicleEngineConfig final
{
public:
	struct FRuntimeFloatCurve                     TorqueCurve;                                       // 0x0000(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         MaxTorque;                                         // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPM;                                            // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineIdleRPM;                                     // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineBrakeEffect;                                 // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRevUpMOI;                                    // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRevDownRate;                                 // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x28];                                      // 0x00A0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleEngineConfig) == 0x000008, "Wrong alignment on FVehicleEngineConfig");
static_assert(sizeof(FVehicleEngineConfig) == 0x0000C8, "Wrong size on FVehicleEngineConfig");
static_assert(offsetof(FVehicleEngineConfig, TorqueCurve) == 0x000000, "Member 'FVehicleEngineConfig::TorqueCurve' has a wrong offset!");
static_assert(offsetof(FVehicleEngineConfig, MaxTorque) == 0x000088, "Member 'FVehicleEngineConfig::MaxTorque' has a wrong offset!");
static_assert(offsetof(FVehicleEngineConfig, MaxRPM) == 0x00008C, "Member 'FVehicleEngineConfig::MaxRPM' has a wrong offset!");
static_assert(offsetof(FVehicleEngineConfig, EngineIdleRPM) == 0x000090, "Member 'FVehicleEngineConfig::EngineIdleRPM' has a wrong offset!");
static_assert(offsetof(FVehicleEngineConfig, EngineBrakeEffect) == 0x000094, "Member 'FVehicleEngineConfig::EngineBrakeEffect' has a wrong offset!");
static_assert(offsetof(FVehicleEngineConfig, EngineRevUpMOI) == 0x000098, "Member 'FVehicleEngineConfig::EngineRevUpMOI' has a wrong offset!");
static_assert(offsetof(FVehicleEngineConfig, EngineRevDownRate) == 0x00009C, "Member 'FVehicleEngineConfig::EngineRevDownRate' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleDifferentialConfig
// 0x0008 (0x0008 - 0x0000)
struct FVehicleDifferentialConfig final
{
public:
	EVehicleDifferential                          DifferentialType;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrontRearSplit;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleDifferentialConfig) == 0x000004, "Wrong alignment on FVehicleDifferentialConfig");
static_assert(sizeof(FVehicleDifferentialConfig) == 0x000008, "Wrong size on FVehicleDifferentialConfig");
static_assert(offsetof(FVehicleDifferentialConfig, DifferentialType) == 0x000000, "Member 'FVehicleDifferentialConfig::DifferentialType' has a wrong offset!");
static_assert(offsetof(FVehicleDifferentialConfig, FrontRearSplit) == 0x000004, "Member 'FVehicleDifferentialConfig::FrontRearSplit' has a wrong offset!");

// ScriptStruct ChaosVehicles.WheelStatus
// 0x003C (0x003C - 0x0000)
struct FWheelStatus final
{
public:
	bool                                          bInContact;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ContactPoint;                                      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPhysicalMaterial>       PhysMaterial;                                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedSuspensionLength;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringForce;                                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSlipping;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlipMagnitude;                                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkidding;                                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkidMagnitude;                                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SkidNormal;                                        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWheelStatus) == 0x000004, "Wrong alignment on FWheelStatus");
static_assert(sizeof(FWheelStatus) == 0x00003C, "Wrong size on FWheelStatus");
static_assert(offsetof(FWheelStatus, bInContact) == 0x000000, "Member 'FWheelStatus::bInContact' has a wrong offset!");
static_assert(offsetof(FWheelStatus, ContactPoint) == 0x000004, "Member 'FWheelStatus::ContactPoint' has a wrong offset!");
static_assert(offsetof(FWheelStatus, PhysMaterial) == 0x000010, "Member 'FWheelStatus::PhysMaterial' has a wrong offset!");
static_assert(offsetof(FWheelStatus, NormalizedSuspensionLength) == 0x000018, "Member 'FWheelStatus::NormalizedSuspensionLength' has a wrong offset!");
static_assert(offsetof(FWheelStatus, SpringForce) == 0x00001C, "Member 'FWheelStatus::SpringForce' has a wrong offset!");
static_assert(offsetof(FWheelStatus, bIsSlipping) == 0x000020, "Member 'FWheelStatus::bIsSlipping' has a wrong offset!");
static_assert(offsetof(FWheelStatus, SlipMagnitude) == 0x000024, "Member 'FWheelStatus::SlipMagnitude' has a wrong offset!");
static_assert(offsetof(FWheelStatus, bIsSkidding) == 0x000028, "Member 'FWheelStatus::bIsSkidding' has a wrong offset!");
static_assert(offsetof(FWheelStatus, SkidMagnitude) == 0x00002C, "Member 'FWheelStatus::SkidMagnitude' has a wrong offset!");
static_assert(offsetof(FWheelStatus, SkidNormal) == 0x000030, "Member 'FWheelStatus::SkidNormal' has a wrong offset!");

// ScriptStruct ChaosVehicles.VehicleAnimationInstanceProxy
// 0x0010 (0x0780 - 0x0770)
struct FVehicleAnimationInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_770[0x10];                                     // 0x0770(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleAnimationInstanceProxy) == 0x000010, "Wrong alignment on FVehicleAnimationInstanceProxy");
static_assert(sizeof(FVehicleAnimationInstanceProxy) == 0x000780, "Wrong size on FVehicleAnimationInstanceProxy");

}

