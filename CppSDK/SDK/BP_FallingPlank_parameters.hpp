#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FallingPlank

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_FallingPlank.BP_FallingPlank_C.ExecuteUbergraph_BP_FallingPlank
// 0x01D0 (0x01D0 - 0x0000)
struct BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionResponse                            Temp_byte_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            K2Node_Select_Default;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0074(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADestructibleActor*                     K2Node_DynamicCast_AsDestructible_Actor;           // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x019C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x01B0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default_1;                           // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank) == 0x000008, "Wrong alignment on BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank");
static_assert(sizeof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank) == 0x0001D0, "Wrong size on BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, EntryPoint) == 0x000000, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_MakeVector_ReturnValue) == 0x000004, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, Temp_bool_Variable) == 0x000010, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, Temp_object_Variable) == 0x000018, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, Temp_object_Variable_1) == 0x000020, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, Temp_bool_Variable_1) == 0x000028, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, Temp_byte_Variable) == 0x000029, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, Temp_byte_Variable_1) == 0x00002A, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, Temp_bool_Has_Been_Initd_Variable) == 0x00002B, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, Temp_bool_IsClosed_Variable) == 0x00002C, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_CreateDelegate_OutputDelegate) == 0x000030, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000040, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_Select_Default) == 0x000048, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_ComponentBoundEvent_HitComponent) == 0x000050, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_ComponentBoundEvent_OtherActor) == 0x000058, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_ComponentBoundEvent_OtherComp) == 0x000060, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000068, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_ComponentBoundEvent_Hit) == 0x000074, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_CustomEvent_Location) == 0x0000FC, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_bBlockingHit) == 0x000108, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_bInitialOverlap) == 0x000109, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_Time) == 0x00010C, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_Distance) == 0x000110, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_Location) == 0x000114, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_ImpactPoint) == 0x000120, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_Normal) == 0x00012C, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_ImpactNormal) == 0x000138, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_PhysMat) == 0x000148, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_HitActor) == 0x000150, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_HitComponent) == 0x000158, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_HitBoneName) == 0x000160, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_HitItem) == 0x000168, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_ElementIndex) == 0x00016C, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_FaceIndex) == 0x000170, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_TraceStart) == 0x000174, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_BreakHitResult_TraceEnd) == 0x000180, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_DynamicCast_AsDestructible_Actor) == 0x000190, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_DynamicCast_AsDestructible_Actor' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_DynamicCast_bSuccess) == 0x000198, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_CreateDelegate_OutputDelegate_1) == 0x00019C, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0001B0, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_Not_PreBool_ReturnValue) == 0x0001B8, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, K2Node_Select_Default_1) == 0x0001C0, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x0001C8, "Member 'BP_FallingPlank_C_ExecuteUbergraph_BP_FallingPlank::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");

// Function BP_FallingPlank.BP_FallingPlank_C.MC_ImpactSound
// 0x000C (0x000C - 0x0000)
struct BP_FallingPlank_C_MC_ImpactSound final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FallingPlank_C_MC_ImpactSound) == 0x000004, "Wrong alignment on BP_FallingPlank_C_MC_ImpactSound");
static_assert(sizeof(BP_FallingPlank_C_MC_ImpactSound) == 0x00000C, "Wrong size on BP_FallingPlank_C_MC_ImpactSound");
static_assert(offsetof(BP_FallingPlank_C_MC_ImpactSound, Location) == 0x000000, "Member 'BP_FallingPlank_C_MC_ImpactSound::Location' has a wrong offset!");

// Function BP_FallingPlank.BP_FallingPlank_C.BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'BP_FallingPlank_C_BndEvt__BP_FallingPlank_PlankMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

}

