#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Spectator

#include "Basic.hpp"

#include "BP_Spectator_classes.hpp"
#include "BP_Spectator_parameters.hpp"


namespace SDK
{

// Function BP_Spectator.BP_Spectator_C.ExecuteUbergraph_BP_Spectator
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Spectator_C::ExecuteUbergraph_BP_Spectator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "ExecuteUbergraph_BP_Spectator");

	Params::BP_Spectator_C_ExecuteUbergraph_BP_Spectator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.OnTargetDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Spectator_C::OnTargetDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "OnTargetDestroyed");

	Params::BP_Spectator_C_OnTargetDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.ResetSpectateToIndex0
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_Spectator_C::ResetSpectateToIndex0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "ResetSpectateToIndex0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Spectator.BP_Spectator_C.ClientPossessed
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerController_C*           PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Spectator_C::ClientPossessed(class AMP_PlayerController_C* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "ClientPossessed");

	Params::BP_Spectator_C_ClientPossessed Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Spectator_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "ReceivePossessed");

	Params::BP_Spectator_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.InpAxisEvt_TurnRate_K2Node_InputAxisEvent_3
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Spectator_C::InpAxisEvt_TurnRate_K2Node_InputAxisEvent_3(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "InpAxisEvt_TurnRate_K2Node_InputAxisEvent_3");

	Params::BP_Spectator_C_InpAxisEvt_TurnRate_K2Node_InputAxisEvent_3 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Spectator_C::InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_2");

	Params::BP_Spectator_C_InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.UpdateSpectating
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Spectating                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_Spectator_C::UpdateSpectating(const class FString& Spectating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "UpdateSpectating");

	Params::BP_Spectator_C_UpdateSpectating Parms{};

	Parms.Spectating = std::move(Spectating);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.SpectatePreviousPlayer
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_Spectator_C::SpectatePreviousPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "SpectatePreviousPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Spectator.BP_Spectator_C.SpectateNextPlayer
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_Spectator_C::SpectateNextPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "SpectateNextPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Spectator.BP_Spectator_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Spectator_C::InpAxisEvt_Turn_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "InpAxisEvt_Turn_K2Node_InputAxisEvent_1");

	Params::BP_Spectator_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Spectator_C::InpAxisEvt_LookUp_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "InpAxisEvt_LookUp_K2Node_InputAxisEvent_0");

	Params::BP_Spectator_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.InpActEvt_LeanRight_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Spectator_C::InpActEvt_LeanRight_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "InpActEvt_LeanRight_K2Node_InputActionEvent_0");

	Params::BP_Spectator_C_InpActEvt_LeanRight_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.InpActEvt_LeanLeft_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Spectator_C::InpActEvt_LeanLeft_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "InpActEvt_LeanLeft_K2Node_InputActionEvent_1");

	Params::BP_Spectator_C_InpActEvt_LeanLeft_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.InpActEvt_Use_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Spectator_C::InpActEvt_Use_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "InpActEvt_Use_K2Node_InputActionEvent_2");

	Params::BP_Spectator_C_InpActEvt_Use_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.InpActEvt_Secondary_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Spectator_C::InpActEvt_Secondary_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "InpActEvt_Secondary_K2Node_InputActionEvent_3");

	Params::BP_Spectator_C_InpActEvt_Secondary_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Spectator.BP_Spectator_C.SpectatePrevious
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Spectator_C::SpectatePrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "SpectatePrevious");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Spectator.BP_Spectator_C.SpectateNext
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Spectator_C::SpectateNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "SpectateNext");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Spectator.BP_Spectator_C.SpectateIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SpectateIndex_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Spectator_C::SpectateIndex(int32 SpectateIndex_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Spectator_C", "SpectateIndex");

	Params::BP_Spectator_C_SpectateIndex Parms{};

	Parms.SpectateIndex_0 = SpectateIndex_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

